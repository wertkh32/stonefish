#include "QuadTetElement.h"

//first 4 are corner vertices
//next six are points on the edges
//1,2,3,4, 12, 23, 31, 41, 42, 43
QuadTetElement::QuadTetElement(Node* nodess[10],
							   float _E, float _v, float _density)
{
		E = _E;
		v = _v;
		density = _density;

		for(int i=0;i<10;i++)
			nodes[i] = nodess[i];
	
		for(int i=0;i<10;i++)
		{
			x[i][0] = nodes[i]->pos.x;
			x[i][1] = nodes[i]->pos.y;
			x[i][2] = nodes[i]->pos.z;

			//printf("%f %f %f\n",x[i][0],x[i][1],x[i][2]);
		}

		precompute();
}

float beizer(float p0, float p1, float p2, float t)
{
	//printf("%f\n",t);
	//system("pause");
	return (1.0-t) * (1.0-t) * p0 + 2 * (1.0-t) * t * p1 + t * t * p2;
}

void QuadTetElement::renderCurveLine(int node1, int node2, int node3)
{
		float coords[9] = {nodes[node1]->pos_t.x,nodes[node1]->pos_t.y,nodes[node1]->pos_t.z,
							  nodes[node2]->pos_t.x,nodes[node2]->pos_t.y,nodes[node2]->pos_t.z,
							  nodes[node3]->pos_t.x,nodes[node3]->pos_t.y,nodes[node3]->pos_t.z};

		//glMap1f(GL_MAP1_VERTEX_3,0.0,1.0,3,3,coords);

		 //glEnable(GL_MAP1_VERTEX_3);

 
        glBegin(GL_LINE_STRIP);
        for (int i = 0; i <= 5; i++) {
            glVertex3f(beizer(coords[0],coords[3],coords[6],i/5.0),
						beizer(coords[1],coords[4],coords[7],i/5.0),
						beizer(coords[2],coords[5],coords[8],i/5.0));
        
		}
		//glVertex3fv(coords);
		//glVertex3fv(coords + 3);
		//glVertex3fv(coords + 6);
       glEnd();
}

void QuadTetElement::renderElement()
{

	//1,2,3,4, 5 = 12, 6 = 23, 7 = 31, 8 = 41, 9 = 42, 10 = 43
	glPushMatrix();

	//1,5,2
	renderCurveLine(0,4,1);

	//2,6,3
	renderCurveLine(1,5,2);

	//1,7,3
	renderCurveLine(0,6,2);


	//1,8,4
	renderCurveLine(0,7,3);

	//2,9,4
	renderCurveLine(1,8,3);

	//3,10,4
	renderCurveLine(2,9,3);

	glPopMatrix();
}

void QuadTetElement::precompute()
{
	//from characteristic polynomial
	undeformShapeMatInv =
		Matrix3d(nodes[0]->pos.x - nodes[3]->pos.x,nodes[1]->pos.x - nodes[3]->pos.x,nodes[2]->pos.x - nodes[3]->pos.x,
				 nodes[0]->pos.y - nodes[3]->pos.y,nodes[1]->pos.y - nodes[3]->pos.y,nodes[2]->pos.y - nodes[3]->pos.y,
				 nodes[0]->pos.z - nodes[3]->pos.z,nodes[1]->pos.z - nodes[3]->pos.z,nodes[2]->pos.z - nodes[3]->pos.z).inverse();

	computeLumpedMasses();
	computeStiffness();

	//for(int i=0;i<30;i++, putchar('\n'))
	//	for(int j=0;j<30;j++)
	//		printf("%f ",K(i,j));
}

void QuadTetElement::computeLumpedMasses()
{
	//from characteristic polynomial
	//volume calculations can be done with that other way with the 4x4 matrix but im too lazy to standardize
	volume = fabs(Matrix3d(x[0][0] - x[3][0], x[1][0] - x[3][0], x[2][0] - x[3][0],
	        			   x[0][1] - x[3][1], x[1][1] - x[3][1], x[2][1] - x[3][1],
						   x[0][2] - x[3][2], x[1][2] - x[3][2], x[2][2] - x[3][2]).determinant()) * (1.0/6.0);

	mass = volume * density;

	nodemass[0] = nodemass[1] = nodemass[2] = nodemass[3] = (1.0/32.0) * mass;
	nodemass[4] = nodemass[5] = nodemass[6] = nodemass[7] = nodemass[8] = nodemass[9] = (7.0/48.0) * mass; 
}

Matrix3d QuadTetElement::computeDeformationMat()
{
	Matrix3d deformShapeMat
		(nodes[0]->pos_t.x - nodes[3]->pos_t.x,nodes[1]->pos_t.x - nodes[3]->pos_t.x,nodes[2]->pos_t.x - nodes[3]->pos_t.x,
		nodes[0]->pos_t.y - nodes[3]->pos_t.y,nodes[1]->pos_t.y - nodes[3]->pos_t.y,nodes[2]->pos_t.y - nodes[3]->pos_t.y,
		nodes[0]->pos_t.z - nodes[3]->pos_t.z,nodes[1]->pos_t.z - nodes[3]->pos_t.z,nodes[2]->pos_t.z - nodes[3]->pos_t.z);
	return deformShapeMat * undeformShapeMatInv;
}

Matrix3d QuadTetElement::computeDeformShapeMat()
{
	Matrix3d deformShapeMat
		(nodes[0]->pos_t.x - nodes[3]->pos_t.x,nodes[1]->pos_t.x - nodes[3]->pos_t.x,nodes[2]->pos_t.x - nodes[3]->pos_t.x,
		nodes[0]->pos_t.y - nodes[3]->pos_t.y,nodes[1]->pos_t.y - nodes[3]->pos_t.y,nodes[2]->pos_t.y - nodes[3]->pos_t.y,
		nodes[0]->pos_t.z - nodes[3]->pos_t.z,nodes[1]->pos_t.z - nodes[3]->pos_t.z,nodes[2]->pos_t.z - nodes[3]->pos_t.z);
	return deformShapeMat;
}

void QuadTetElement::computeRotation()
{
	Matrix3d F,S;
	F = computeDeformationMat();
	PolarDecompose::compute(F,R,S);
}

void
QuadTetElement::computeB(float s[4], GenMatrix<float, 6, 30>* B, float* Jdet)
{
	// Jx1 Jy1 Jz1
	// Jx2 Jy2 Jz2
	// Jx3 Jy3 Jz3
	// Jx4 Jy4 Jz4


	/*
	Matrix4d J = Matrix4d(0.25, 0.25, 0.25, 0.25,
						  x[0][0] * (s[0] - 0.25) + x[4][0] * s[1] + x[6][0] * s[2] + x[7][0] * s[3],   x[4][0] * s[0] + x[1][0] * (s[1] - 0.25) + x[5][0] * s[2] + x[8][0] * s[3],   x[6][0] * s[0] + x[5][0] * s[1] + x[2][0] * (s[2] - 0.25) + x[9][0] * s[3],   x[7][0] * s[0] + x[8][0] * s[1] + x[9][0] * s[2] + x[3][0] * (s[3] - 0.25),
						  x[0][1] * (s[0] - 0.25) + x[4][1] * s[1] + x[6][1] * s[2] + x[7][1] * s[3],   x[4][1] * s[0] + x[1][1] * (s[1] - 0.25) + x[5][1] * s[2] + x[8][1] * s[3],   x[6][1] * s[0] + x[5][1] * s[1] + x[2][1] * (s[2] - 0.25) + x[9][1] * s[3],   x[7][1] * s[0] + x[8][1] * s[1] + x[9][1] * s[2] + x[3][1] * (s[3] - 0.25),
						  x[0][2] * (s[0] - 0.25) + x[4][2] * s[1] + x[6][2] * s[2] + x[7][2] * s[3],   x[4][2] * s[0] + x[1][2] * (s[1] - 0.25) + x[5][2] * s[2] + x[8][2] * s[3],   x[6][2] * s[0] + x[5][2] * s[1] + x[2][2] * (s[2] - 0.25) + x[9][2] * s[3],   x[7][2] * s[0] + x[8][2] * s[1] + x[9][2] * s[2] + x[3][2] * (s[3] - 0.25)) * 4;
	
	Matrix4d Jinv = J.inverse();
	*/

	//since we are only determining deformation close to the original configuration
	//normal tet barycentric coords should suffice as the directional derivatives
	Matrix4d J =	Matrix4d
		( 1.0, 1.0, 1.0, 1.0,
		nodes[0]->pos.x, nodes[1]->pos.x, nodes[2]->pos.x, nodes[3]->pos.x,
		nodes[0]->pos.y, nodes[1]->pos.y, nodes[2]->pos.y, nodes[3]->pos.y,
		nodes[0]->pos.z, nodes[1]->pos.z, nodes[2]->pos.z, nodes[3]->pos.z);

	Matrix4d Jinv =	J.inverse();

	//PT
	float P[3][4] = { {Jinv(0,1), Jinv(1,1), Jinv(2,1), Jinv(3,1)},
					  {Jinv(0,2), Jinv(1,2), Jinv(2,2), Jinv(3,2)},
					  {Jinv(0,3), Jinv(1,3), Jinv(2,3), Jinv(3,3)} };

	//for(int i=0;i<4;i++,putchar('\n'))
	//	for(int j=0;j<3;j++)
	//		printf("%f ",P[j][i]);
	//system("pause");

	float dN[4][10] = { {4 * s[0] - 1, 0, 0, 0, 4 * s[1], 0, 4 * s[2], 4 * s[3], 0, 0},

						{0, 4 * s[1] - 1, 0, 0, 4 * s[0], 4 * s[2], 0, 0, 4 * s[3], 0},
						
						{0, 0, 4 * s[2] - 1, 0, 0, 4 * s[1], 4 * s[0], 0, 0, 4 * s[3]},
						
						{0, 0, 0, 4 * s[3] - 1, 0, 0, 0, 4 * s[0], 4 * s[1], 4 * s[2]} };

	float dNdX[3][10];

	//PT * dN
	for(int i=0;i<3;i++)
		for(int j=0;j<10;j++)
		{
			dNdX[i][j] = 0;
			for(int k=0;k<4;k++)
				dNdX[i][j] += P[i][k] * dN[k][j];
		}

		float b[6][30] = { {dNdX[0][0], 0, 0, dNdX[0][1], 0, 0, dNdX[0][2], 0, 0, dNdX[0][3], 0, 0, dNdX[0][4], 0, 0, dNdX[0][5], 0, 0, dNdX[0][6], 0, 0, dNdX[0][7], 0, 0, dNdX[0][8], 0, 0, dNdX[0][9], 0, 0},
						   {0, dNdX[1][0], 0, 0, dNdX[1][1], 0, 0, dNdX[1][2], 0, 0, dNdX[1][3], 0, 0, dNdX[1][4], 0, 0, dNdX[1][5], 0, 0, dNdX[1][6], 0, 0, dNdX[1][7], 0, 0, dNdX[1][8], 0, 0, dNdX[1][9], 0},
						   {0, 0, dNdX[2][0], 0, 0, dNdX[2][1], 0, 0, dNdX[2][2], 0, 0, dNdX[2][3], 0, 0, dNdX[2][4], 0, 0, dNdX[2][5], 0, 0, dNdX[2][6], 0, 0, dNdX[2][7], 0, 0, dNdX[2][8], 0, 0, dNdX[2][9]},
						   {dNdX[1][0], dNdX[0][0], 0, dNdX[1][1], dNdX[0][1], 0, dNdX[1][2], dNdX[0][2], 0, dNdX[1][3], dNdX[0][3], 0, dNdX[1][4], dNdX[0][4], 0, dNdX[1][5], dNdX[0][5], 0, dNdX[1][6], dNdX[0][6], 0, dNdX[1][7], dNdX[0][7], 0, dNdX[1][8], dNdX[0][8], 0, dNdX[1][9], dNdX[0][9], 0},
						   {0, dNdX[2][0], dNdX[1][0], 0, dNdX[2][1], dNdX[1][1], 0, dNdX[2][2], dNdX[1][2], 0, dNdX[2][3], dNdX[1][3], 0, dNdX[2][4], dNdX[1][4], 0, dNdX[2][5], dNdX[1][5], 0, dNdX[2][6], dNdX[1][6], 0, dNdX[2][7], dNdX[1][7], 0, dNdX[2][8], dNdX[1][8], 0, dNdX[2][9], dNdX[1][9]},
						   {dNdX[2][0], 0, dNdX[0][0], dNdX[2][1], 0, dNdX[0][1], dNdX[2][2], 0, dNdX[0][2], dNdX[2][3], 0, dNdX[0][3], dNdX[2][4], 0, dNdX[0][4], dNdX[2][5], 0, dNdX[0][5], dNdX[2][6], 0, dNdX[0][6], dNdX[2][7], 0, dNdX[0][7], dNdX[2][8], 0, dNdX[0][8], dNdX[2][9], 0, dNdX[0][9]} };

		*B = GenMatrix<float,6,30>(b);
		*Jdet = fabs(J.determinant());
		printf("det: %f\n",*Jdet);
}

float fact(int n)
{
	int r = 1;
	while(n) r *= (n--);
	return r;
}

#define FF(i,m) (fact((i)+(m))/(fact(i)*fact(m)))

float Gcoeff(int I[4], int J[4])
{
	if(I[0]==-1 || J[0] ==-1) return 0;
	return (FF(I[0],J[0]) * FF(I[1],J[1]) * FF(I[2],J[2]) * FF(I[3],J[3]))/2.0;
}

#ifdef _BERSTEIN_POLY_


void 
QuadTetElement::computeStiffness()
{

	static int indices[40][4] =    {{1,0,0,0},{-1},{-1},{-1},
									{-1},{0,1,0,0},{-1},{-1},
									{-1},{-1},{0,0,1,0},{-1},
									{-1},{-1},{-1},{0,0,0,1},
									{0,1,0,0},{1,0,0,0},{-1},{-1},
									{-1},{0,0,1,0},{0,1,0,0},{-1},
									{0,0,1,0},{-1},{1,0,0,0},{-1},
									{0,0,0,1},{-1},{-1},{1,0,0,0},
									{-1},{0,0,0,1},{-1},{0,1,0,0},
									{-1},{-1},{0,0,0,1},{0,0,1,0}};

	float G[40][40] = {0};

	for(int i=0;i<40;i++)
		for(int j=0;j<40;j++)
			G[i][j] = Gcoeff(indices[i],indices[j]);

	//for(int i=0;i<40;i++,putchar('\n'))
	//	for(int j=0;j<40;j++)
	//		printf("%.1f  ",G[i][j]);
	//system("pause");

	//bernstein beizer tetrahedrals
	float c1 = (E*(1-v))/((1.0-2.0*v)*(1.0+v)),
		c2 = (E*v)/((1.0-2.0*v)*(1.0+v)),
		c3 = (c1 - c2)/2.0;

	Matrix4d inv =	Matrix4d
		( 1.0, 1.0, 1.0, 1.0,
		nodes[0]->pos.x, nodes[1]->pos.x, nodes[2]->pos.x, nodes[3]->pos.x,
		nodes[0]->pos.y, nodes[1]->pos.y, nodes[2]->pos.y, nodes[3]->pos.y,
		nodes[0]->pos.z, nodes[1]->pos.z, nodes[2]->pos.z, nodes[3]->pos.z).inverse();

	//for(int i=0;i<4;i++,putchar('\n'))
	//	for(int j=0;j<4;j++)
	//		printf("%f ",inv(i,j));
	//system("pause");
	float b[4][3];

	GenMatrix<float,4,3> dldx;
	for(int i=0;i<4;i++)
		for(int j=0;j<3;j++)
			dldx(i,j) = inv(i,j+1);

	for(int i=0;i<4;i++)
		for(int j=0;j<3;j++)
			b[i][j] = inv(i,j+1);

	for(int i=0;i<4;i++)
		for(int j=0;j<3;j++)
			B[i][j] = inv(i,j+1);

	con1 = c1 * (2.0/5.0) * volume;
	con2 = c2 * (2.0/5.0) * volume;
	/*
	#define D(a,b,c,d) (f(c,a) * f(d,b) * c2 + f(c,b) * f(d,a) * c3)
	#define DD(c,d) ((f(c,0) * f(d,0) + f(c,1) * f(d,1) + f(c,2) * f(d,2)) * c3)
	GenMatrix<float,4,3> f = dldx;
	
	float Ktemp[30][30] =
{
{ (( D(0,0,0,0)+ DD(0,0) ) * 1.0 ),      (( D(0,1,0,0) ) * 1.0 ),      (( D(0,2,0,0) ) * 1.0 ),      (( D(0,0,0,1)+ DD(0,1) ) * 0.5 ),      (( D(0,1,0,1) ) * 0.5 ),      (( D(0,2,0,1) ) * 0.5 ),      (( D(0,0,0,2)+ DD(0,2) ) * 0.5 ),      (( D(0,1,0,2) ) * 0.5 ),      (( D(0,2,0,2) ) * 0.5 ),      (( D(0,0,0,3)+ DD(0,3) ) * 0.5 ),      (( D(0,1,0,3) ) * 0.5 ),      (( D(0,2,0,3) ) * 0.5 ),      (( D(0,0,0,0)+ DD(0,0) ) * 0.5 + ( D(0,0,0,1)+ DD(0,1) ) * 1.0 ),      (( D(0,1,0,0) ) * 0.5 + ( D(0,1,0,1) ) * 1.0 ),      (( D(0,2,0,0) ) * 0.5 + ( D(0,2,0,1) ) * 1.0 ),      (( D(0,0,0,1)+ DD(0,1) ) * 0.5 + ( D(0,0,0,2)+ DD(0,2) ) * 0.5 ),      (( D(0,1,0,1) ) * 0.5 + ( D(0,1,0,2) ) * 0.5 ),      (( D(0,2,0,1) ) * 0.5 + ( D(0,2,0,2) ) * 0.5 ),      (( D(0,0,0,0)+ DD(0,0) ) * 0.5 + ( D(0,0,0,2)+ DD(0,2) ) * 1.0 ),      (( D(0,1,0,0) ) * 0.5 + ( D(0,1,0,2) ) * 1.0 ),      (( D(0,2,0,0) ) * 0.5 + ( D(0,2,0,2) ) * 1.0 ),      (( D(0,0,0,0)+ DD(0,0) ) * 0.5 + ( D(0,0,0,3)+ DD(0,3) ) * 1.0 ),      (( D(0,1,0,0) ) * 0.5 + ( D(0,1,0,3) ) * 1.0 ),      (( D(0,2,0,0) ) * 0.5 + ( D(0,2,0,3) ) * 1.0 ),      (( D(0,0,0,1)+ DD(0,1) ) * 0.5 + ( D(0,0,0,3)+ DD(0,3) ) * 0.5 ),      (( D(0,1,0,1) ) * 0.5 + ( D(0,1,0,3) ) * 0.5 ),      (( D(0,2,0,1) ) * 0.5 + ( D(0,2,0,3) ) * 0.5 ),      (( D(0,0,0,2)+ DD(0,2) ) * 0.5 + ( D(0,0,0,3)+ DD(0,3) ) * 0.5 ),      (( D(0,1,0,2) ) * 0.5 + ( D(0,1,0,3) ) * 0.5 ),      (( D(0,2,0,2) ) * 0.5 + ( D(0,2,0,3) ) * 0.5 )},
{ (( D(1,0,0,0) ) * 1.0 ),      (( D(1,1,0,0)+ DD(0,0) ) * 1.0 ),      (( D(1,2,0,0) ) * 1.0 ),      (( D(1,0,0,1) ) * 0.5 ),      (( D(1,1,0,1)+ DD(0,1) ) * 0.5 ),      (( D(1,2,0,1) ) * 0.5 ),      (( D(1,0,0,2) ) * 0.5 ),      (( D(1,1,0,2)+ DD(0,2) ) * 0.5 ),      (( D(1,2,0,2) ) * 0.5 ),      (( D(1,0,0,3) ) * 0.5 ),      (( D(1,1,0,3)+ DD(0,3) ) * 0.5 ),      (( D(1,2,0,3) ) * 0.5 ),      (( D(1,0,0,0) ) * 0.5 + ( D(1,0,0,1) ) * 1.0 ),      (( D(1,1,0,0)+ DD(0,0) ) * 0.5 + ( D(1,1,0,1)+ DD(0,1) ) * 1.0 ),      (( D(1,2,0,0) ) * 0.5 + ( D(1,2,0,1) ) * 1.0 ),      (( D(1,0,0,1) ) * 0.5 + ( D(1,0,0,2) ) * 0.5 ),      (( D(1,1,0,1)+ DD(0,1) ) * 0.5 + ( D(1,1,0,2)+ DD(0,2) ) * 0.5 ),      (( D(1,2,0,1) ) * 0.5 + ( D(1,2,0,2) ) * 0.5 ),      (( D(1,0,0,0) ) * 0.5 + ( D(1,0,0,2) ) * 1.0 ),      (( D(1,1,0,0)+ DD(0,0) ) * 0.5 + ( D(1,1,0,2)+ DD(0,2) ) * 1.0 ),      (( D(1,2,0,0) ) * 0.5 + ( D(1,2,0,2) ) * 1.0 ),      (( D(1,0,0,0) ) * 0.5 + ( D(1,0,0,3) ) * 1.0 ),      (( D(1,1,0,0)+ DD(0,0) ) * 0.5 + ( D(1,1,0,3)+ DD(0,3) ) * 1.0 ),      (( D(1,2,0,0) ) * 0.5 + ( D(1,2,0,3) ) * 1.0 ),      (( D(1,0,0,1) ) * 0.5 + ( D(1,0,0,3) ) * 0.5 ),      (( D(1,1,0,1)+ DD(0,1) ) * 0.5 + ( D(1,1,0,3)+ DD(0,3) ) * 0.5 ),      (( D(1,2,0,1) ) * 0.5 + ( D(1,2,0,3) ) * 0.5 ),      (( D(1,0,0,2) ) * 0.5 + ( D(1,0,0,3) ) * 0.5 ),      (( D(1,1,0,2)+ DD(0,2) ) * 0.5 + ( D(1,1,0,3)+ DD(0,3) ) * 0.5 ),      (( D(1,2,0,2) ) * 0.5 + ( D(1,2,0,3) ) * 0.5 )},
{ (( D(2,0,0,0) ) * 1.0 ),      (( D(2,1,0,0) ) * 1.0 ),      (( D(2,2,0,0)+ DD(0,0) ) * 1.0 ),      (( D(2,0,0,1) ) * 0.5 ),      (( D(2,1,0,1) ) * 0.5 ),      (( D(2,2,0,1)+ DD(0,1) ) * 0.5 ),      (( D(2,0,0,2) ) * 0.5 ),      (( D(2,1,0,2) ) * 0.5 ),      (( D(2,2,0,2)+ DD(0,2) ) * 0.5 ),      (( D(2,0,0,3) ) * 0.5 ),      (( D(2,1,0,3) ) * 0.5 ),      (( D(2,2,0,3)+ DD(0,3) ) * 0.5 ),      (( D(2,0,0,0) ) * 0.5 + ( D(2,0,0,1) ) * 1.0 ),      (( D(2,1,0,0) ) * 0.5 + ( D(2,1,0,1) ) * 1.0 ),      (( D(2,2,0,0)+ DD(0,0) ) * 0.5 + ( D(2,2,0,1)+ DD(0,1) ) * 1.0 ),      (( D(2,0,0,1) ) * 0.5 + ( D(2,0,0,2) ) * 0.5 ),      (( D(2,1,0,1) ) * 0.5 + ( D(2,1,0,2) ) * 0.5 ),      (( D(2,2,0,1)+ DD(0,1) ) * 0.5 + ( D(2,2,0,2)+ DD(0,2) ) * 0.5 ),      (( D(2,0,0,0) ) * 0.5 + ( D(2,0,0,2) ) * 1.0 ),      (( D(2,1,0,0) ) * 0.5 + ( D(2,1,0,2) ) * 1.0 ),      (( D(2,2,0,0)+ DD(0,0) ) * 0.5 + ( D(2,2,0,2)+ DD(0,2) ) * 1.0 ),      (( D(2,0,0,0) ) * 0.5 + ( D(2,0,0,3) ) * 1.0 ),      (( D(2,1,0,0) ) * 0.5 + ( D(2,1,0,3) ) * 1.0 ),      (( D(2,2,0,0)+ DD(0,0) ) * 0.5 + ( D(2,2,0,3)+ DD(0,3) ) * 1.0 ),      (( D(2,0,0,1) ) * 0.5 + ( D(2,0,0,3) ) * 0.5 ),      (( D(2,1,0,1) ) * 0.5 + ( D(2,1,0,3) ) * 0.5 ),      (( D(2,2,0,1)+ DD(0,1) ) * 0.5 + ( D(2,2,0,3)+ DD(0,3) ) * 0.5 ),      (( D(2,0,0,2) ) * 0.5 + ( D(2,0,0,3) ) * 0.5 ),      (( D(2,1,0,2) ) * 0.5 + ( D(2,1,0,3) ) * 0.5 ),      (( D(2,2,0,2)+ DD(0,2) ) * 0.5 + ( D(2,2,0,3)+ DD(0,3) ) * 0.5 )},
{ (( D(0,0,1,0)+ DD(1,0) ) * 0.5 ),      (( D(0,1,1,0) ) * 0.5 ),      (( D(0,2,1,0) ) * 0.5 ),      (( D(0,0,1,1)+ DD(1,1) ) * 1.0 ),      (( D(0,1,1,1) ) * 1.0 ),      (( D(0,2,1,1) ) * 1.0 ),      (( D(0,0,1,2)+ DD(1,2) ) * 0.5 ),      (( D(0,1,1,2) ) * 0.5 ),      (( D(0,2,1,2) ) * 0.5 ),      (( D(0,0,1,3)+ DD(1,3) ) * 0.5 ),      (( D(0,1,1,3) ) * 0.5 ),      (( D(0,2,1,3) ) * 0.5 ),      (( D(0,0,1,0)+ DD(1,0) ) * 1.0 + ( D(0,0,1,1)+ DD(1,1) ) * 0.5 ),      (( D(0,1,1,0) ) * 1.0 + ( D(0,1,1,1) ) * 0.5 ),      (( D(0,2,1,0) ) * 1.0 + ( D(0,2,1,1) ) * 0.5 ),      (( D(0,0,1,1)+ DD(1,1) ) * 0.5 + ( D(0,0,1,2)+ DD(1,2) ) * 1.0 ),      (( D(0,1,1,1) ) * 0.5 + ( D(0,1,1,2) ) * 1.0 ),      (( D(0,2,1,1) ) * 0.5 + ( D(0,2,1,2) ) * 1.0 ),      (( D(0,0,1,0)+ DD(1,0) ) * 0.5 + ( D(0,0,1,2)+ DD(1,2) ) * 0.5 ),      (( D(0,1,1,0) ) * 0.5 + ( D(0,1,1,2) ) * 0.5 ),      (( D(0,2,1,0) ) * 0.5 + ( D(0,2,1,2) ) * 0.5 ),      (( D(0,0,1,0)+ DD(1,0) ) * 0.5 + ( D(0,0,1,3)+ DD(1,3) ) * 0.5 ),      (( D(0,1,1,0) ) * 0.5 + ( D(0,1,1,3) ) * 0.5 ),      (( D(0,2,1,0) ) * 0.5 + ( D(0,2,1,3) ) * 0.5 ),      (( D(0,0,1,1)+ DD(1,1) ) * 0.5 + ( D(0,0,1,3)+ DD(1,3) ) * 1.0 ),      (( D(0,1,1,1) ) * 0.5 + ( D(0,1,1,3) ) * 1.0 ),      (( D(0,2,1,1) ) * 0.5 + ( D(0,2,1,3) ) * 1.0 ),      (( D(0,0,1,2)+ DD(1,2) ) * 0.5 + ( D(0,0,1,3)+ DD(1,3) ) * 0.5 ),      (( D(0,1,1,2) ) * 0.5 + ( D(0,1,1,3) ) * 0.5 ),      (( D(0,2,1,2) ) * 0.5 + ( D(0,2,1,3) ) * 0.5 )},
{ (( D(1,0,1,0) ) * 0.5 ),      (( D(1,1,1,0)+ DD(1,0) ) * 0.5 ),      (( D(1,2,1,0) ) * 0.5 ),      (( D(1,0,1,1) ) * 1.0 ),      (( D(1,1,1,1)+ DD(1,1) ) * 1.0 ),      (( D(1,2,1,1) ) * 1.0 ),      (( D(1,0,1,2) ) * 0.5 ),      (( D(1,1,1,2)+ DD(1,2) ) * 0.5 ),      (( D(1,2,1,2) ) * 0.5 ),      (( D(1,0,1,3) ) * 0.5 ),      (( D(1,1,1,3)+ DD(1,3) ) * 0.5 ),      (( D(1,2,1,3) ) * 0.5 ),      (( D(1,0,1,0) ) * 1.0 + ( D(1,0,1,1) ) * 0.5 ),      (( D(1,1,1,0)+ DD(1,0) ) * 1.0 + ( D(1,1,1,1)+ DD(1,1) ) * 0.5 ),      (( D(1,2,1,0) ) * 1.0 + ( D(1,2,1,1) ) * 0.5 ),      (( D(1,0,1,1) ) * 0.5 + ( D(1,0,1,2) ) * 1.0 ),      (( D(1,1,1,1)+ DD(1,1) ) * 0.5 + ( D(1,1,1,2)+ DD(1,2) ) * 1.0 ),      (( D(1,2,1,1) ) * 0.5 + ( D(1,2,1,2) ) * 1.0 ),      (( D(1,0,1,0) ) * 0.5 + ( D(1,0,1,2) ) * 0.5 ),      (( D(1,1,1,0)+ DD(1,0) ) * 0.5 + ( D(1,1,1,2)+ DD(1,2) ) * 0.5 ),      (( D(1,2,1,0) ) * 0.5 + ( D(1,2,1,2) ) * 0.5 ),      (( D(1,0,1,0) ) * 0.5 + ( D(1,0,1,3) ) * 0.5 ),      (( D(1,1,1,0)+ DD(1,0) ) * 0.5 + ( D(1,1,1,3)+ DD(1,3) ) * 0.5 ),      (( D(1,2,1,0) ) * 0.5 + ( D(1,2,1,3) ) * 0.5 ),      (( D(1,0,1,1) ) * 0.5 + ( D(1,0,1,3) ) * 1.0 ),      (( D(1,1,1,1)+ DD(1,1) ) * 0.5 + ( D(1,1,1,3)+ DD(1,3) ) * 1.0 ),      (( D(1,2,1,1) ) * 0.5 + ( D(1,2,1,3) ) * 1.0 ),      (( D(1,0,1,2) ) * 0.5 + ( D(1,0,1,3) ) * 0.5 ),      (( D(1,1,1,2)+ DD(1,2) ) * 0.5 + ( D(1,1,1,3)+ DD(1,3) ) * 0.5 ),      (( D(1,2,1,2) ) * 0.5 + ( D(1,2,1,3) ) * 0.5 )},
{ (( D(2,0,1,0) ) * 0.5 ),      (( D(2,1,1,0) ) * 0.5 ),      (( D(2,2,1,0)+ DD(1,0) ) * 0.5 ),      (( D(2,0,1,1) ) * 1.0 ),      (( D(2,1,1,1) ) * 1.0 ),      (( D(2,2,1,1)+ DD(1,1) ) * 1.0 ),      (( D(2,0,1,2) ) * 0.5 ),      (( D(2,1,1,2) ) * 0.5 ),      (( D(2,2,1,2)+ DD(1,2) ) * 0.5 ),      (( D(2,0,1,3) ) * 0.5 ),      (( D(2,1,1,3) ) * 0.5 ),      (( D(2,2,1,3)+ DD(1,3) ) * 0.5 ),      (( D(2,0,1,0) ) * 1.0 + ( D(2,0,1,1) ) * 0.5 ),      (( D(2,1,1,0) ) * 1.0 + ( D(2,1,1,1) ) * 0.5 ),      (( D(2,2,1,0)+ DD(1,0) ) * 1.0 + ( D(2,2,1,1)+ DD(1,1) ) * 0.5 ),      (( D(2,0,1,1) ) * 0.5 + ( D(2,0,1,2) ) * 1.0 ),      (( D(2,1,1,1) ) * 0.5 + ( D(2,1,1,2) ) * 1.0 ),      (( D(2,2,1,1)+ DD(1,1) ) * 0.5 + ( D(2,2,1,2)+ DD(1,2) ) * 1.0 ),      (( D(2,0,1,0) ) * 0.5 + ( D(2,0,1,2) ) * 0.5 ),      (( D(2,1,1,0) ) * 0.5 + ( D(2,1,1,2) ) * 0.5 ),      (( D(2,2,1,0)+ DD(1,0) ) * 0.5 + ( D(2,2,1,2)+ DD(1,2) ) * 0.5 ),      (( D(2,0,1,0) ) * 0.5 + ( D(2,0,1,3) ) * 0.5 ),      (( D(2,1,1,0) ) * 0.5 + ( D(2,1,1,3) ) * 0.5 ),      (( D(2,2,1,0)+ DD(1,0) ) * 0.5 + ( D(2,2,1,3)+ DD(1,3) ) * 0.5 ),      (( D(2,0,1,1) ) * 0.5 + ( D(2,0,1,3) ) * 1.0 ),      (( D(2,1,1,1) ) * 0.5 + ( D(2,1,1,3) ) * 1.0 ),      (( D(2,2,1,1)+ DD(1,1) ) * 0.5 + ( D(2,2,1,3)+ DD(1,3) ) * 1.0 ),      (( D(2,0,1,2) ) * 0.5 + ( D(2,0,1,3) ) * 0.5 ),      (( D(2,1,1,2) ) * 0.5 + ( D(2,1,1,3) ) * 0.5 ),      (( D(2,2,1,2)+ DD(1,2) ) * 0.5 + ( D(2,2,1,3)+ DD(1,3) ) * 0.5 )},
{ (( D(0,0,2,0)+ DD(2,0) ) * 0.5 ),      (( D(0,1,2,0) ) * 0.5 ),      (( D(0,2,2,0) ) * 0.5 ),      (( D(0,0,2,1)+ DD(2,1) ) * 0.5 ),      (( D(0,1,2,1) ) * 0.5 ),      (( D(0,2,2,1) ) * 0.5 ),      (( D(0,0,2,2)+ DD(2,2) ) * 1.0 ),      (( D(0,1,2,2) ) * 1.0 ),      (( D(0,2,2,2) ) * 1.0 ),      (( D(0,0,2,3)+ DD(2,3) ) * 0.5 ),      (( D(0,1,2,3) ) * 0.5 ),      (( D(0,2,2,3) ) * 0.5 ),      (( D(0,0,2,0)+ DD(2,0) ) * 0.5 + ( D(0,0,2,1)+ DD(2,1) ) * 0.5 ),      (( D(0,1,2,0) ) * 0.5 + ( D(0,1,2,1) ) * 0.5 ),      (( D(0,2,2,0) ) * 0.5 + ( D(0,2,2,1) ) * 0.5 ),      (( D(0,0,2,1)+ DD(2,1) ) * 1.0 + ( D(0,0,2,2)+ DD(2,2) ) * 0.5 ),      (( D(0,1,2,1) ) * 1.0 + ( D(0,1,2,2) ) * 0.5 ),      (( D(0,2,2,1) ) * 1.0 + ( D(0,2,2,2) ) * 0.5 ),      (( D(0,0,2,0)+ DD(2,0) ) * 1.0 + ( D(0,0,2,2)+ DD(2,2) ) * 0.5 ),      (( D(0,1,2,0) ) * 1.0 + ( D(0,1,2,2) ) * 0.5 ),      (( D(0,2,2,0) ) * 1.0 + ( D(0,2,2,2) ) * 0.5 ),      (( D(0,0,2,0)+ DD(2,0) ) * 0.5 + ( D(0,0,2,3)+ DD(2,3) ) * 0.5 ),      (( D(0,1,2,0) ) * 0.5 + ( D(0,1,2,3) ) * 0.5 ),      (( D(0,2,2,0) ) * 0.5 + ( D(0,2,2,3) ) * 0.5 ),      (( D(0,0,2,1)+ DD(2,1) ) * 0.5 + ( D(0,0,2,3)+ DD(2,3) ) * 0.5 ),      (( D(0,1,2,1) ) * 0.5 + ( D(0,1,2,3) ) * 0.5 ),      (( D(0,2,2,1) ) * 0.5 + ( D(0,2,2,3) ) * 0.5 ),      (( D(0,0,2,2)+ DD(2,2) ) * 0.5 + ( D(0,0,2,3)+ DD(2,3) ) * 1.0 ),      (( D(0,1,2,2) ) * 0.5 + ( D(0,1,2,3) ) * 1.0 ),      (( D(0,2,2,2) ) * 0.5 + ( D(0,2,2,3) ) * 1.0 )},
{ (( D(1,0,2,0) ) * 0.5 ),      (( D(1,1,2,0)+ DD(2,0) ) * 0.5 ),      (( D(1,2,2,0) ) * 0.5 ),      (( D(1,0,2,1) ) * 0.5 ),      (( D(1,1,2,1)+ DD(2,1) ) * 0.5 ),      (( D(1,2,2,1) ) * 0.5 ),      (( D(1,0,2,2) ) * 1.0 ),      (( D(1,1,2,2)+ DD(2,2) ) * 1.0 ),      (( D(1,2,2,2) ) * 1.0 ),      (( D(1,0,2,3) ) * 0.5 ),      (( D(1,1,2,3)+ DD(2,3) ) * 0.5 ),      (( D(1,2,2,3) ) * 0.5 ),      (( D(1,0,2,0) ) * 0.5 + ( D(1,0,2,1) ) * 0.5 ),      (( D(1,1,2,0)+ DD(2,0) ) * 0.5 + ( D(1,1,2,1)+ DD(2,1) ) * 0.5 ),      (( D(1,2,2,0) ) * 0.5 + ( D(1,2,2,1) ) * 0.5 ),      (( D(1,0,2,1) ) * 1.0 + ( D(1,0,2,2) ) * 0.5 ),      (( D(1,1,2,1)+ DD(2,1) ) * 1.0 + ( D(1,1,2,2)+ DD(2,2) ) * 0.5 ),      (( D(1,2,2,1) ) * 1.0 + ( D(1,2,2,2) ) * 0.5 ),      (( D(1,0,2,0) ) * 1.0 + ( D(1,0,2,2) ) * 0.5 ),      (( D(1,1,2,0)+ DD(2,0) ) * 1.0 + ( D(1,1,2,2)+ DD(2,2) ) * 0.5 ),      (( D(1,2,2,0) ) * 1.0 + ( D(1,2,2,2) ) * 0.5 ),      (( D(1,0,2,0) ) * 0.5 + ( D(1,0,2,3) ) * 0.5 ),      (( D(1,1,2,0)+ DD(2,0) ) * 0.5 + ( D(1,1,2,3)+ DD(2,3) ) * 0.5 ),      (( D(1,2,2,0) ) * 0.5 + ( D(1,2,2,3) ) * 0.5 ),      (( D(1,0,2,1) ) * 0.5 + ( D(1,0,2,3) ) * 0.5 ),      (( D(1,1,2,1)+ DD(2,1) ) * 0.5 + ( D(1,1,2,3)+ DD(2,3) ) * 0.5 ),      (( D(1,2,2,1) ) * 0.5 + ( D(1,2,2,3) ) * 0.5 ),      (( D(1,0,2,2) ) * 0.5 + ( D(1,0,2,3) ) * 1.0 ),      (( D(1,1,2,2)+ DD(2,2) ) * 0.5 + ( D(1,1,2,3)+ DD(2,3) ) * 1.0 ),      (( D(1,2,2,2) ) * 0.5 + ( D(1,2,2,3) ) * 1.0 )},
{ (( D(2,0,2,0) ) * 0.5 ),      (( D(2,1,2,0) ) * 0.5 ),      (( D(2,2,2,0)+ DD(2,0) ) * 0.5 ),      (( D(2,0,2,1) ) * 0.5 ),      (( D(2,1,2,1) ) * 0.5 ),      (( D(2,2,2,1)+ DD(2,1) ) * 0.5 ),      (( D(2,0,2,2) ) * 1.0 ),      (( D(2,1,2,2) ) * 1.0 ),      (( D(2,2,2,2)+ DD(2,2) ) * 1.0 ),      (( D(2,0,2,3) ) * 0.5 ),      (( D(2,1,2,3) ) * 0.5 ),      (( D(2,2,2,3)+ DD(2,3) ) * 0.5 ),      (( D(2,0,2,0) ) * 0.5 + ( D(2,0,2,1) ) * 0.5 ),      (( D(2,1,2,0) ) * 0.5 + ( D(2,1,2,1) ) * 0.5 ),      (( D(2,2,2,0)+ DD(2,0) ) * 0.5 + ( D(2,2,2,1)+ DD(2,1) ) * 0.5 ),      (( D(2,0,2,1) ) * 1.0 + ( D(2,0,2,2) ) * 0.5 ),      (( D(2,1,2,1) ) * 1.0 + ( D(2,1,2,2) ) * 0.5 ),      (( D(2,2,2,1)+ DD(2,1) ) * 1.0 + ( D(2,2,2,2)+ DD(2,2) ) * 0.5 ),      (( D(2,0,2,0) ) * 1.0 + ( D(2,0,2,2) ) * 0.5 ),      (( D(2,1,2,0) ) * 1.0 + ( D(2,1,2,2) ) * 0.5 ),      (( D(2,2,2,0)+ DD(2,0) ) * 1.0 + ( D(2,2,2,2)+ DD(2,2) ) * 0.5 ),      (( D(2,0,2,0) ) * 0.5 + ( D(2,0,2,3) ) * 0.5 ),      (( D(2,1,2,0) ) * 0.5 + ( D(2,1,2,3) ) * 0.5 ),      (( D(2,2,2,0)+ DD(2,0) ) * 0.5 + ( D(2,2,2,3)+ DD(2,3) ) * 0.5 ),      (( D(2,0,2,1) ) * 0.5 + ( D(2,0,2,3) ) * 0.5 ),      (( D(2,1,2,1) ) * 0.5 + ( D(2,1,2,3) ) * 0.5 ),      (( D(2,2,2,1)+ DD(2,1) ) * 0.5 + ( D(2,2,2,3)+ DD(2,3) ) * 0.5 ),      (( D(2,0,2,2) ) * 0.5 + ( D(2,0,2,3) ) * 1.0 ),      (( D(2,1,2,2) ) * 0.5 + ( D(2,1,2,3) ) * 1.0 ),      (( D(2,2,2,2)+ DD(2,2) ) * 0.5 + ( D(2,2,2,3)+ DD(2,3) ) * 1.0 )},
{ (( D(0,0,3,0)+ DD(3,0) ) * 0.5 ),      (( D(0,1,3,0) ) * 0.5 ),      (( D(0,2,3,0) ) * 0.5 ),      (( D(0,0,3,1)+ DD(3,1) ) * 0.5 ),      (( D(0,1,3,1) ) * 0.5 ),      (( D(0,2,3,1) ) * 0.5 ),      (( D(0,0,3,2)+ DD(3,2) ) * 0.5 ),      (( D(0,1,3,2) ) * 0.5 ),      (( D(0,2,3,2) ) * 0.5 ),      (( D(0,0,3,3)+ DD(3,3) ) * 1.0 ),      (( D(0,1,3,3) ) * 1.0 ),      (( D(0,2,3,3) ) * 1.0 ),      (( D(0,0,3,0)+ DD(3,0) ) * 0.5 + ( D(0,0,3,1)+ DD(3,1) ) * 0.5 ),      (( D(0,1,3,0) ) * 0.5 + ( D(0,1,3,1) ) * 0.5 ),      (( D(0,2,3,0) ) * 0.5 + ( D(0,2,3,1) ) * 0.5 ),      (( D(0,0,3,1)+ DD(3,1) ) * 0.5 + ( D(0,0,3,2)+ DD(3,2) ) * 0.5 ),      (( D(0,1,3,1) ) * 0.5 + ( D(0,1,3,2) ) * 0.5 ),      (( D(0,2,3,1) ) * 0.5 + ( D(0,2,3,2) ) * 0.5 ),      (( D(0,0,3,0)+ DD(3,0) ) * 0.5 + ( D(0,0,3,2)+ DD(3,2) ) * 0.5 ),      (( D(0,1,3,0) ) * 0.5 + ( D(0,1,3,2) ) * 0.5 ),      (( D(0,2,3,0) ) * 0.5 + ( D(0,2,3,2) ) * 0.5 ),      (( D(0,0,3,0)+ DD(3,0) ) * 1.0 + ( D(0,0,3,3)+ DD(3,3) ) * 0.5 ),      (( D(0,1,3,0) ) * 1.0 + ( D(0,1,3,3) ) * 0.5 ),      (( D(0,2,3,0) ) * 1.0 + ( D(0,2,3,3) ) * 0.5 ),      (( D(0,0,3,1)+ DD(3,1) ) * 1.0 + ( D(0,0,3,3)+ DD(3,3) ) * 0.5 ),      (( D(0,1,3,1) ) * 1.0 + ( D(0,1,3,3) ) * 0.5 ),      (( D(0,2,3,1) ) * 1.0 + ( D(0,2,3,3) ) * 0.5 ),      (( D(0,0,3,2)+ DD(3,2) ) * 1.0 + ( D(0,0,3,3)+ DD(3,3) ) * 0.5 ),      (( D(0,1,3,2) ) * 1.0 + ( D(0,1,3,3) ) * 0.5 ),      (( D(0,2,3,2) ) * 1.0 + ( D(0,2,3,3) ) * 0.5 )},
{ (( D(1,0,3,0) ) * 0.5 ),      (( D(1,1,3,0)+ DD(3,0) ) * 0.5 ),      (( D(1,2,3,0) ) * 0.5 ),      (( D(1,0,3,1) ) * 0.5 ),      (( D(1,1,3,1)+ DD(3,1) ) * 0.5 ),      (( D(1,2,3,1) ) * 0.5 ),      (( D(1,0,3,2) ) * 0.5 ),      (( D(1,1,3,2)+ DD(3,2) ) * 0.5 ),      (( D(1,2,3,2) ) * 0.5 ),      (( D(1,0,3,3) ) * 1.0 ),      (( D(1,1,3,3)+ DD(3,3) ) * 1.0 ),      (( D(1,2,3,3) ) * 1.0 ),      (( D(1,0,3,0) ) * 0.5 + ( D(1,0,3,1) ) * 0.5 ),      (( D(1,1,3,0)+ DD(3,0) ) * 0.5 + ( D(1,1,3,1)+ DD(3,1) ) * 0.5 ),      (( D(1,2,3,0) ) * 0.5 + ( D(1,2,3,1) ) * 0.5 ),      (( D(1,0,3,1) ) * 0.5 + ( D(1,0,3,2) ) * 0.5 ),      (( D(1,1,3,1)+ DD(3,1) ) * 0.5 + ( D(1,1,3,2)+ DD(3,2) ) * 0.5 ),      (( D(1,2,3,1) ) * 0.5 + ( D(1,2,3,2) ) * 0.5 ),      (( D(1,0,3,0) ) * 0.5 + ( D(1,0,3,2) ) * 0.5 ),      (( D(1,1,3,0)+ DD(3,0) ) * 0.5 + ( D(1,1,3,2)+ DD(3,2) ) * 0.5 ),      (( D(1,2,3,0) ) * 0.5 + ( D(1,2,3,2) ) * 0.5 ),      (( D(1,0,3,0) ) * 1.0 + ( D(1,0,3,3) ) * 0.5 ),      (( D(1,1,3,0)+ DD(3,0) ) * 1.0 + ( D(1,1,3,3)+ DD(3,3) ) * 0.5 ),      (( D(1,2,3,0) ) * 1.0 + ( D(1,2,3,3) ) * 0.5 ),      (( D(1,0,3,1) ) * 1.0 + ( D(1,0,3,3) ) * 0.5 ),      (( D(1,1,3,1)+ DD(3,1) ) * 1.0 + ( D(1,1,3,3)+ DD(3,3) ) * 0.5 ),      (( D(1,2,3,1) ) * 1.0 + ( D(1,2,3,3) ) * 0.5 ),      (( D(1,0,3,2) ) * 1.0 + ( D(1,0,3,3) ) * 0.5 ),      (( D(1,1,3,2)+ DD(3,2) ) * 1.0 + ( D(1,1,3,3)+ DD(3,3) ) * 0.5 ),      (( D(1,2,3,2) ) * 1.0 + ( D(1,2,3,3) ) * 0.5 )},
{ (( D(2,0,3,0) ) * 0.5 ),      (( D(2,1,3,0) ) * 0.5 ),      (( D(2,2,3,0)+ DD(3,0) ) * 0.5 ),      (( D(2,0,3,1) ) * 0.5 ),      (( D(2,1,3,1) ) * 0.5 ),      (( D(2,2,3,1)+ DD(3,1) ) * 0.5 ),      (( D(2,0,3,2) ) * 0.5 ),      (( D(2,1,3,2) ) * 0.5 ),      (( D(2,2,3,2)+ DD(3,2) ) * 0.5 ),      (( D(2,0,3,3) ) * 1.0 ),      (( D(2,1,3,3) ) * 1.0 ),      (( D(2,2,3,3)+ DD(3,3) ) * 1.0 ),      (( D(2,0,3,0) ) * 0.5 + ( D(2,0,3,1) ) * 0.5 ),      (( D(2,1,3,0) ) * 0.5 + ( D(2,1,3,1) ) * 0.5 ),      (( D(2,2,3,0)+ DD(3,0) ) * 0.5 + ( D(2,2,3,1)+ DD(3,1) ) * 0.5 ),      (( D(2,0,3,1) ) * 0.5 + ( D(2,0,3,2) ) * 0.5 ),      (( D(2,1,3,1) ) * 0.5 + ( D(2,1,3,2) ) * 0.5 ),      (( D(2,2,3,1)+ DD(3,1) ) * 0.5 + ( D(2,2,3,2)+ DD(3,2) ) * 0.5 ),      (( D(2,0,3,0) ) * 0.5 + ( D(2,0,3,2) ) * 0.5 ),      (( D(2,1,3,0) ) * 0.5 + ( D(2,1,3,2) ) * 0.5 ),      (( D(2,2,3,0)+ DD(3,0) ) * 0.5 + ( D(2,2,3,2)+ DD(3,2) ) * 0.5 ),      (( D(2,0,3,0) ) * 1.0 + ( D(2,0,3,3) ) * 0.5 ),      (( D(2,1,3,0) ) * 1.0 + ( D(2,1,3,3) ) * 0.5 ),      (( D(2,2,3,0)+ DD(3,0) ) * 1.0 + ( D(2,2,3,3)+ DD(3,3) ) * 0.5 ),      (( D(2,0,3,1) ) * 1.0 + ( D(2,0,3,3) ) * 0.5 ),      (( D(2,1,3,1) ) * 1.0 + ( D(2,1,3,3) ) * 0.5 ),      (( D(2,2,3,1)+ DD(3,1) ) * 1.0 + ( D(2,2,3,3)+ DD(3,3) ) * 0.5 ),      (( D(2,0,3,2) ) * 1.0 + ( D(2,0,3,3) ) * 0.5 ),      (( D(2,1,3,2) ) * 1.0 + ( D(2,1,3,3) ) * 0.5 ),      (( D(2,2,3,2)+ DD(3,2) ) * 1.0 + ( D(2,2,3,3)+ DD(3,3) ) * 0.5 )},
{ (( D(0,0,0,0)+ DD(0,0) ) * 0.5 + ( D(0,0,1,0)+ DD(1,0) ) * 1.0 ),      (( D(0,1,0,0) ) * 0.5 + ( D(0,1,1,0) ) * 1.0 ),      (( D(0,2,0,0) ) * 0.5 + ( D(0,2,1,0) ) * 1.0 ),      (( D(0,0,0,1)+ DD(0,1) ) * 1.0 + ( D(0,0,1,1)+ DD(1,1) ) * 0.5 ),      (( D(0,1,0,1) ) * 1.0 + ( D(0,1,1,1) ) * 0.5 ),      (( D(0,2,0,1) ) * 1.0 + ( D(0,2,1,1) ) * 0.5 ),      (( D(0,0,0,2)+ DD(0,2) ) * 0.5 + ( D(0,0,1,2)+ DD(1,2) ) * 0.5 ),      (( D(0,1,0,2) ) * 0.5 + ( D(0,1,1,2) ) * 0.5 ),      (( D(0,2,0,2) ) * 0.5 + ( D(0,2,1,2) ) * 0.5 ),      (( D(0,0,0,3)+ DD(0,3) ) * 0.5 + ( D(0,0,1,3)+ DD(1,3) ) * 0.5 ),      (( D(0,1,0,3) ) * 0.5 + ( D(0,1,1,3) ) * 0.5 ),      (( D(0,2,0,3) ) * 0.5 + ( D(0,2,1,3) ) * 0.5 ),      (( D(0,0,0,0)+ DD(0,0) ) * 1.0 + ( D(0,0,0,1)+ DD(0,1) ) * 0.5 + ( D(0,0,1,0)+ DD(1,0) ) * 0.5 + ( D(0,0,1,1)+ DD(1,1) ) * 1.0 ),      (( D(0,1,0,0) ) * 1.0 + ( D(0,1,0,1) ) * 0.5 + ( D(0,1,1,0) ) * 0.5 + ( D(0,1,1,1) ) * 1.0 ),      (( D(0,2,0,0) ) * 1.0 + ( D(0,2,0,1) ) * 0.5 + ( D(0,2,1,0) ) * 0.5 + ( D(0,2,1,1) ) * 1.0 ),      (( D(0,0,0,1)+ DD(0,1) ) * 0.5 + ( D(0,0,0,2)+ DD(0,2) ) * 1.0 + ( D(0,0,1,1)+ DD(1,1) ) * 0.5 + ( D(0,0,1,2)+ DD(1,2) ) * 0.5 ),      (( D(0,1,0,1) ) * 0.5 + ( D(0,1,0,2) ) * 1.0 + ( D(0,1,1,1) ) * 0.5 + ( D(0,1,1,2) ) * 0.5 ),      (( D(0,2,0,1) ) * 0.5 + ( D(0,2,0,2) ) * 1.0 + ( D(0,2,1,1) ) * 0.5 + ( D(0,2,1,2) ) * 0.5 ),      (( D(0,0,0,0)+ DD(0,0) ) * 0.5 + ( D(0,0,0,2)+ DD(0,2) ) * 0.5 + ( D(0,0,1,0)+ DD(1,0) ) * 0.5 + ( D(0,0,1,2)+ DD(1,2) ) * 1.0 ),      (( D(0,1,0,0) ) * 0.5 + ( D(0,1,0,2) ) * 0.5 + ( D(0,1,1,0) ) * 0.5 + ( D(0,1,1,2) ) * 1.0 ),      (( D(0,2,0,0) ) * 0.5 + ( D(0,2,0,2) ) * 0.5 + ( D(0,2,1,0) ) * 0.5 + ( D(0,2,1,2) ) * 1.0 ),      (( D(0,0,0,0)+ DD(0,0) ) * 0.5 + ( D(0,0,0,3)+ DD(0,3) ) * 0.5 + ( D(0,0,1,0)+ DD(1,0) ) * 0.5 + ( D(0,0,1,3)+ DD(1,3) ) * 1.0 ),      (( D(0,1,0,0) ) * 0.5 + ( D(0,1,0,3) ) * 0.5 + ( D(0,1,1,0) ) * 0.5 + ( D(0,1,1,3) ) * 1.0 ),      (( D(0,2,0,0) ) * 0.5 + ( D(0,2,0,3) ) * 0.5 + ( D(0,2,1,0) ) * 0.5 + ( D(0,2,1,3) ) * 1.0 ),      (( D(0,0,0,1)+ DD(0,1) ) * 0.5 + ( D(0,0,0,3)+ DD(0,3) ) * 1.0 + ( D(0,0,1,1)+ DD(1,1) ) * 0.5 + ( D(0,0,1,3)+ DD(1,3) ) * 0.5 ),      (( D(0,1,0,1) ) * 0.5 + ( D(0,1,0,3) ) * 1.0 + ( D(0,1,1,1) ) * 0.5 + ( D(0,1,1,3) ) * 0.5 ),      (( D(0,2,0,1) ) * 0.5 + ( D(0,2,0,3) ) * 1.0 + ( D(0,2,1,1) ) * 0.5 + ( D(0,2,1,3) ) * 0.5 ),      (( D(0,0,0,2)+ DD(0,2) ) * 0.5 + ( D(0,0,0,3)+ DD(0,3) ) * 0.5 + ( D(0,0,1,2)+ DD(1,2) ) * 0.5 + ( D(0,0,1,3)+ DD(1,3) ) * 0.5 ),      (( D(0,1,0,2) ) * 0.5 + ( D(0,1,0,3) ) * 0.5 + ( D(0,1,1,2) ) * 0.5 + ( D(0,1,1,3) ) * 0.5 ),      (( D(0,2,0,2) ) * 0.5 + ( D(0,2,0,3) ) * 0.5 + ( D(0,2,1,2) ) * 0.5 + ( D(0,2,1,3) ) * 0.5 )},
{ (( D(1,0,0,0) ) * 0.5 + ( D(1,0,1,0) ) * 1.0 ),      (( D(1,1,0,0)+ DD(0,0) ) * 0.5 + ( D(1,1,1,0)+ DD(1,0) ) * 1.0 ),      (( D(1,2,0,0) ) * 0.5 + ( D(1,2,1,0) ) * 1.0 ),      (( D(1,0,0,1) ) * 1.0 + ( D(1,0,1,1) ) * 0.5 ),      (( D(1,1,0,1)+ DD(0,1) ) * 1.0 + ( D(1,1,1,1)+ DD(1,1) ) * 0.5 ),      (( D(1,2,0,1) ) * 1.0 + ( D(1,2,1,1) ) * 0.5 ),      (( D(1,0,0,2) ) * 0.5 + ( D(1,0,1,2) ) * 0.5 ),      (( D(1,1,0,2)+ DD(0,2) ) * 0.5 + ( D(1,1,1,2)+ DD(1,2) ) * 0.5 ),      (( D(1,2,0,2) ) * 0.5 + ( D(1,2,1,2) ) * 0.5 ),      (( D(1,0,0,3) ) * 0.5 + ( D(1,0,1,3) ) * 0.5 ),      (( D(1,1,0,3)+ DD(0,3) ) * 0.5 + ( D(1,1,1,3)+ DD(1,3) ) * 0.5 ),      (( D(1,2,0,3) ) * 0.5 + ( D(1,2,1,3) ) * 0.5 ),      (( D(1,0,0,0) ) * 1.0 + ( D(1,0,0,1) ) * 0.5 + ( D(1,0,1,0) ) * 0.5 + ( D(1,0,1,1) ) * 1.0 ),      (( D(1,1,0,0)+ DD(0,0) ) * 1.0 + ( D(1,1,0,1)+ DD(0,1) ) * 0.5 + ( D(1,1,1,0)+ DD(1,0) ) * 0.5 + ( D(1,1,1,1)+ DD(1,1) ) * 1.0 ),      (( D(1,2,0,0) ) * 1.0 + ( D(1,2,0,1) ) * 0.5 + ( D(1,2,1,0) ) * 0.5 + ( D(1,2,1,1) ) * 1.0 ),      (( D(1,0,0,1) ) * 0.5 + ( D(1,0,0,2) ) * 1.0 + ( D(1,0,1,1) ) * 0.5 + ( D(1,0,1,2) ) * 0.5 ),      (( D(1,1,0,1)+ DD(0,1) ) * 0.5 + ( D(1,1,0,2)+ DD(0,2) ) * 1.0 + ( D(1,1,1,1)+ DD(1,1) ) * 0.5 + ( D(1,1,1,2)+ DD(1,2) ) * 0.5 ),      (( D(1,2,0,1) ) * 0.5 + ( D(1,2,0,2) ) * 1.0 + ( D(1,2,1,1) ) * 0.5 + ( D(1,2,1,2) ) * 0.5 ),      (( D(1,0,0,0) ) * 0.5 + ( D(1,0,0,2) ) * 0.5 + ( D(1,0,1,0) ) * 0.5 + ( D(1,0,1,2) ) * 1.0 ),      (( D(1,1,0,0)+ DD(0,0) ) * 0.5 + ( D(1,1,0,2)+ DD(0,2) ) * 0.5 + ( D(1,1,1,0)+ DD(1,0) ) * 0.5 + ( D(1,1,1,2)+ DD(1,2) ) * 1.0 ),      (( D(1,2,0,0) ) * 0.5 + ( D(1,2,0,2) ) * 0.5 + ( D(1,2,1,0) ) * 0.5 + ( D(1,2,1,2) ) * 1.0 ),      (( D(1,0,0,0) ) * 0.5 + ( D(1,0,0,3) ) * 0.5 + ( D(1,0,1,0) ) * 0.5 + ( D(1,0,1,3) ) * 1.0 ),      (( D(1,1,0,0)+ DD(0,0) ) * 0.5 + ( D(1,1,0,3)+ DD(0,3) ) * 0.5 + ( D(1,1,1,0)+ DD(1,0) ) * 0.5 + ( D(1,1,1,3)+ DD(1,3) ) * 1.0 ),      (( D(1,2,0,0) ) * 0.5 + ( D(1,2,0,3) ) * 0.5 + ( D(1,2,1,0) ) * 0.5 + ( D(1,2,1,3) ) * 1.0 ),      (( D(1,0,0,1) ) * 0.5 + ( D(1,0,0,3) ) * 1.0 + ( D(1,0,1,1) ) * 0.5 + ( D(1,0,1,3) ) * 0.5 ),      (( D(1,1,0,1)+ DD(0,1) ) * 0.5 + ( D(1,1,0,3)+ DD(0,3) ) * 1.0 + ( D(1,1,1,1)+ DD(1,1) ) * 0.5 + ( D(1,1,1,3)+ DD(1,3) ) * 0.5 ),      (( D(1,2,0,1) ) * 0.5 + ( D(1,2,0,3) ) * 1.0 + ( D(1,2,1,1) ) * 0.5 + ( D(1,2,1,3) ) * 0.5 ),      (( D(1,0,0,2) ) * 0.5 + ( D(1,0,0,3) ) * 0.5 + ( D(1,0,1,2) ) * 0.5 + ( D(1,0,1,3) ) * 0.5 ),      (( D(1,1,0,2)+ DD(0,2) ) * 0.5 + ( D(1,1,0,3)+ DD(0,3) ) * 0.5 + ( D(1,1,1,2)+ DD(1,2) ) * 0.5 + ( D(1,1,1,3)+ DD(1,3) ) * 0.5 ),      (( D(1,2,0,2) ) * 0.5 + ( D(1,2,0,3) ) * 0.5 + ( D(1,2,1,2) ) * 0.5 + ( D(1,2,1,3) ) * 0.5 )},
{ (( D(2,0,0,0) ) * 0.5 + ( D(2,0,1,0) ) * 1.0 ),      (( D(2,1,0,0) ) * 0.5 + ( D(2,1,1,0) ) * 1.0 ),      (( D(2,2,0,0)+ DD(0,0) ) * 0.5 + ( D(2,2,1,0)+ DD(1,0) ) * 1.0 ),      (( D(2,0,0,1) ) * 1.0 + ( D(2,0,1,1) ) * 0.5 ),      (( D(2,1,0,1) ) * 1.0 + ( D(2,1,1,1) ) * 0.5 ),      (( D(2,2,0,1)+ DD(0,1) ) * 1.0 + ( D(2,2,1,1)+ DD(1,1) ) * 0.5 ),      (( D(2,0,0,2) ) * 0.5 + ( D(2,0,1,2) ) * 0.5 ),      (( D(2,1,0,2) ) * 0.5 + ( D(2,1,1,2) ) * 0.5 ),      (( D(2,2,0,2)+ DD(0,2) ) * 0.5 + ( D(2,2,1,2)+ DD(1,2) ) * 0.5 ),      (( D(2,0,0,3) ) * 0.5 + ( D(2,0,1,3) ) * 0.5 ),      (( D(2,1,0,3) ) * 0.5 + ( D(2,1,1,3) ) * 0.5 ),      (( D(2,2,0,3)+ DD(0,3) ) * 0.5 + ( D(2,2,1,3)+ DD(1,3) ) * 0.5 ),      (( D(2,0,0,0) ) * 1.0 + ( D(2,0,0,1) ) * 0.5 + ( D(2,0,1,0) ) * 0.5 + ( D(2,0,1,1) ) * 1.0 ),      (( D(2,1,0,0) ) * 1.0 + ( D(2,1,0,1) ) * 0.5 + ( D(2,1,1,0) ) * 0.5 + ( D(2,1,1,1) ) * 1.0 ),      (( D(2,2,0,0)+ DD(0,0) ) * 1.0 + ( D(2,2,0,1)+ DD(0,1) ) * 0.5 + ( D(2,2,1,0)+ DD(1,0) ) * 0.5 + ( D(2,2,1,1)+ DD(1,1) ) * 1.0 ),      (( D(2,0,0,1) ) * 0.5 + ( D(2,0,0,2) ) * 1.0 + ( D(2,0,1,1) ) * 0.5 + ( D(2,0,1,2) ) * 0.5 ),      (( D(2,1,0,1) ) * 0.5 + ( D(2,1,0,2) ) * 1.0 + ( D(2,1,1,1) ) * 0.5 + ( D(2,1,1,2) ) * 0.5 ),      (( D(2,2,0,1)+ DD(0,1) ) * 0.5 + ( D(2,2,0,2)+ DD(0,2) ) * 1.0 + ( D(2,2,1,1)+ DD(1,1) ) * 0.5 + ( D(2,2,1,2)+ DD(1,2) ) * 0.5 ),      (( D(2,0,0,0) ) * 0.5 + ( D(2,0,0,2) ) * 0.5 + ( D(2,0,1,0) ) * 0.5 + ( D(2,0,1,2) ) * 1.0 ),      (( D(2,1,0,0) ) * 0.5 + ( D(2,1,0,2) ) * 0.5 + ( D(2,1,1,0) ) * 0.5 + ( D(2,1,1,2) ) * 1.0 ),      (( D(2,2,0,0)+ DD(0,0) ) * 0.5 + ( D(2,2,0,2)+ DD(0,2) ) * 0.5 + ( D(2,2,1,0)+ DD(1,0) ) * 0.5 + ( D(2,2,1,2)+ DD(1,2) ) * 1.0 ),      (( D(2,0,0,0) ) * 0.5 + ( D(2,0,0,3) ) * 0.5 + ( D(2,0,1,0) ) * 0.5 + ( D(2,0,1,3) ) * 1.0 ),      (( D(2,1,0,0) ) * 0.5 + ( D(2,1,0,3) ) * 0.5 + ( D(2,1,1,0) ) * 0.5 + ( D(2,1,1,3) ) * 1.0 ),      (( D(2,2,0,0)+ DD(0,0) ) * 0.5 + ( D(2,2,0,3)+ DD(0,3) ) * 0.5 + ( D(2,2,1,0)+ DD(1,0) ) * 0.5 + ( D(2,2,1,3)+ DD(1,3) ) * 1.0 ),      (( D(2,0,0,1) ) * 0.5 + ( D(2,0,0,3) ) * 1.0 + ( D(2,0,1,1) ) * 0.5 + ( D(2,0,1,3) ) * 0.5 ),      (( D(2,1,0,1) ) * 0.5 + ( D(2,1,0,3) ) * 1.0 + ( D(2,1,1,1) ) * 0.5 + ( D(2,1,1,3) ) * 0.5 ),      (( D(2,2,0,1)+ DD(0,1) ) * 0.5 + ( D(2,2,0,3)+ DD(0,3) ) * 1.0 + ( D(2,2,1,1)+ DD(1,1) ) * 0.5 + ( D(2,2,1,3)+ DD(1,3) ) * 0.5 ),      (( D(2,0,0,2) ) * 0.5 + ( D(2,0,0,3) ) * 0.5 + ( D(2,0,1,2) ) * 0.5 + ( D(2,0,1,3) ) * 0.5 ),      (( D(2,1,0,2) ) * 0.5 + ( D(2,1,0,3) ) * 0.5 + ( D(2,1,1,2) ) * 0.5 + ( D(2,1,1,3) ) * 0.5 ),      (( D(2,2,0,2)+ DD(0,2) ) * 0.5 + ( D(2,2,0,3)+ DD(0,3) ) * 0.5 + ( D(2,2,1,2)+ DD(1,2) ) * 0.5 + ( D(2,2,1,3)+ DD(1,3) ) * 0.5 )},
{ (( D(0,0,1,0)+ DD(1,0) ) * 0.5 + ( D(0,0,2,0)+ DD(2,0) ) * 0.5 ),      (( D(0,1,1,0) ) * 0.5 + ( D(0,1,2,0) ) * 0.5 ),      (( D(0,2,1,0) ) * 0.5 + ( D(0,2,2,0) ) * 0.5 ),      (( D(0,0,1,1)+ DD(1,1) ) * 0.5 + ( D(0,0,2,1)+ DD(2,1) ) * 1.0 ),      (( D(0,1,1,1) ) * 0.5 + ( D(0,1,2,1) ) * 1.0 ),      (( D(0,2,1,1) ) * 0.5 + ( D(0,2,2,1) ) * 1.0 ),      (( D(0,0,1,2)+ DD(1,2) ) * 1.0 + ( D(0,0,2,2)+ DD(2,2) ) * 0.5 ),      (( D(0,1,1,2) ) * 1.0 + ( D(0,1,2,2) ) * 0.5 ),      (( D(0,2,1,2) ) * 1.0 + ( D(0,2,2,2) ) * 0.5 ),      (( D(0,0,1,3)+ DD(1,3) ) * 0.5 + ( D(0,0,2,3)+ DD(2,3) ) * 0.5 ),      (( D(0,1,1,3) ) * 0.5 + ( D(0,1,2,3) ) * 0.5 ),      (( D(0,2,1,3) ) * 0.5 + ( D(0,2,2,3) ) * 0.5 ),      (( D(0,0,1,0)+ DD(1,0) ) * 0.5 + ( D(0,0,1,1)+ DD(1,1) ) * 0.5 + ( D(0,0,2,0)+ DD(2,0) ) * 1.0 + ( D(0,0,2,1)+ DD(2,1) ) * 0.5 ),      (( D(0,1,1,0) ) * 0.5 + ( D(0,1,1,1) ) * 0.5 + ( D(0,1,2,0) ) * 1.0 + ( D(0,1,2,1) ) * 0.5 ),      (( D(0,2,1,0) ) * 0.5 + ( D(0,2,1,1) ) * 0.5 + ( D(0,2,2,0) ) * 1.0 + ( D(0,2,2,1) ) * 0.5 ),      (( D(0,0,1,1)+ DD(1,1) ) * 1.0 + ( D(0,0,1,2)+ DD(1,2) ) * 0.5 + ( D(0,0,2,1)+ DD(2,1) ) * 0.5 + ( D(0,0,2,2)+ DD(2,2) ) * 1.0 ),      (( D(0,1,1,1) ) * 1.0 + ( D(0,1,1,2) ) * 0.5 + ( D(0,1,2,1) ) * 0.5 + ( D(0,1,2,2) ) * 1.0 ),      (( D(0,2,1,1) ) * 1.0 + ( D(0,2,1,2) ) * 0.5 + ( D(0,2,2,1) ) * 0.5 + ( D(0,2,2,2) ) * 1.0 ),      (( D(0,0,1,0)+ DD(1,0) ) * 1.0 + ( D(0,0,1,2)+ DD(1,2) ) * 0.5 + ( D(0,0,2,0)+ DD(2,0) ) * 0.5 + ( D(0,0,2,2)+ DD(2,2) ) * 0.5 ),      (( D(0,1,1,0) ) * 1.0 + ( D(0,1,1,2) ) * 0.5 + ( D(0,1,2,0) ) * 0.5 + ( D(0,1,2,2) ) * 0.5 ),      (( D(0,2,1,0) ) * 1.0 + ( D(0,2,1,2) ) * 0.5 + ( D(0,2,2,0) ) * 0.5 + ( D(0,2,2,2) ) * 0.5 ),      (( D(0,0,1,0)+ DD(1,0) ) * 0.5 + ( D(0,0,1,3)+ DD(1,3) ) * 0.5 + ( D(0,0,2,0)+ DD(2,0) ) * 0.5 + ( D(0,0,2,3)+ DD(2,3) ) * 0.5 ),      (( D(0,1,1,0) ) * 0.5 + ( D(0,1,1,3) ) * 0.5 + ( D(0,1,2,0) ) * 0.5 + ( D(0,1,2,3) ) * 0.5 ),      (( D(0,2,1,0) ) * 0.5 + ( D(0,2,1,3) ) * 0.5 + ( D(0,2,2,0) ) * 0.5 + ( D(0,2,2,3) ) * 0.5 ),      (( D(0,0,1,1)+ DD(1,1) ) * 0.5 + ( D(0,0,1,3)+ DD(1,3) ) * 0.5 + ( D(0,0,2,1)+ DD(2,1) ) * 0.5 + ( D(0,0,2,3)+ DD(2,3) ) * 1.0 ),      (( D(0,1,1,1) ) * 0.5 + ( D(0,1,1,3) ) * 0.5 + ( D(0,1,2,1) ) * 0.5 + ( D(0,1,2,3) ) * 1.0 ),      (( D(0,2,1,1) ) * 0.5 + ( D(0,2,1,3) ) * 0.5 + ( D(0,2,2,1) ) * 0.5 + ( D(0,2,2,3) ) * 1.0 ),      (( D(0,0,1,2)+ DD(1,2) ) * 0.5 + ( D(0,0,1,3)+ DD(1,3) ) * 1.0 + ( D(0,0,2,2)+ DD(2,2) ) * 0.5 + ( D(0,0,2,3)+ DD(2,3) ) * 0.5 ),      (( D(0,1,1,2) ) * 0.5 + ( D(0,1,1,3) ) * 1.0 + ( D(0,1,2,2) ) * 0.5 + ( D(0,1,2,3) ) * 0.5 ),      (( D(0,2,1,2) ) * 0.5 + ( D(0,2,1,3) ) * 1.0 + ( D(0,2,2,2) ) * 0.5 + ( D(0,2,2,3) ) * 0.5 )},
{ (( D(1,0,1,0) ) * 0.5 + ( D(1,0,2,0) ) * 0.5 ),      (( D(1,1,1,0)+ DD(1,0) ) * 0.5 + ( D(1,1,2,0)+ DD(2,0) ) * 0.5 ),      (( D(1,2,1,0) ) * 0.5 + ( D(1,2,2,0) ) * 0.5 ),      (( D(1,0,1,1) ) * 0.5 + ( D(1,0,2,1) ) * 1.0 ),      (( D(1,1,1,1)+ DD(1,1) ) * 0.5 + ( D(1,1,2,1)+ DD(2,1) ) * 1.0 ),      (( D(1,2,1,1) ) * 0.5 + ( D(1,2,2,1) ) * 1.0 ),      (( D(1,0,1,2) ) * 1.0 + ( D(1,0,2,2) ) * 0.5 ),      (( D(1,1,1,2)+ DD(1,2) ) * 1.0 + ( D(1,1,2,2)+ DD(2,2) ) * 0.5 ),      (( D(1,2,1,2) ) * 1.0 + ( D(1,2,2,2) ) * 0.5 ),      (( D(1,0,1,3) ) * 0.5 + ( D(1,0,2,3) ) * 0.5 ),      (( D(1,1,1,3)+ DD(1,3) ) * 0.5 + ( D(1,1,2,3)+ DD(2,3) ) * 0.5 ),      (( D(1,2,1,3) ) * 0.5 + ( D(1,2,2,3) ) * 0.5 ),      (( D(1,0,1,0) ) * 0.5 + ( D(1,0,1,1) ) * 0.5 + ( D(1,0,2,0) ) * 1.0 + ( D(1,0,2,1) ) * 0.5 ),      (( D(1,1,1,0)+ DD(1,0) ) * 0.5 + ( D(1,1,1,1)+ DD(1,1) ) * 0.5 + ( D(1,1,2,0)+ DD(2,0) ) * 1.0 + ( D(1,1,2,1)+ DD(2,1) ) * 0.5 ),      (( D(1,2,1,0) ) * 0.5 + ( D(1,2,1,1) ) * 0.5 + ( D(1,2,2,0) ) * 1.0 + ( D(1,2,2,1) ) * 0.5 ),      (( D(1,0,1,1) ) * 1.0 + ( D(1,0,1,2) ) * 0.5 + ( D(1,0,2,1) ) * 0.5 + ( D(1,0,2,2) ) * 1.0 ),      (( D(1,1,1,1)+ DD(1,1) ) * 1.0 + ( D(1,1,1,2)+ DD(1,2) ) * 0.5 + ( D(1,1,2,1)+ DD(2,1) ) * 0.5 + ( D(1,1,2,2)+ DD(2,2) ) * 1.0 ),      (( D(1,2,1,1) ) * 1.0 + ( D(1,2,1,2) ) * 0.5 + ( D(1,2,2,1) ) * 0.5 + ( D(1,2,2,2) ) * 1.0 ),      (( D(1,0,1,0) ) * 1.0 + ( D(1,0,1,2) ) * 0.5 + ( D(1,0,2,0) ) * 0.5 + ( D(1,0,2,2) ) * 0.5 ),      (( D(1,1,1,0)+ DD(1,0) ) * 1.0 + ( D(1,1,1,2)+ DD(1,2) ) * 0.5 + ( D(1,1,2,0)+ DD(2,0) ) * 0.5 + ( D(1,1,2,2)+ DD(2,2) ) * 0.5 ),      (( D(1,2,1,0) ) * 1.0 + ( D(1,2,1,2) ) * 0.5 + ( D(1,2,2,0) ) * 0.5 + ( D(1,2,2,2) ) * 0.5 ),      (( D(1,0,1,0) ) * 0.5 + ( D(1,0,1,3) ) * 0.5 + ( D(1,0,2,0) ) * 0.5 + ( D(1,0,2,3) ) * 0.5 ),      (( D(1,1,1,0)+ DD(1,0) ) * 0.5 + ( D(1,1,1,3)+ DD(1,3) ) * 0.5 + ( D(1,1,2,0)+ DD(2,0) ) * 0.5 + ( D(1,1,2,3)+ DD(2,3) ) * 0.5 ),      (( D(1,2,1,0) ) * 0.5 + ( D(1,2,1,3) ) * 0.5 + ( D(1,2,2,0) ) * 0.5 + ( D(1,2,2,3) ) * 0.5 ),      (( D(1,0,1,1) ) * 0.5 + ( D(1,0,1,3) ) * 0.5 + ( D(1,0,2,1) ) * 0.5 + ( D(1,0,2,3) ) * 1.0 ),      (( D(1,1,1,1)+ DD(1,1) ) * 0.5 + ( D(1,1,1,3)+ DD(1,3) ) * 0.5 + ( D(1,1,2,1)+ DD(2,1) ) * 0.5 + ( D(1,1,2,3)+ DD(2,3) ) * 1.0 ),      (( D(1,2,1,1) ) * 0.5 + ( D(1,2,1,3) ) * 0.5 + ( D(1,2,2,1) ) * 0.5 + ( D(1,2,2,3) ) * 1.0 ),      (( D(1,0,1,2) ) * 0.5 + ( D(1,0,1,3) ) * 1.0 + ( D(1,0,2,2) ) * 0.5 + ( D(1,0,2,3) ) * 0.5 ),      (( D(1,1,1,2)+ DD(1,2) ) * 0.5 + ( D(1,1,1,3)+ DD(1,3) ) * 1.0 + ( D(1,1,2,2)+ DD(2,2) ) * 0.5 + ( D(1,1,2,3)+ DD(2,3) ) * 0.5 ),      (( D(1,2,1,2) ) * 0.5 + ( D(1,2,1,3) ) * 1.0 + ( D(1,2,2,2) ) * 0.5 + ( D(1,2,2,3) ) * 0.5 )},
{ (( D(2,0,1,0) ) * 0.5 + ( D(2,0,2,0) ) * 0.5 ),      (( D(2,1,1,0) ) * 0.5 + ( D(2,1,2,0) ) * 0.5 ),      (( D(2,2,1,0)+ DD(1,0) ) * 0.5 + ( D(2,2,2,0)+ DD(2,0) ) * 0.5 ),      (( D(2,0,1,1) ) * 0.5 + ( D(2,0,2,1) ) * 1.0 ),      (( D(2,1,1,1) ) * 0.5 + ( D(2,1,2,1) ) * 1.0 ),      (( D(2,2,1,1)+ DD(1,1) ) * 0.5 + ( D(2,2,2,1)+ DD(2,1) ) * 1.0 ),      (( D(2,0,1,2) ) * 1.0 + ( D(2,0,2,2) ) * 0.5 ),      (( D(2,1,1,2) ) * 1.0 + ( D(2,1,2,2) ) * 0.5 ),      (( D(2,2,1,2)+ DD(1,2) ) * 1.0 + ( D(2,2,2,2)+ DD(2,2) ) * 0.5 ),      (( D(2,0,1,3) ) * 0.5 + ( D(2,0,2,3) ) * 0.5 ),      (( D(2,1,1,3) ) * 0.5 + ( D(2,1,2,3) ) * 0.5 ),      (( D(2,2,1,3)+ DD(1,3) ) * 0.5 + ( D(2,2,2,3)+ DD(2,3) ) * 0.5 ),      (( D(2,0,1,0) ) * 0.5 + ( D(2,0,1,1) ) * 0.5 + ( D(2,0,2,0) ) * 1.0 + ( D(2,0,2,1) ) * 0.5 ),      (( D(2,1,1,0) ) * 0.5 + ( D(2,1,1,1) ) * 0.5 + ( D(2,1,2,0) ) * 1.0 + ( D(2,1,2,1) ) * 0.5 ),      (( D(2,2,1,0)+ DD(1,0) ) * 0.5 + ( D(2,2,1,1)+ DD(1,1) ) * 0.5 + ( D(2,2,2,0)+ DD(2,0) ) * 1.0 + ( D(2,2,2,1)+ DD(2,1) ) * 0.5 ),      (( D(2,0,1,1) ) * 1.0 + ( D(2,0,1,2) ) * 0.5 + ( D(2,0,2,1) ) * 0.5 + ( D(2,0,2,2) ) * 1.0 ),      (( D(2,1,1,1) ) * 1.0 + ( D(2,1,1,2) ) * 0.5 + ( D(2,1,2,1) ) * 0.5 + ( D(2,1,2,2) ) * 1.0 ),      (( D(2,2,1,1)+ DD(1,1) ) * 1.0 + ( D(2,2,1,2)+ DD(1,2) ) * 0.5 + ( D(2,2,2,1)+ DD(2,1) ) * 0.5 + ( D(2,2,2,2)+ DD(2,2) ) * 1.0 ),      (( D(2,0,1,0) ) * 1.0 + ( D(2,0,1,2) ) * 0.5 + ( D(2,0,2,0) ) * 0.5 + ( D(2,0,2,2) ) * 0.5 ),      (( D(2,1,1,0) ) * 1.0 + ( D(2,1,1,2) ) * 0.5 + ( D(2,1,2,0) ) * 0.5 + ( D(2,1,2,2) ) * 0.5 ),      (( D(2,2,1,0)+ DD(1,0) ) * 1.0 + ( D(2,2,1,2)+ DD(1,2) ) * 0.5 + ( D(2,2,2,0)+ DD(2,0) ) * 0.5 + ( D(2,2,2,2)+ DD(2,2) ) * 0.5 ),      (( D(2,0,1,0) ) * 0.5 + ( D(2,0,1,3) ) * 0.5 + ( D(2,0,2,0) ) * 0.5 + ( D(2,0,2,3) ) * 0.5 ),      (( D(2,1,1,0) ) * 0.5 + ( D(2,1,1,3) ) * 0.5 + ( D(2,1,2,0) ) * 0.5 + ( D(2,1,2,3) ) * 0.5 ),      (( D(2,2,1,0)+ DD(1,0) ) * 0.5 + ( D(2,2,1,3)+ DD(1,3) ) * 0.5 + ( D(2,2,2,0)+ DD(2,0) ) * 0.5 + ( D(2,2,2,3)+ DD(2,3) ) * 0.5 ),      (( D(2,0,1,1) ) * 0.5 + ( D(2,0,1,3) ) * 0.5 + ( D(2,0,2,1) ) * 0.5 + ( D(2,0,2,3) ) * 1.0 ),      (( D(2,1,1,1) ) * 0.5 + ( D(2,1,1,3) ) * 0.5 + ( D(2,1,2,1) ) * 0.5 + ( D(2,1,2,3) ) * 1.0 ),      (( D(2,2,1,1)+ DD(1,1) ) * 0.5 + ( D(2,2,1,3)+ DD(1,3) ) * 0.5 + ( D(2,2,2,1)+ DD(2,1) ) * 0.5 + ( D(2,2,2,3)+ DD(2,3) ) * 1.0 ),      (( D(2,0,1,2) ) * 0.5 + ( D(2,0,1,3) ) * 1.0 + ( D(2,0,2,2) ) * 0.5 + ( D(2,0,2,3) ) * 0.5 ),      (( D(2,1,1,2) ) * 0.5 + ( D(2,1,1,3) ) * 1.0 + ( D(2,1,2,2) ) * 0.5 + ( D(2,1,2,3) ) * 0.5 ),      (( D(2,2,1,2)+ DD(1,2) ) * 0.5 + ( D(2,2,1,3)+ DD(1,3) ) * 1.0 + ( D(2,2,2,2)+ DD(2,2) ) * 0.5 + ( D(2,2,2,3)+ DD(2,3) ) * 0.5 )},
{ (( D(0,0,0,0)+ DD(0,0) ) * 0.5 + ( D(0,0,2,0)+ DD(2,0) ) * 1.0 ),      (( D(0,1,0,0) ) * 0.5 + ( D(0,1,2,0) ) * 1.0 ),      (( D(0,2,0,0) ) * 0.5 + ( D(0,2,2,0) ) * 1.0 ),      (( D(0,0,0,1)+ DD(0,1) ) * 0.5 + ( D(0,0,2,1)+ DD(2,1) ) * 0.5 ),      (( D(0,1,0,1) ) * 0.5 + ( D(0,1,2,1) ) * 0.5 ),      (( D(0,2,0,1) ) * 0.5 + ( D(0,2,2,1) ) * 0.5 ),      (( D(0,0,0,2)+ DD(0,2) ) * 1.0 + ( D(0,0,2,2)+ DD(2,2) ) * 0.5 ),      (( D(0,1,0,2) ) * 1.0 + ( D(0,1,2,2) ) * 0.5 ),      (( D(0,2,0,2) ) * 1.0 + ( D(0,2,2,2) ) * 0.5 ),      (( D(0,0,0,3)+ DD(0,3) ) * 0.5 + ( D(0,0,2,3)+ DD(2,3) ) * 0.5 ),      (( D(0,1,0,3) ) * 0.5 + ( D(0,1,2,3) ) * 0.5 ),      (( D(0,2,0,3) ) * 0.5 + ( D(0,2,2,3) ) * 0.5 ),      (( D(0,0,0,0)+ DD(0,0) ) * 0.5 + ( D(0,0,0,1)+ DD(0,1) ) * 0.5 + ( D(0,0,2,0)+ DD(2,0) ) * 0.5 + ( D(0,0,2,1)+ DD(2,1) ) * 1.0 ),      (( D(0,1,0,0) ) * 0.5 + ( D(0,1,0,1) ) * 0.5 + ( D(0,1,2,0) ) * 0.5 + ( D(0,1,2,1) ) * 1.0 ),      (( D(0,2,0,0) ) * 0.5 + ( D(0,2,0,1) ) * 0.5 + ( D(0,2,2,0) ) * 0.5 + ( D(0,2,2,1) ) * 1.0 ),      (( D(0,0,0,1)+ DD(0,1) ) * 1.0 + ( D(0,0,0,2)+ DD(0,2) ) * 0.5 + ( D(0,0,2,1)+ DD(2,1) ) * 0.5 + ( D(0,0,2,2)+ DD(2,2) ) * 0.5 ),      (( D(0,1,0,1) ) * 1.0 + ( D(0,1,0,2) ) * 0.5 + ( D(0,1,2,1) ) * 0.5 + ( D(0,1,2,2) ) * 0.5 ),      (( D(0,2,0,1) ) * 1.0 + ( D(0,2,0,2) ) * 0.5 + ( D(0,2,2,1) ) * 0.5 + ( D(0,2,2,2) ) * 0.5 ),      (( D(0,0,0,0)+ DD(0,0) ) * 1.0 + ( D(0,0,0,2)+ DD(0,2) ) * 0.5 + ( D(0,0,2,0)+ DD(2,0) ) * 0.5 + ( D(0,0,2,2)+ DD(2,2) ) * 1.0 ),      (( D(0,1,0,0) ) * 1.0 + ( D(0,1,0,2) ) * 0.5 + ( D(0,1,2,0) ) * 0.5 + ( D(0,1,2,2) ) * 1.0 ),      (( D(0,2,0,0) ) * 1.0 + ( D(0,2,0,2) ) * 0.5 + ( D(0,2,2,0) ) * 0.5 + ( D(0,2,2,2) ) * 1.0 ),      (( D(0,0,0,0)+ DD(0,0) ) * 0.5 + ( D(0,0,0,3)+ DD(0,3) ) * 0.5 + ( D(0,0,2,0)+ DD(2,0) ) * 0.5 + ( D(0,0,2,3)+ DD(2,3) ) * 1.0 ),      (( D(0,1,0,0) ) * 0.5 + ( D(0,1,0,3) ) * 0.5 + ( D(0,1,2,0) ) * 0.5 + ( D(0,1,2,3) ) * 1.0 ),      (( D(0,2,0,0) ) * 0.5 + ( D(0,2,0,3) ) * 0.5 + ( D(0,2,2,0) ) * 0.5 + ( D(0,2,2,3) ) * 1.0 ),      (( D(0,0,0,1)+ DD(0,1) ) * 0.5 + ( D(0,0,0,3)+ DD(0,3) ) * 0.5 + ( D(0,0,2,1)+ DD(2,1) ) * 0.5 + ( D(0,0,2,3)+ DD(2,3) ) * 0.5 ),      (( D(0,1,0,1) ) * 0.5 + ( D(0,1,0,3) ) * 0.5 + ( D(0,1,2,1) ) * 0.5 + ( D(0,1,2,3) ) * 0.5 ),      (( D(0,2,0,1) ) * 0.5 + ( D(0,2,0,3) ) * 0.5 + ( D(0,2,2,1) ) * 0.5 + ( D(0,2,2,3) ) * 0.5 ),      (( D(0,0,0,2)+ DD(0,2) ) * 0.5 + ( D(0,0,0,3)+ DD(0,3) ) * 1.0 + ( D(0,0,2,2)+ DD(2,2) ) * 0.5 + ( D(0,0,2,3)+ DD(2,3) ) * 0.5 ),      (( D(0,1,0,2) ) * 0.5 + ( D(0,1,0,3) ) * 1.0 + ( D(0,1,2,2) ) * 0.5 + ( D(0,1,2,3) ) * 0.5 ),      (( D(0,2,0,2) ) * 0.5 + ( D(0,2,0,3) ) * 1.0 + ( D(0,2,2,2) ) * 0.5 + ( D(0,2,2,3) ) * 0.5 )},
{ (( D(1,0,0,0) ) * 0.5 + ( D(1,0,2,0) ) * 1.0 ),      (( D(1,1,0,0)+ DD(0,0) ) * 0.5 + ( D(1,1,2,0)+ DD(2,0) ) * 1.0 ),      (( D(1,2,0,0) ) * 0.5 + ( D(1,2,2,0) ) * 1.0 ),      (( D(1,0,0,1) ) * 0.5 + ( D(1,0,2,1) ) * 0.5 ),      (( D(1,1,0,1)+ DD(0,1) ) * 0.5 + ( D(1,1,2,1)+ DD(2,1) ) * 0.5 ),      (( D(1,2,0,1) ) * 0.5 + ( D(1,2,2,1) ) * 0.5 ),      (( D(1,0,0,2) ) * 1.0 + ( D(1,0,2,2) ) * 0.5 ),      (( D(1,1,0,2)+ DD(0,2) ) * 1.0 + ( D(1,1,2,2)+ DD(2,2) ) * 0.5 ),      (( D(1,2,0,2) ) * 1.0 + ( D(1,2,2,2) ) * 0.5 ),      (( D(1,0,0,3) ) * 0.5 + ( D(1,0,2,3) ) * 0.5 ),      (( D(1,1,0,3)+ DD(0,3) ) * 0.5 + ( D(1,1,2,3)+ DD(2,3) ) * 0.5 ),      (( D(1,2,0,3) ) * 0.5 + ( D(1,2,2,3) ) * 0.5 ),      (( D(1,0,0,0) ) * 0.5 + ( D(1,0,0,1) ) * 0.5 + ( D(1,0,2,0) ) * 0.5 + ( D(1,0,2,1) ) * 1.0 ),      (( D(1,1,0,0)+ DD(0,0) ) * 0.5 + ( D(1,1,0,1)+ DD(0,1) ) * 0.5 + ( D(1,1,2,0)+ DD(2,0) ) * 0.5 + ( D(1,1,2,1)+ DD(2,1) ) * 1.0 ),      (( D(1,2,0,0) ) * 0.5 + ( D(1,2,0,1) ) * 0.5 + ( D(1,2,2,0) ) * 0.5 + ( D(1,2,2,1) ) * 1.0 ),      (( D(1,0,0,1) ) * 1.0 + ( D(1,0,0,2) ) * 0.5 + ( D(1,0,2,1) ) * 0.5 + ( D(1,0,2,2) ) * 0.5 ),      (( D(1,1,0,1)+ DD(0,1) ) * 1.0 + ( D(1,1,0,2)+ DD(0,2) ) * 0.5 + ( D(1,1,2,1)+ DD(2,1) ) * 0.5 + ( D(1,1,2,2)+ DD(2,2) ) * 0.5 ),      (( D(1,2,0,1) ) * 1.0 + ( D(1,2,0,2) ) * 0.5 + ( D(1,2,2,1) ) * 0.5 + ( D(1,2,2,2) ) * 0.5 ),      (( D(1,0,0,0) ) * 1.0 + ( D(1,0,0,2) ) * 0.5 + ( D(1,0,2,0) ) * 0.5 + ( D(1,0,2,2) ) * 1.0 ),      (( D(1,1,0,0)+ DD(0,0) ) * 1.0 + ( D(1,1,0,2)+ DD(0,2) ) * 0.5 + ( D(1,1,2,0)+ DD(2,0) ) * 0.5 + ( D(1,1,2,2)+ DD(2,2) ) * 1.0 ),      (( D(1,2,0,0) ) * 1.0 + ( D(1,2,0,2) ) * 0.5 + ( D(1,2,2,0) ) * 0.5 + ( D(1,2,2,2) ) * 1.0 ),      (( D(1,0,0,0) ) * 0.5 + ( D(1,0,0,3) ) * 0.5 + ( D(1,0,2,0) ) * 0.5 + ( D(1,0,2,3) ) * 1.0 ),      (( D(1,1,0,0)+ DD(0,0) ) * 0.5 + ( D(1,1,0,3)+ DD(0,3) ) * 0.5 + ( D(1,1,2,0)+ DD(2,0) ) * 0.5 + ( D(1,1,2,3)+ DD(2,3) ) * 1.0 ),      (( D(1,2,0,0) ) * 0.5 + ( D(1,2,0,3) ) * 0.5 + ( D(1,2,2,0) ) * 0.5 + ( D(1,2,2,3) ) * 1.0 ),      (( D(1,0,0,1) ) * 0.5 + ( D(1,0,0,3) ) * 0.5 + ( D(1,0,2,1) ) * 0.5 + ( D(1,0,2,3) ) * 0.5 ),      (( D(1,1,0,1)+ DD(0,1) ) * 0.5 + ( D(1,1,0,3)+ DD(0,3) ) * 0.5 + ( D(1,1,2,1)+ DD(2,1) ) * 0.5 + ( D(1,1,2,3)+ DD(2,3) ) * 0.5 ),      (( D(1,2,0,1) ) * 0.5 + ( D(1,2,0,3) ) * 0.5 + ( D(1,2,2,1) ) * 0.5 + ( D(1,2,2,3) ) * 0.5 ),      (( D(1,0,0,2) ) * 0.5 + ( D(1,0,0,3) ) * 1.0 + ( D(1,0,2,2) ) * 0.5 + ( D(1,0,2,3) ) * 0.5 ),      (( D(1,1,0,2)+ DD(0,2) ) * 0.5 + ( D(1,1,0,3)+ DD(0,3) ) * 1.0 + ( D(1,1,2,2)+ DD(2,2) ) * 0.5 + ( D(1,1,2,3)+ DD(2,3) ) * 0.5 ),      (( D(1,2,0,2) ) * 0.5 + ( D(1,2,0,3) ) * 1.0 + ( D(1,2,2,2) ) * 0.5 + ( D(1,2,2,3) ) * 0.5 )},
{ (( D(2,0,0,0) ) * 0.5 + ( D(2,0,2,0) ) * 1.0 ),      (( D(2,1,0,0) ) * 0.5 + ( D(2,1,2,0) ) * 1.0 ),      (( D(2,2,0,0)+ DD(0,0) ) * 0.5 + ( D(2,2,2,0)+ DD(2,0) ) * 1.0 ),      (( D(2,0,0,1) ) * 0.5 + ( D(2,0,2,1) ) * 0.5 ),      (( D(2,1,0,1) ) * 0.5 + ( D(2,1,2,1) ) * 0.5 ),      (( D(2,2,0,1)+ DD(0,1) ) * 0.5 + ( D(2,2,2,1)+ DD(2,1) ) * 0.5 ),      (( D(2,0,0,2) ) * 1.0 + ( D(2,0,2,2) ) * 0.5 ),      (( D(2,1,0,2) ) * 1.0 + ( D(2,1,2,2) ) * 0.5 ),      (( D(2,2,0,2)+ DD(0,2) ) * 1.0 + ( D(2,2,2,2)+ DD(2,2) ) * 0.5 ),      (( D(2,0,0,3) ) * 0.5 + ( D(2,0,2,3) ) * 0.5 ),      (( D(2,1,0,3) ) * 0.5 + ( D(2,1,2,3) ) * 0.5 ),      (( D(2,2,0,3)+ DD(0,3) ) * 0.5 + ( D(2,2,2,3)+ DD(2,3) ) * 0.5 ),      (( D(2,0,0,0) ) * 0.5 + ( D(2,0,0,1) ) * 0.5 + ( D(2,0,2,0) ) * 0.5 + ( D(2,0,2,1) ) * 1.0 ),      (( D(2,1,0,0) ) * 0.5 + ( D(2,1,0,1) ) * 0.5 + ( D(2,1,2,0) ) * 0.5 + ( D(2,1,2,1) ) * 1.0 ),      (( D(2,2,0,0)+ DD(0,0) ) * 0.5 + ( D(2,2,0,1)+ DD(0,1) ) * 0.5 + ( D(2,2,2,0)+ DD(2,0) ) * 0.5 + ( D(2,2,2,1)+ DD(2,1) ) * 1.0 ),      (( D(2,0,0,1) ) * 1.0 + ( D(2,0,0,2) ) * 0.5 + ( D(2,0,2,1) ) * 0.5 + ( D(2,0,2,2) ) * 0.5 ),      (( D(2,1,0,1) ) * 1.0 + ( D(2,1,0,2) ) * 0.5 + ( D(2,1,2,1) ) * 0.5 + ( D(2,1,2,2) ) * 0.5 ),      (( D(2,2,0,1)+ DD(0,1) ) * 1.0 + ( D(2,2,0,2)+ DD(0,2) ) * 0.5 + ( D(2,2,2,1)+ DD(2,1) ) * 0.5 + ( D(2,2,2,2)+ DD(2,2) ) * 0.5 ),      (( D(2,0,0,0) ) * 1.0 + ( D(2,0,0,2) ) * 0.5 + ( D(2,0,2,0) ) * 0.5 + ( D(2,0,2,2) ) * 1.0 ),      (( D(2,1,0,0) ) * 1.0 + ( D(2,1,0,2) ) * 0.5 + ( D(2,1,2,0) ) * 0.5 + ( D(2,1,2,2) ) * 1.0 ),      (( D(2,2,0,0)+ DD(0,0) ) * 1.0 + ( D(2,2,0,2)+ DD(0,2) ) * 0.5 + ( D(2,2,2,0)+ DD(2,0) ) * 0.5 + ( D(2,2,2,2)+ DD(2,2) ) * 1.0 ),      (( D(2,0,0,0) ) * 0.5 + ( D(2,0,0,3) ) * 0.5 + ( D(2,0,2,0) ) * 0.5 + ( D(2,0,2,3) ) * 1.0 ),      (( D(2,1,0,0) ) * 0.5 + ( D(2,1,0,3) ) * 0.5 + ( D(2,1,2,0) ) * 0.5 + ( D(2,1,2,3) ) * 1.0 ),      (( D(2,2,0,0)+ DD(0,0) ) * 0.5 + ( D(2,2,0,3)+ DD(0,3) ) * 0.5 + ( D(2,2,2,0)+ DD(2,0) ) * 0.5 + ( D(2,2,2,3)+ DD(2,3) ) * 1.0 ),      (( D(2,0,0,1) ) * 0.5 + ( D(2,0,0,3) ) * 0.5 + ( D(2,0,2,1) ) * 0.5 + ( D(2,0,2,3) ) * 0.5 ),      (( D(2,1,0,1) ) * 0.5 + ( D(2,1,0,3) ) * 0.5 + ( D(2,1,2,1) ) * 0.5 + ( D(2,1,2,3) ) * 0.5 ),      (( D(2,2,0,1)+ DD(0,1) ) * 0.5 + ( D(2,2,0,3)+ DD(0,3) ) * 0.5 + ( D(2,2,2,1)+ DD(2,1) ) * 0.5 + ( D(2,2,2,3)+ DD(2,3) ) * 0.5 ),      (( D(2,0,0,2) ) * 0.5 + ( D(2,0,0,3) ) * 1.0 + ( D(2,0,2,2) ) * 0.5 + ( D(2,0,2,3) ) * 0.5 ),      (( D(2,1,0,2) ) * 0.5 + ( D(2,1,0,3) ) * 1.0 + ( D(2,1,2,2) ) * 0.5 + ( D(2,1,2,3) ) * 0.5 ),      (( D(2,2,0,2)+ DD(0,2) ) * 0.5 + ( D(2,2,0,3)+ DD(0,3) ) * 1.0 + ( D(2,2,2,2)+ DD(2,2) ) * 0.5 + ( D(2,2,2,3)+ DD(2,3) ) * 0.5 )},
{ (( D(0,0,0,0)+ DD(0,0) ) * 0.5 + ( D(0,0,3,0)+ DD(3,0) ) * 1.0 ),      (( D(0,1,0,0) ) * 0.5 + ( D(0,1,3,0) ) * 1.0 ),      (( D(0,2,0,0) ) * 0.5 + ( D(0,2,3,0) ) * 1.0 ),      (( D(0,0,0,1)+ DD(0,1) ) * 0.5 + ( D(0,0,3,1)+ DD(3,1) ) * 0.5 ),      (( D(0,1,0,1) ) * 0.5 + ( D(0,1,3,1) ) * 0.5 ),      (( D(0,2,0,1) ) * 0.5 + ( D(0,2,3,1) ) * 0.5 ),      (( D(0,0,0,2)+ DD(0,2) ) * 0.5 + ( D(0,0,3,2)+ DD(3,2) ) * 0.5 ),      (( D(0,1,0,2) ) * 0.5 + ( D(0,1,3,2) ) * 0.5 ),      (( D(0,2,0,2) ) * 0.5 + ( D(0,2,3,2) ) * 0.5 ),      (( D(0,0,0,3)+ DD(0,3) ) * 1.0 + ( D(0,0,3,3)+ DD(3,3) ) * 0.5 ),      (( D(0,1,0,3) ) * 1.0 + ( D(0,1,3,3) ) * 0.5 ),      (( D(0,2,0,3) ) * 1.0 + ( D(0,2,3,3) ) * 0.5 ),      (( D(0,0,0,0)+ DD(0,0) ) * 0.5 + ( D(0,0,0,1)+ DD(0,1) ) * 0.5 + ( D(0,0,3,0)+ DD(3,0) ) * 0.5 + ( D(0,0,3,1)+ DD(3,1) ) * 1.0 ),      (( D(0,1,0,0) ) * 0.5 + ( D(0,1,0,1) ) * 0.5 + ( D(0,1,3,0) ) * 0.5 + ( D(0,1,3,1) ) * 1.0 ),      (( D(0,2,0,0) ) * 0.5 + ( D(0,2,0,1) ) * 0.5 + ( D(0,2,3,0) ) * 0.5 + ( D(0,2,3,1) ) * 1.0 ),      (( D(0,0,0,1)+ DD(0,1) ) * 0.5 + ( D(0,0,0,2)+ DD(0,2) ) * 0.5 + ( D(0,0,3,1)+ DD(3,1) ) * 0.5 + ( D(0,0,3,2)+ DD(3,2) ) * 0.5 ),      (( D(0,1,0,1) ) * 0.5 + ( D(0,1,0,2) ) * 0.5 + ( D(0,1,3,1) ) * 0.5 + ( D(0,1,3,2) ) * 0.5 ),      (( D(0,2,0,1) ) * 0.5 + ( D(0,2,0,2) ) * 0.5 + ( D(0,2,3,1) ) * 0.5 + ( D(0,2,3,2) ) * 0.5 ),      (( D(0,0,0,0)+ DD(0,0) ) * 0.5 + ( D(0,0,0,2)+ DD(0,2) ) * 0.5 + ( D(0,0,3,0)+ DD(3,0) ) * 0.5 + ( D(0,0,3,2)+ DD(3,2) ) * 1.0 ),      (( D(0,1,0,0) ) * 0.5 + ( D(0,1,0,2) ) * 0.5 + ( D(0,1,3,0) ) * 0.5 + ( D(0,1,3,2) ) * 1.0 ),      (( D(0,2,0,0) ) * 0.5 + ( D(0,2,0,2) ) * 0.5 + ( D(0,2,3,0) ) * 0.5 + ( D(0,2,3,2) ) * 1.0 ),      (( D(0,0,0,0)+ DD(0,0) ) * 1.0 + ( D(0,0,0,3)+ DD(0,3) ) * 0.5 + ( D(0,0,3,0)+ DD(3,0) ) * 0.5 + ( D(0,0,3,3)+ DD(3,3) ) * 1.0 ),      (( D(0,1,0,0) ) * 1.0 + ( D(0,1,0,3) ) * 0.5 + ( D(0,1,3,0) ) * 0.5 + ( D(0,1,3,3) ) * 1.0 ),      (( D(0,2,0,0) ) * 1.0 + ( D(0,2,0,3) ) * 0.5 + ( D(0,2,3,0) ) * 0.5 + ( D(0,2,3,3) ) * 1.0 ),      (( D(0,0,0,1)+ DD(0,1) ) * 1.0 + ( D(0,0,0,3)+ DD(0,3) ) * 0.5 + ( D(0,0,3,1)+ DD(3,1) ) * 0.5 + ( D(0,0,3,3)+ DD(3,3) ) * 0.5 ),      (( D(0,1,0,1) ) * 1.0 + ( D(0,1,0,3) ) * 0.5 + ( D(0,1,3,1) ) * 0.5 + ( D(0,1,3,3) ) * 0.5 ),      (( D(0,2,0,1) ) * 1.0 + ( D(0,2,0,3) ) * 0.5 + ( D(0,2,3,1) ) * 0.5 + ( D(0,2,3,3) ) * 0.5 ),      (( D(0,0,0,2)+ DD(0,2) ) * 1.0 + ( D(0,0,0,3)+ DD(0,3) ) * 0.5 + ( D(0,0,3,2)+ DD(3,2) ) * 0.5 + ( D(0,0,3,3)+ DD(3,3) ) * 0.5 ),      (( D(0,1,0,2) ) * 1.0 + ( D(0,1,0,3) ) * 0.5 + ( D(0,1,3,2) ) * 0.5 + ( D(0,1,3,3) ) * 0.5 ),      (( D(0,2,0,2) ) * 1.0 + ( D(0,2,0,3) ) * 0.5 + ( D(0,2,3,2) ) * 0.5 + ( D(0,2,3,3) ) * 0.5 )},
{ (( D(1,0,0,0) ) * 0.5 + ( D(1,0,3,0) ) * 1.0 ),      (( D(1,1,0,0)+ DD(0,0) ) * 0.5 + ( D(1,1,3,0)+ DD(3,0) ) * 1.0 ),      (( D(1,2,0,0) ) * 0.5 + ( D(1,2,3,0) ) * 1.0 ),      (( D(1,0,0,1) ) * 0.5 + ( D(1,0,3,1) ) * 0.5 ),      (( D(1,1,0,1)+ DD(0,1) ) * 0.5 + ( D(1,1,3,1)+ DD(3,1) ) * 0.5 ),      (( D(1,2,0,1) ) * 0.5 + ( D(1,2,3,1) ) * 0.5 ),      (( D(1,0,0,2) ) * 0.5 + ( D(1,0,3,2) ) * 0.5 ),      (( D(1,1,0,2)+ DD(0,2) ) * 0.5 + ( D(1,1,3,2)+ DD(3,2) ) * 0.5 ),      (( D(1,2,0,2) ) * 0.5 + ( D(1,2,3,2) ) * 0.5 ),      (( D(1,0,0,3) ) * 1.0 + ( D(1,0,3,3) ) * 0.5 ),      (( D(1,1,0,3)+ DD(0,3) ) * 1.0 + ( D(1,1,3,3)+ DD(3,3) ) * 0.5 ),      (( D(1,2,0,3) ) * 1.0 + ( D(1,2,3,3) ) * 0.5 ),      (( D(1,0,0,0) ) * 0.5 + ( D(1,0,0,1) ) * 0.5 + ( D(1,0,3,0) ) * 0.5 + ( D(1,0,3,1) ) * 1.0 ),      (( D(1,1,0,0)+ DD(0,0) ) * 0.5 + ( D(1,1,0,1)+ DD(0,1) ) * 0.5 + ( D(1,1,3,0)+ DD(3,0) ) * 0.5 + ( D(1,1,3,1)+ DD(3,1) ) * 1.0 ),      (( D(1,2,0,0) ) * 0.5 + ( D(1,2,0,1) ) * 0.5 + ( D(1,2,3,0) ) * 0.5 + ( D(1,2,3,1) ) * 1.0 ),      (( D(1,0,0,1) ) * 0.5 + ( D(1,0,0,2) ) * 0.5 + ( D(1,0,3,1) ) * 0.5 + ( D(1,0,3,2) ) * 0.5 ),      (( D(1,1,0,1)+ DD(0,1) ) * 0.5 + ( D(1,1,0,2)+ DD(0,2) ) * 0.5 + ( D(1,1,3,1)+ DD(3,1) ) * 0.5 + ( D(1,1,3,2)+ DD(3,2) ) * 0.5 ),      (( D(1,2,0,1) ) * 0.5 + ( D(1,2,0,2) ) * 0.5 + ( D(1,2,3,1) ) * 0.5 + ( D(1,2,3,2) ) * 0.5 ),      (( D(1,0,0,0) ) * 0.5 + ( D(1,0,0,2) ) * 0.5 + ( D(1,0,3,0) ) * 0.5 + ( D(1,0,3,2) ) * 1.0 ),      (( D(1,1,0,0)+ DD(0,0) ) * 0.5 + ( D(1,1,0,2)+ DD(0,2) ) * 0.5 + ( D(1,1,3,0)+ DD(3,0) ) * 0.5 + ( D(1,1,3,2)+ DD(3,2) ) * 1.0 ),      (( D(1,2,0,0) ) * 0.5 + ( D(1,2,0,2) ) * 0.5 + ( D(1,2,3,0) ) * 0.5 + ( D(1,2,3,2) ) * 1.0 ),      (( D(1,0,0,0) ) * 1.0 + ( D(1,0,0,3) ) * 0.5 + ( D(1,0,3,0) ) * 0.5 + ( D(1,0,3,3) ) * 1.0 ),      (( D(1,1,0,0)+ DD(0,0) ) * 1.0 + ( D(1,1,0,3)+ DD(0,3) ) * 0.5 + ( D(1,1,3,0)+ DD(3,0) ) * 0.5 + ( D(1,1,3,3)+ DD(3,3) ) * 1.0 ),      (( D(1,2,0,0) ) * 1.0 + ( D(1,2,0,3) ) * 0.5 + ( D(1,2,3,0) ) * 0.5 + ( D(1,2,3,3) ) * 1.0 ),      (( D(1,0,0,1) ) * 1.0 + ( D(1,0,0,3) ) * 0.5 + ( D(1,0,3,1) ) * 0.5 + ( D(1,0,3,3) ) * 0.5 ),      (( D(1,1,0,1)+ DD(0,1) ) * 1.0 + ( D(1,1,0,3)+ DD(0,3) ) * 0.5 + ( D(1,1,3,1)+ DD(3,1) ) * 0.5 + ( D(1,1,3,3)+ DD(3,3) ) * 0.5 ),      (( D(1,2,0,1) ) * 1.0 + ( D(1,2,0,3) ) * 0.5 + ( D(1,2,3,1) ) * 0.5 + ( D(1,2,3,3) ) * 0.5 ),      (( D(1,0,0,2) ) * 1.0 + ( D(1,0,0,3) ) * 0.5 + ( D(1,0,3,2) ) * 0.5 + ( D(1,0,3,3) ) * 0.5 ),      (( D(1,1,0,2)+ DD(0,2) ) * 1.0 + ( D(1,1,0,3)+ DD(0,3) ) * 0.5 + ( D(1,1,3,2)+ DD(3,2) ) * 0.5 + ( D(1,1,3,3)+ DD(3,3) ) * 0.5 ),      (( D(1,2,0,2) ) * 1.0 + ( D(1,2,0,3) ) * 0.5 + ( D(1,2,3,2) ) * 0.5 + ( D(1,2,3,3) ) * 0.5 )},
{ (( D(2,0,0,0) ) * 0.5 + ( D(2,0,3,0) ) * 1.0 ),      (( D(2,1,0,0) ) * 0.5 + ( D(2,1,3,0) ) * 1.0 ),      (( D(2,2,0,0)+ DD(0,0) ) * 0.5 + ( D(2,2,3,0)+ DD(3,0) ) * 1.0 ),      (( D(2,0,0,1) ) * 0.5 + ( D(2,0,3,1) ) * 0.5 ),      (( D(2,1,0,1) ) * 0.5 + ( D(2,1,3,1) ) * 0.5 ),      (( D(2,2,0,1)+ DD(0,1) ) * 0.5 + ( D(2,2,3,1)+ DD(3,1) ) * 0.5 ),      (( D(2,0,0,2) ) * 0.5 + ( D(2,0,3,2) ) * 0.5 ),      (( D(2,1,0,2) ) * 0.5 + ( D(2,1,3,2) ) * 0.5 ),      (( D(2,2,0,2)+ DD(0,2) ) * 0.5 + ( D(2,2,3,2)+ DD(3,2) ) * 0.5 ),      (( D(2,0,0,3) ) * 1.0 + ( D(2,0,3,3) ) * 0.5 ),      (( D(2,1,0,3) ) * 1.0 + ( D(2,1,3,3) ) * 0.5 ),      (( D(2,2,0,3)+ DD(0,3) ) * 1.0 + ( D(2,2,3,3)+ DD(3,3) ) * 0.5 ),      (( D(2,0,0,0) ) * 0.5 + ( D(2,0,0,1) ) * 0.5 + ( D(2,0,3,0) ) * 0.5 + ( D(2,0,3,1) ) * 1.0 ),      (( D(2,1,0,0) ) * 0.5 + ( D(2,1,0,1) ) * 0.5 + ( D(2,1,3,0) ) * 0.5 + ( D(2,1,3,1) ) * 1.0 ),      (( D(2,2,0,0)+ DD(0,0) ) * 0.5 + ( D(2,2,0,1)+ DD(0,1) ) * 0.5 + ( D(2,2,3,0)+ DD(3,0) ) * 0.5 + ( D(2,2,3,1)+ DD(3,1) ) * 1.0 ),      (( D(2,0,0,1) ) * 0.5 + ( D(2,0,0,2) ) * 0.5 + ( D(2,0,3,1) ) * 0.5 + ( D(2,0,3,2) ) * 0.5 ),      (( D(2,1,0,1) ) * 0.5 + ( D(2,1,0,2) ) * 0.5 + ( D(2,1,3,1) ) * 0.5 + ( D(2,1,3,2) ) * 0.5 ),      (( D(2,2,0,1)+ DD(0,1) ) * 0.5 + ( D(2,2,0,2)+ DD(0,2) ) * 0.5 + ( D(2,2,3,1)+ DD(3,1) ) * 0.5 + ( D(2,2,3,2)+ DD(3,2) ) * 0.5 ),      (( D(2,0,0,0) ) * 0.5 + ( D(2,0,0,2) ) * 0.5 + ( D(2,0,3,0) ) * 0.5 + ( D(2,0,3,2) ) * 1.0 ),      (( D(2,1,0,0) ) * 0.5 + ( D(2,1,0,2) ) * 0.5 + ( D(2,1,3,0) ) * 0.5 + ( D(2,1,3,2) ) * 1.0 ),      (( D(2,2,0,0)+ DD(0,0) ) * 0.5 + ( D(2,2,0,2)+ DD(0,2) ) * 0.5 + ( D(2,2,3,0)+ DD(3,0) ) * 0.5 + ( D(2,2,3,2)+ DD(3,2) ) * 1.0 ),      (( D(2,0,0,0) ) * 1.0 + ( D(2,0,0,3) ) * 0.5 + ( D(2,0,3,0) ) * 0.5 + ( D(2,0,3,3) ) * 1.0 ),      (( D(2,1,0,0) ) * 1.0 + ( D(2,1,0,3) ) * 0.5 + ( D(2,1,3,0) ) * 0.5 + ( D(2,1,3,3) ) * 1.0 ),      (( D(2,2,0,0)+ DD(0,0) ) * 1.0 + ( D(2,2,0,3)+ DD(0,3) ) * 0.5 + ( D(2,2,3,0)+ DD(3,0) ) * 0.5 + ( D(2,2,3,3)+ DD(3,3) ) * 1.0 ),      (( D(2,0,0,1) ) * 1.0 + ( D(2,0,0,3) ) * 0.5 + ( D(2,0,3,1) ) * 0.5 + ( D(2,0,3,3) ) * 0.5 ),      (( D(2,1,0,1) ) * 1.0 + ( D(2,1,0,3) ) * 0.5 + ( D(2,1,3,1) ) * 0.5 + ( D(2,1,3,3) ) * 0.5 ),      (( D(2,2,0,1)+ DD(0,1) ) * 1.0 + ( D(2,2,0,3)+ DD(0,3) ) * 0.5 + ( D(2,2,3,1)+ DD(3,1) ) * 0.5 + ( D(2,2,3,3)+ DD(3,3) ) * 0.5 ),      (( D(2,0,0,2) ) * 1.0 + ( D(2,0,0,3) ) * 0.5 + ( D(2,0,3,2) ) * 0.5 + ( D(2,0,3,3) ) * 0.5 ),      (( D(2,1,0,2) ) * 1.0 + ( D(2,1,0,3) ) * 0.5 + ( D(2,1,3,2) ) * 0.5 + ( D(2,1,3,3) ) * 0.5 ),      (( D(2,2,0,2)+ DD(0,2) ) * 1.0 + ( D(2,2,0,3)+ DD(0,3) ) * 0.5 + ( D(2,2,3,2)+ DD(3,2) ) * 0.5 + ( D(2,2,3,3)+ DD(3,3) ) * 0.5 )},
{ (( D(0,0,1,0)+ DD(1,0) ) * 0.5 + ( D(0,0,3,0)+ DD(3,0) ) * 0.5 ),      (( D(0,1,1,0) ) * 0.5 + ( D(0,1,3,0) ) * 0.5 ),      (( D(0,2,1,0) ) * 0.5 + ( D(0,2,3,0) ) * 0.5 ),      (( D(0,0,1,1)+ DD(1,1) ) * 0.5 + ( D(0,0,3,1)+ DD(3,1) ) * 1.0 ),      (( D(0,1,1,1) ) * 0.5 + ( D(0,1,3,1) ) * 1.0 ),      (( D(0,2,1,1) ) * 0.5 + ( D(0,2,3,1) ) * 1.0 ),      (( D(0,0,1,2)+ DD(1,2) ) * 0.5 + ( D(0,0,3,2)+ DD(3,2) ) * 0.5 ),      (( D(0,1,1,2) ) * 0.5 + ( D(0,1,3,2) ) * 0.5 ),      (( D(0,2,1,2) ) * 0.5 + ( D(0,2,3,2) ) * 0.5 ),      (( D(0,0,1,3)+ DD(1,3) ) * 1.0 + ( D(0,0,3,3)+ DD(3,3) ) * 0.5 ),      (( D(0,1,1,3) ) * 1.0 + ( D(0,1,3,3) ) * 0.5 ),      (( D(0,2,1,3) ) * 1.0 + ( D(0,2,3,3) ) * 0.5 ),      (( D(0,0,1,0)+ DD(1,0) ) * 0.5 + ( D(0,0,1,1)+ DD(1,1) ) * 0.5 + ( D(0,0,3,0)+ DD(3,0) ) * 1.0 + ( D(0,0,3,1)+ DD(3,1) ) * 0.5 ),      (( D(0,1,1,0) ) * 0.5 + ( D(0,1,1,1) ) * 0.5 + ( D(0,1,3,0) ) * 1.0 + ( D(0,1,3,1) ) * 0.5 ),      (( D(0,2,1,0) ) * 0.5 + ( D(0,2,1,1) ) * 0.5 + ( D(0,2,3,0) ) * 1.0 + ( D(0,2,3,1) ) * 0.5 ),      (( D(0,0,1,1)+ DD(1,1) ) * 0.5 + ( D(0,0,1,2)+ DD(1,2) ) * 0.5 + ( D(0,0,3,1)+ DD(3,1) ) * 0.5 + ( D(0,0,3,2)+ DD(3,2) ) * 1.0 ),      (( D(0,1,1,1) ) * 0.5 + ( D(0,1,1,2) ) * 0.5 + ( D(0,1,3,1) ) * 0.5 + ( D(0,1,3,2) ) * 1.0 ),      (( D(0,2,1,1) ) * 0.5 + ( D(0,2,1,2) ) * 0.5 + ( D(0,2,3,1) ) * 0.5 + ( D(0,2,3,2) ) * 1.0 ),      (( D(0,0,1,0)+ DD(1,0) ) * 0.5 + ( D(0,0,1,2)+ DD(1,2) ) * 0.5 + ( D(0,0,3,0)+ DD(3,0) ) * 0.5 + ( D(0,0,3,2)+ DD(3,2) ) * 0.5 ),      (( D(0,1,1,0) ) * 0.5 + ( D(0,1,1,2) ) * 0.5 + ( D(0,1,3,0) ) * 0.5 + ( D(0,1,3,2) ) * 0.5 ),      (( D(0,2,1,0) ) * 0.5 + ( D(0,2,1,2) ) * 0.5 + ( D(0,2,3,0) ) * 0.5 + ( D(0,2,3,2) ) * 0.5 ),      (( D(0,0,1,0)+ DD(1,0) ) * 1.0 + ( D(0,0,1,3)+ DD(1,3) ) * 0.5 + ( D(0,0,3,0)+ DD(3,0) ) * 0.5 + ( D(0,0,3,3)+ DD(3,3) ) * 0.5 ),      (( D(0,1,1,0) ) * 1.0 + ( D(0,1,1,3) ) * 0.5 + ( D(0,1,3,0) ) * 0.5 + ( D(0,1,3,3) ) * 0.5 ),      (( D(0,2,1,0) ) * 1.0 + ( D(0,2,1,3) ) * 0.5 + ( D(0,2,3,0) ) * 0.5 + ( D(0,2,3,3) ) * 0.5 ),      (( D(0,0,1,1)+ DD(1,1) ) * 1.0 + ( D(0,0,1,3)+ DD(1,3) ) * 0.5 + ( D(0,0,3,1)+ DD(3,1) ) * 0.5 + ( D(0,0,3,3)+ DD(3,3) ) * 1.0 ),      (( D(0,1,1,1) ) * 1.0 + ( D(0,1,1,3) ) * 0.5 + ( D(0,1,3,1) ) * 0.5 + ( D(0,1,3,3) ) * 1.0 ),      (( D(0,2,1,1) ) * 1.0 + ( D(0,2,1,3) ) * 0.5 + ( D(0,2,3,1) ) * 0.5 + ( D(0,2,3,3) ) * 1.0 ),      (( D(0,0,1,2)+ DD(1,2) ) * 1.0 + ( D(0,0,1,3)+ DD(1,3) ) * 0.5 + ( D(0,0,3,2)+ DD(3,2) ) * 0.5 + ( D(0,0,3,3)+ DD(3,3) ) * 0.5 ),      (( D(0,1,1,2) ) * 1.0 + ( D(0,1,1,3) ) * 0.5 + ( D(0,1,3,2) ) * 0.5 + ( D(0,1,3,3) ) * 0.5 ),      (( D(0,2,1,2) ) * 1.0 + ( D(0,2,1,3) ) * 0.5 + ( D(0,2,3,2) ) * 0.5 + ( D(0,2,3,3) ) * 0.5 )},
{ (( D(1,0,1,0) ) * 0.5 + ( D(1,0,3,0) ) * 0.5 ),      (( D(1,1,1,0)+ DD(1,0) ) * 0.5 + ( D(1,1,3,0)+ DD(3,0) ) * 0.5 ),      (( D(1,2,1,0) ) * 0.5 + ( D(1,2,3,0) ) * 0.5 ),      (( D(1,0,1,1) ) * 0.5 + ( D(1,0,3,1) ) * 1.0 ),      (( D(1,1,1,1)+ DD(1,1) ) * 0.5 + ( D(1,1,3,1)+ DD(3,1) ) * 1.0 ),      (( D(1,2,1,1) ) * 0.5 + ( D(1,2,3,1) ) * 1.0 ),      (( D(1,0,1,2) ) * 0.5 + ( D(1,0,3,2) ) * 0.5 ),      (( D(1,1,1,2)+ DD(1,2) ) * 0.5 + ( D(1,1,3,2)+ DD(3,2) ) * 0.5 ),      (( D(1,2,1,2) ) * 0.5 + ( D(1,2,3,2) ) * 0.5 ),      (( D(1,0,1,3) ) * 1.0 + ( D(1,0,3,3) ) * 0.5 ),      (( D(1,1,1,3)+ DD(1,3) ) * 1.0 + ( D(1,1,3,3)+ DD(3,3) ) * 0.5 ),      (( D(1,2,1,3) ) * 1.0 + ( D(1,2,3,3) ) * 0.5 ),      (( D(1,0,1,0) ) * 0.5 + ( D(1,0,1,1) ) * 0.5 + ( D(1,0,3,0) ) * 1.0 + ( D(1,0,3,1) ) * 0.5 ),      (( D(1,1,1,0)+ DD(1,0) ) * 0.5 + ( D(1,1,1,1)+ DD(1,1) ) * 0.5 + ( D(1,1,3,0)+ DD(3,0) ) * 1.0 + ( D(1,1,3,1)+ DD(3,1) ) * 0.5 ),      (( D(1,2,1,0) ) * 0.5 + ( D(1,2,1,1) ) * 0.5 + ( D(1,2,3,0) ) * 1.0 + ( D(1,2,3,1) ) * 0.5 ),      (( D(1,0,1,1) ) * 0.5 + ( D(1,0,1,2) ) * 0.5 + ( D(1,0,3,1) ) * 0.5 + ( D(1,0,3,2) ) * 1.0 ),      (( D(1,1,1,1)+ DD(1,1) ) * 0.5 + ( D(1,1,1,2)+ DD(1,2) ) * 0.5 + ( D(1,1,3,1)+ DD(3,1) ) * 0.5 + ( D(1,1,3,2)+ DD(3,2) ) * 1.0 ),      (( D(1,2,1,1) ) * 0.5 + ( D(1,2,1,2) ) * 0.5 + ( D(1,2,3,1) ) * 0.5 + ( D(1,2,3,2) ) * 1.0 ),      (( D(1,0,1,0) ) * 0.5 + ( D(1,0,1,2) ) * 0.5 + ( D(1,0,3,0) ) * 0.5 + ( D(1,0,3,2) ) * 0.5 ),      (( D(1,1,1,0)+ DD(1,0) ) * 0.5 + ( D(1,1,1,2)+ DD(1,2) ) * 0.5 + ( D(1,1,3,0)+ DD(3,0) ) * 0.5 + ( D(1,1,3,2)+ DD(3,2) ) * 0.5 ),      (( D(1,2,1,0) ) * 0.5 + ( D(1,2,1,2) ) * 0.5 + ( D(1,2,3,0) ) * 0.5 + ( D(1,2,3,2) ) * 0.5 ),      (( D(1,0,1,0) ) * 1.0 + ( D(1,0,1,3) ) * 0.5 + ( D(1,0,3,0) ) * 0.5 + ( D(1,0,3,3) ) * 0.5 ),      (( D(1,1,1,0)+ DD(1,0) ) * 1.0 + ( D(1,1,1,3)+ DD(1,3) ) * 0.5 + ( D(1,1,3,0)+ DD(3,0) ) * 0.5 + ( D(1,1,3,3)+ DD(3,3) ) * 0.5 ),      (( D(1,2,1,0) ) * 1.0 + ( D(1,2,1,3) ) * 0.5 + ( D(1,2,3,0) ) * 0.5 + ( D(1,2,3,3) ) * 0.5 ),      (( D(1,0,1,1) ) * 1.0 + ( D(1,0,1,3) ) * 0.5 + ( D(1,0,3,1) ) * 0.5 + ( D(1,0,3,3) ) * 1.0 ),      (( D(1,1,1,1)+ DD(1,1) ) * 1.0 + ( D(1,1,1,3)+ DD(1,3) ) * 0.5 + ( D(1,1,3,1)+ DD(3,1) ) * 0.5 + ( D(1,1,3,3)+ DD(3,3) ) * 1.0 ),      (( D(1,2,1,1) ) * 1.0 + ( D(1,2,1,3) ) * 0.5 + ( D(1,2,3,1) ) * 0.5 + ( D(1,2,3,3) ) * 1.0 ),      (( D(1,0,1,2) ) * 1.0 + ( D(1,0,1,3) ) * 0.5 + ( D(1,0,3,2) ) * 0.5 + ( D(1,0,3,3) ) * 0.5 ),      (( D(1,1,1,2)+ DD(1,2) ) * 1.0 + ( D(1,1,1,3)+ DD(1,3) ) * 0.5 + ( D(1,1,3,2)+ DD(3,2) ) * 0.5 + ( D(1,1,3,3)+ DD(3,3) ) * 0.5 ),      (( D(1,2,1,2) ) * 1.0 + ( D(1,2,1,3) ) * 0.5 + ( D(1,2,3,2) ) * 0.5 + ( D(1,2,3,3) ) * 0.5 )},
{ (( D(2,0,1,0) ) * 0.5 + ( D(2,0,3,0) ) * 0.5 ),      (( D(2,1,1,0) ) * 0.5 + ( D(2,1,3,0) ) * 0.5 ),      (( D(2,2,1,0)+ DD(1,0) ) * 0.5 + ( D(2,2,3,0)+ DD(3,0) ) * 0.5 ),      (( D(2,0,1,1) ) * 0.5 + ( D(2,0,3,1) ) * 1.0 ),      (( D(2,1,1,1) ) * 0.5 + ( D(2,1,3,1) ) * 1.0 ),      (( D(2,2,1,1)+ DD(1,1) ) * 0.5 + ( D(2,2,3,1)+ DD(3,1) ) * 1.0 ),      (( D(2,0,1,2) ) * 0.5 + ( D(2,0,3,2) ) * 0.5 ),      (( D(2,1,1,2) ) * 0.5 + ( D(2,1,3,2) ) * 0.5 ),      (( D(2,2,1,2)+ DD(1,2) ) * 0.5 + ( D(2,2,3,2)+ DD(3,2) ) * 0.5 ),      (( D(2,0,1,3) ) * 1.0 + ( D(2,0,3,3) ) * 0.5 ),      (( D(2,1,1,3) ) * 1.0 + ( D(2,1,3,3) ) * 0.5 ),      (( D(2,2,1,3)+ DD(1,3) ) * 1.0 + ( D(2,2,3,3)+ DD(3,3) ) * 0.5 ),      (( D(2,0,1,0) ) * 0.5 + ( D(2,0,1,1) ) * 0.5 + ( D(2,0,3,0) ) * 1.0 + ( D(2,0,3,1) ) * 0.5 ),      (( D(2,1,1,0) ) * 0.5 + ( D(2,1,1,1) ) * 0.5 + ( D(2,1,3,0) ) * 1.0 + ( D(2,1,3,1) ) * 0.5 ),      (( D(2,2,1,0)+ DD(1,0) ) * 0.5 + ( D(2,2,1,1)+ DD(1,1) ) * 0.5 + ( D(2,2,3,0)+ DD(3,0) ) * 1.0 + ( D(2,2,3,1)+ DD(3,1) ) * 0.5 ),      (( D(2,0,1,1) ) * 0.5 + ( D(2,0,1,2) ) * 0.5 + ( D(2,0,3,1) ) * 0.5 + ( D(2,0,3,2) ) * 1.0 ),      (( D(2,1,1,1) ) * 0.5 + ( D(2,1,1,2) ) * 0.5 + ( D(2,1,3,1) ) * 0.5 + ( D(2,1,3,2) ) * 1.0 ),      (( D(2,2,1,1)+ DD(1,1) ) * 0.5 + ( D(2,2,1,2)+ DD(1,2) ) * 0.5 + ( D(2,2,3,1)+ DD(3,1) ) * 0.5 + ( D(2,2,3,2)+ DD(3,2) ) * 1.0 ),      (( D(2,0,1,0) ) * 0.5 + ( D(2,0,1,2) ) * 0.5 + ( D(2,0,3,0) ) * 0.5 + ( D(2,0,3,2) ) * 0.5 ),      (( D(2,1,1,0) ) * 0.5 + ( D(2,1,1,2) ) * 0.5 + ( D(2,1,3,0) ) * 0.5 + ( D(2,1,3,2) ) * 0.5 ),      (( D(2,2,1,0)+ DD(1,0) ) * 0.5 + ( D(2,2,1,2)+ DD(1,2) ) * 0.5 + ( D(2,2,3,0)+ DD(3,0) ) * 0.5 + ( D(2,2,3,2)+ DD(3,2) ) * 0.5 ),      (( D(2,0,1,0) ) * 1.0 + ( D(2,0,1,3) ) * 0.5 + ( D(2,0,3,0) ) * 0.5 + ( D(2,0,3,3) ) * 0.5 ),      (( D(2,1,1,0) ) * 1.0 + ( D(2,1,1,3) ) * 0.5 + ( D(2,1,3,0) ) * 0.5 + ( D(2,1,3,3) ) * 0.5 ),      (( D(2,2,1,0)+ DD(1,0) ) * 1.0 + ( D(2,2,1,3)+ DD(1,3) ) * 0.5 + ( D(2,2,3,0)+ DD(3,0) ) * 0.5 + ( D(2,2,3,3)+ DD(3,3) ) * 0.5 ),      (( D(2,0,1,1) ) * 1.0 + ( D(2,0,1,3) ) * 0.5 + ( D(2,0,3,1) ) * 0.5 + ( D(2,0,3,3) ) * 1.0 ),      (( D(2,1,1,1) ) * 1.0 + ( D(2,1,1,3) ) * 0.5 + ( D(2,1,3,1) ) * 0.5 + ( D(2,1,3,3) ) * 1.0 ),      (( D(2,2,1,1)+ DD(1,1) ) * 1.0 + ( D(2,2,1,3)+ DD(1,3) ) * 0.5 + ( D(2,2,3,1)+ DD(3,1) ) * 0.5 + ( D(2,2,3,3)+ DD(3,3) ) * 1.0 ),      (( D(2,0,1,2) ) * 1.0 + ( D(2,0,1,3) ) * 0.5 + ( D(2,0,3,2) ) * 0.5 + ( D(2,0,3,3) ) * 0.5 ),      (( D(2,1,1,2) ) * 1.0 + ( D(2,1,1,3) ) * 0.5 + ( D(2,1,3,2) ) * 0.5 + ( D(2,1,3,3) ) * 0.5 ),      (( D(2,2,1,2)+ DD(1,2) ) * 1.0 + ( D(2,2,1,3)+ DD(1,3) ) * 0.5 + ( D(2,2,3,2)+ DD(3,2) ) * 0.5 + ( D(2,2,3,3)+ DD(3,3) ) * 0.5 )},
{ (( D(0,0,2,0)+ DD(2,0) ) * 0.5 + ( D(0,0,3,0)+ DD(3,0) ) * 0.5 ),      (( D(0,1,2,0) ) * 0.5 + ( D(0,1,3,0) ) * 0.5 ),      (( D(0,2,2,0) ) * 0.5 + ( D(0,2,3,0) ) * 0.5 ),      (( D(0,0,2,1)+ DD(2,1) ) * 0.5 + ( D(0,0,3,1)+ DD(3,1) ) * 0.5 ),      (( D(0,1,2,1) ) * 0.5 + ( D(0,1,3,1) ) * 0.5 ),      (( D(0,2,2,1) ) * 0.5 + ( D(0,2,3,1) ) * 0.5 ),      (( D(0,0,2,2)+ DD(2,2) ) * 0.5 + ( D(0,0,3,2)+ DD(3,2) ) * 1.0 ),      (( D(0,1,2,2) ) * 0.5 + ( D(0,1,3,2) ) * 1.0 ),      (( D(0,2,2,2) ) * 0.5 + ( D(0,2,3,2) ) * 1.0 ),      (( D(0,0,2,3)+ DD(2,3) ) * 1.0 + ( D(0,0,3,3)+ DD(3,3) ) * 0.5 ),      (( D(0,1,2,3) ) * 1.0 + ( D(0,1,3,3) ) * 0.5 ),      (( D(0,2,2,3) ) * 1.0 + ( D(0,2,3,3) ) * 0.5 ),      (( D(0,0,2,0)+ DD(2,0) ) * 0.5 + ( D(0,0,2,1)+ DD(2,1) ) * 0.5 + ( D(0,0,3,0)+ DD(3,0) ) * 0.5 + ( D(0,0,3,1)+ DD(3,1) ) * 0.5 ),      (( D(0,1,2,0) ) * 0.5 + ( D(0,1,2,1) ) * 0.5 + ( D(0,1,3,0) ) * 0.5 + ( D(0,1,3,1) ) * 0.5 ),      (( D(0,2,2,0) ) * 0.5 + ( D(0,2,2,1) ) * 0.5 + ( D(0,2,3,0) ) * 0.5 + ( D(0,2,3,1) ) * 0.5 ),      (( D(0,0,2,1)+ DD(2,1) ) * 0.5 + ( D(0,0,2,2)+ DD(2,2) ) * 0.5 + ( D(0,0,3,1)+ DD(3,1) ) * 1.0 + ( D(0,0,3,2)+ DD(3,2) ) * 0.5 ),      (( D(0,1,2,1) ) * 0.5 + ( D(0,1,2,2) ) * 0.5 + ( D(0,1,3,1) ) * 1.0 + ( D(0,1,3,2) ) * 0.5 ),      (( D(0,2,2,1) ) * 0.5 + ( D(0,2,2,2) ) * 0.5 + ( D(0,2,3,1) ) * 1.0 + ( D(0,2,3,2) ) * 0.5 ),      (( D(0,0,2,0)+ DD(2,0) ) * 0.5 + ( D(0,0,2,2)+ DD(2,2) ) * 0.5 + ( D(0,0,3,0)+ DD(3,0) ) * 1.0 + ( D(0,0,3,2)+ DD(3,2) ) * 0.5 ),      (( D(0,1,2,0) ) * 0.5 + ( D(0,1,2,2) ) * 0.5 + ( D(0,1,3,0) ) * 1.0 + ( D(0,1,3,2) ) * 0.5 ),      (( D(0,2,2,0) ) * 0.5 + ( D(0,2,2,2) ) * 0.5 + ( D(0,2,3,0) ) * 1.0 + ( D(0,2,3,2) ) * 0.5 ),      (( D(0,0,2,0)+ DD(2,0) ) * 1.0 + ( D(0,0,2,3)+ DD(2,3) ) * 0.5 + ( D(0,0,3,0)+ DD(3,0) ) * 0.5 + ( D(0,0,3,3)+ DD(3,3) ) * 0.5 ),      (( D(0,1,2,0) ) * 1.0 + ( D(0,1,2,3) ) * 0.5 + ( D(0,1,3,0) ) * 0.5 + ( D(0,1,3,3) ) * 0.5 ),      (( D(0,2,2,0) ) * 1.0 + ( D(0,2,2,3) ) * 0.5 + ( D(0,2,3,0) ) * 0.5 + ( D(0,2,3,3) ) * 0.5 ),      (( D(0,0,2,1)+ DD(2,1) ) * 1.0 + ( D(0,0,2,3)+ DD(2,3) ) * 0.5 + ( D(0,0,3,1)+ DD(3,1) ) * 0.5 + ( D(0,0,3,3)+ DD(3,3) ) * 0.5 ),      (( D(0,1,2,1) ) * 1.0 + ( D(0,1,2,3) ) * 0.5 + ( D(0,1,3,1) ) * 0.5 + ( D(0,1,3,3) ) * 0.5 ),      (( D(0,2,2,1) ) * 1.0 + ( D(0,2,2,3) ) * 0.5 + ( D(0,2,3,1) ) * 0.5 + ( D(0,2,3,3) ) * 0.5 ),      (( D(0,0,2,2)+ DD(2,2) ) * 1.0 + ( D(0,0,2,3)+ DD(2,3) ) * 0.5 + ( D(0,0,3,2)+ DD(3,2) ) * 0.5 + ( D(0,0,3,3)+ DD(3,3) ) * 1.0 ),      (( D(0,1,2,2) ) * 1.0 + ( D(0,1,2,3) ) * 0.5 + ( D(0,1,3,2) ) * 0.5 + ( D(0,1,3,3) ) * 1.0 ),      (( D(0,2,2,2) ) * 1.0 + ( D(0,2,2,3) ) * 0.5 + ( D(0,2,3,2) ) * 0.5 + ( D(0,2,3,3) ) * 1.0 )},
{ (( D(1,0,2,0) ) * 0.5 + ( D(1,0,3,0) ) * 0.5 ),      (( D(1,1,2,0)+ DD(2,0) ) * 0.5 + ( D(1,1,3,0)+ DD(3,0) ) * 0.5 ),      (( D(1,2,2,0) ) * 0.5 + ( D(1,2,3,0) ) * 0.5 ),      (( D(1,0,2,1) ) * 0.5 + ( D(1,0,3,1) ) * 0.5 ),      (( D(1,1,2,1)+ DD(2,1) ) * 0.5 + ( D(1,1,3,1)+ DD(3,1) ) * 0.5 ),      (( D(1,2,2,1) ) * 0.5 + ( D(1,2,3,1) ) * 0.5 ),      (( D(1,0,2,2) ) * 0.5 + ( D(1,0,3,2) ) * 1.0 ),      (( D(1,1,2,2)+ DD(2,2) ) * 0.5 + ( D(1,1,3,2)+ DD(3,2) ) * 1.0 ),      (( D(1,2,2,2) ) * 0.5 + ( D(1,2,3,2) ) * 1.0 ),      (( D(1,0,2,3) ) * 1.0 + ( D(1,0,3,3) ) * 0.5 ),      (( D(1,1,2,3)+ DD(2,3) ) * 1.0 + ( D(1,1,3,3)+ DD(3,3) ) * 0.5 ),      (( D(1,2,2,3) ) * 1.0 + ( D(1,2,3,3) ) * 0.5 ),      (( D(1,0,2,0) ) * 0.5 + ( D(1,0,2,1) ) * 0.5 + ( D(1,0,3,0) ) * 0.5 + ( D(1,0,3,1) ) * 0.5 ),      (( D(1,1,2,0)+ DD(2,0) ) * 0.5 + ( D(1,1,2,1)+ DD(2,1) ) * 0.5 + ( D(1,1,3,0)+ DD(3,0) ) * 0.5 + ( D(1,1,3,1)+ DD(3,1) ) * 0.5 ),      (( D(1,2,2,0) ) * 0.5 + ( D(1,2,2,1) ) * 0.5 + ( D(1,2,3,0) ) * 0.5 + ( D(1,2,3,1) ) * 0.5 ),      (( D(1,0,2,1) ) * 0.5 + ( D(1,0,2,2) ) * 0.5 + ( D(1,0,3,1) ) * 1.0 + ( D(1,0,3,2) ) * 0.5 ),      (( D(1,1,2,1)+ DD(2,1) ) * 0.5 + ( D(1,1,2,2)+ DD(2,2) ) * 0.5 + ( D(1,1,3,1)+ DD(3,1) ) * 1.0 + ( D(1,1,3,2)+ DD(3,2) ) * 0.5 ),      (( D(1,2,2,1) ) * 0.5 + ( D(1,2,2,2) ) * 0.5 + ( D(1,2,3,1) ) * 1.0 + ( D(1,2,3,2) ) * 0.5 ),      (( D(1,0,2,0) ) * 0.5 + ( D(1,0,2,2) ) * 0.5 + ( D(1,0,3,0) ) * 1.0 + ( D(1,0,3,2) ) * 0.5 ),      (( D(1,1,2,0)+ DD(2,0) ) * 0.5 + ( D(1,1,2,2)+ DD(2,2) ) * 0.5 + ( D(1,1,3,0)+ DD(3,0) ) * 1.0 + ( D(1,1,3,2)+ DD(3,2) ) * 0.5 ),      (( D(1,2,2,0) ) * 0.5 + ( D(1,2,2,2) ) * 0.5 + ( D(1,2,3,0) ) * 1.0 + ( D(1,2,3,2) ) * 0.5 ),      (( D(1,0,2,0) ) * 1.0 + ( D(1,0,2,3) ) * 0.5 + ( D(1,0,3,0) ) * 0.5 + ( D(1,0,3,3) ) * 0.5 ),      (( D(1,1,2,0)+ DD(2,0) ) * 1.0 + ( D(1,1,2,3)+ DD(2,3) ) * 0.5 + ( D(1,1,3,0)+ DD(3,0) ) * 0.5 + ( D(1,1,3,3)+ DD(3,3) ) * 0.5 ),      (( D(1,2,2,0) ) * 1.0 + ( D(1,2,2,3) ) * 0.5 + ( D(1,2,3,0) ) * 0.5 + ( D(1,2,3,3) ) * 0.5 ),      (( D(1,0,2,1) ) * 1.0 + ( D(1,0,2,3) ) * 0.5 + ( D(1,0,3,1) ) * 0.5 + ( D(1,0,3,3) ) * 0.5 ),      (( D(1,1,2,1)+ DD(2,1) ) * 1.0 + ( D(1,1,2,3)+ DD(2,3) ) * 0.5 + ( D(1,1,3,1)+ DD(3,1) ) * 0.5 + ( D(1,1,3,3)+ DD(3,3) ) * 0.5 ),      (( D(1,2,2,1) ) * 1.0 + ( D(1,2,2,3) ) * 0.5 + ( D(1,2,3,1) ) * 0.5 + ( D(1,2,3,3) ) * 0.5 ),      (( D(1,0,2,2) ) * 1.0 + ( D(1,0,2,3) ) * 0.5 + ( D(1,0,3,2) ) * 0.5 + ( D(1,0,3,3) ) * 1.0 ),      (( D(1,1,2,2)+ DD(2,2) ) * 1.0 + ( D(1,1,2,3)+ DD(2,3) ) * 0.5 + ( D(1,1,3,2)+ DD(3,2) ) * 0.5 + ( D(1,1,3,3)+ DD(3,3) ) * 1.0 ),      (( D(1,2,2,2) ) * 1.0 + ( D(1,2,2,3) ) * 0.5 + ( D(1,2,3,2) ) * 0.5 + ( D(1,2,3,3) ) * 1.0 )},
{ (( D(2,0,2,0) ) * 0.5 + ( D(2,0,3,0) ) * 0.5 ),      (( D(2,1,2,0) ) * 0.5 + ( D(2,1,3,0) ) * 0.5 ),      (( D(2,2,2,0)+ DD(2,0) ) * 0.5 + ( D(2,2,3,0)+ DD(3,0) ) * 0.5 ),      (( D(2,0,2,1) ) * 0.5 + ( D(2,0,3,1) ) * 0.5 ),      (( D(2,1,2,1) ) * 0.5 + ( D(2,1,3,1) ) * 0.5 ),      (( D(2,2,2,1)+ DD(2,1) ) * 0.5 + ( D(2,2,3,1)+ DD(3,1) ) * 0.5 ),      (( D(2,0,2,2) ) * 0.5 + ( D(2,0,3,2) ) * 1.0 ),      (( D(2,1,2,2) ) * 0.5 + ( D(2,1,3,2) ) * 1.0 ),      (( D(2,2,2,2)+ DD(2,2) ) * 0.5 + ( D(2,2,3,2)+ DD(3,2) ) * 1.0 ),      (( D(2,0,2,3) ) * 1.0 + ( D(2,0,3,3) ) * 0.5 ),      (( D(2,1,2,3) ) * 1.0 + ( D(2,1,3,3) ) * 0.5 ),      (( D(2,2,2,3)+ DD(2,3) ) * 1.0 + ( D(2,2,3,3)+ DD(3,3) ) * 0.5 ),      (( D(2,0,2,0) ) * 0.5 + ( D(2,0,2,1) ) * 0.5 + ( D(2,0,3,0) ) * 0.5 + ( D(2,0,3,1) ) * 0.5 ),      (( D(2,1,2,0) ) * 0.5 + ( D(2,1,2,1) ) * 0.5 + ( D(2,1,3,0) ) * 0.5 + ( D(2,1,3,1) ) * 0.5 ),      (( D(2,2,2,0)+ DD(2,0) ) * 0.5 + ( D(2,2,2,1)+ DD(2,1) ) * 0.5 + ( D(2,2,3,0)+ DD(3,0) ) * 0.5 + ( D(2,2,3,1)+ DD(3,1) ) * 0.5 ),      (( D(2,0,2,1) ) * 0.5 + ( D(2,0,2,2) ) * 0.5 + ( D(2,0,3,1) ) * 1.0 + ( D(2,0,3,2) ) * 0.5 ),      (( D(2,1,2,1) ) * 0.5 + ( D(2,1,2,2) ) * 0.5 + ( D(2,1,3,1) ) * 1.0 + ( D(2,1,3,2) ) * 0.5 ),      (( D(2,2,2,1)+ DD(2,1) ) * 0.5 + ( D(2,2,2,2)+ DD(2,2) ) * 0.5 + ( D(2,2,3,1)+ DD(3,1) ) * 1.0 + ( D(2,2,3,2)+ DD(3,2) ) * 0.5 ),      (( D(2,0,2,0) ) * 0.5 + ( D(2,0,2,2) ) * 0.5 + ( D(2,0,3,0) ) * 1.0 + ( D(2,0,3,2) ) * 0.5 ),      (( D(2,1,2,0) ) * 0.5 + ( D(2,1,2,2) ) * 0.5 + ( D(2,1,3,0) ) * 1.0 + ( D(2,1,3,2) ) * 0.5 ),      (( D(2,2,2,0)+ DD(2,0) ) * 0.5 + ( D(2,2,2,2)+ DD(2,2) ) * 0.5 + ( D(2,2,3,0)+ DD(3,0) ) * 1.0 + ( D(2,2,3,2)+ DD(3,2) ) * 0.5 ),      (( D(2,0,2,0) ) * 1.0 + ( D(2,0,2,3) ) * 0.5 + ( D(2,0,3,0) ) * 0.5 + ( D(2,0,3,3) ) * 0.5 ),      (( D(2,1,2,0) ) * 1.0 + ( D(2,1,2,3) ) * 0.5 + ( D(2,1,3,0) ) * 0.5 + ( D(2,1,3,3) ) * 0.5 ),      (( D(2,2,2,0)+ DD(2,0) ) * 1.0 + ( D(2,2,2,3)+ DD(2,3) ) * 0.5 + ( D(2,2,3,0)+ DD(3,0) ) * 0.5 + ( D(2,2,3,3)+ DD(3,3) ) * 0.5 ),      (( D(2,0,2,1) ) * 1.0 + ( D(2,0,2,3) ) * 0.5 + ( D(2,0,3,1) ) * 0.5 + ( D(2,0,3,3) ) * 0.5 ),      (( D(2,1,2,1) ) * 1.0 + ( D(2,1,2,3) ) * 0.5 + ( D(2,1,3,1) ) * 0.5 + ( D(2,1,3,3) ) * 0.5 ),      (( D(2,2,2,1)+ DD(2,1) ) * 1.0 + ( D(2,2,2,3)+ DD(2,3) ) * 0.5 + ( D(2,2,3,1)+ DD(3,1) ) * 0.5 + ( D(2,2,3,3)+ DD(3,3) ) * 0.5 ),      (( D(2,0,2,2) ) * 1.0 + ( D(2,0,2,3) ) * 0.5 + ( D(2,0,3,2) ) * 0.5 + ( D(2,0,3,3) ) * 1.0 ),      (( D(2,1,2,2) ) * 1.0 + ( D(2,1,2,3) ) * 0.5 + ( D(2,1,3,2) ) * 0.5 + ( D(2,1,3,3) ) * 1.0 ),      (( D(2,2,2,2)+ DD(2,2) ) * 1.0 + ( D(2,2,2,3)+ DD(2,3) ) * 0.5 + ( D(2,2,3,2)+ DD(3,2) ) * 0.5 + ( D(2,2,3,3)+ DD(3,3) ) * 1.0 )}
};
*/

	//large code generator
/*
	printf("\n");
	for(int i=0;i<30;i++)
	{
		//printf("temp[%d] = ", i);
		for(int j=0;j<30;j++)
		{
			int a = i%3;
			int b = j%3;
			//printf("temp[%d] += ", i%3);
					for(int k=0;k<4;k++)
						for(int l=0;l<4;l++)
							if(G[(i/3)*4 + k][(j/3)*4+l] > 0.0001)
							{
								//(f(k,a) * f(l,b) * c2 + f(k,b) * f(l,a) * c3)
								//printf(" ");
								printf("temp[%d] += (muls[%d][%d][%d][%d] * c2 + muls[%d][%d][%d][%d] * c3) * %.1f * nodes[%d][ltid];\n",i%3,k,a,l,b,k,b,l,a,G[(i/3)*4 + k][(j/3)*4+l],j);
								//((f(c,0) * f(d,0) + f(c,1) * f(d,1) + f(c,2) * f(d,2)) * c3)
								if(a == b)
									printf("temp[%d] += ((muls[%d][0][%d][0] + muls[%d][1][%d][1] + muls[%d][2][%d][2]) * c3) * %.1f * nodes[%d][ltid];\n",i%3,k,l,k,l,k,l,G[(i/3)*4 + k][(j/3)*4+l],j);
								//printf(" ) * %.1f + ", G[(i/3)*4 + k][(j/3)*4+l]);
							}
			//printf("\b\b) * nodes[%d][ltid];\n      ",j);
		}

		if(i%3 == 2)
			system("pause");
	}
	printf("");
	system("pause");
*/
/*	Original code
	for(int i=0;i<10;i++)
		for(int j=0;j<10;j++)
		{
			Matrix3d K3x3;
			for(int a=0;a<3;a++)
				for(int b=0;b<3;b++)
				{
					K3x3(a,b) = 0;
					for(int k=0;k<4;k++)
						for(int l=0;l<4;l++)
							K3x3(a,b) += (dldx(k,a) * dldx(l,b) * c2 + dldx(k,b) * dldx(l,a) * c3) * G[i*4 + k][j*4+l];

					//for(int k=0;k<4;k++)
						//for(int l=0;l<4;l++)
							// K3x3(a,b) += dldx(k,b) * dldx(l,a) * G[i*4 + k][j*4+l] * c3;
				}


			for(int a=0;a<3;a++)
				for(int b=0;b<3;b++)
					for(int k=0;k<4;k++)
						for(int l=0;l<4;l++)
							K3x3(a,a) += dldx(k,b) * dldx(l,b) * c3 * G[i*4 + k][j*4+l];

			K3x3 = K3x3 * (2.0/5.0) * volume;

			for(int a=0;a<3;a++)
				for(int b=0;b<3;b++)
					K(i * 3 + a, j * 3 + b) = K3x3(a,b);
		}
*/

float Ktemp[30][30] = 
{
{ (( (b[0][0] * b[0][0] * c2 + b[0][0] * b[0][0] * c3)+ ((b[0][0] * b[0][0] + b[0][1] * b[0][1] + b[0][2] * b[0][2]) * c3) ) * 1.0 ),      (( (b[0][0] * b[0][1] * c2 + b[0][1] * b[0][0] * c3) ) * 1.0 ),      (( (b[0][0] * b[0][2] * c2 + b[0][2] * b[0][0] * c3) ) * 1.0 ),      (( (b[0][0] * b[1][0] * c2 + b[0][0] * b[1][0] * c3)+ ((b[0][0] * b[1][0] + b[0][1] * b[1][1] + b[0][2] * b[1][2]) * c3) ) * 0.5 ),      (( (b[0][0] * b[1][1] * c2 + b[0][1] * b[1][0] * c3) ) * 0.5 ),      (( (b[0][0] * b[1][2] * c2 + b[0][2] * b[1][0] * c3) ) * 0.5 ),      (( (b[0][0] * b[2][0] * c2 + b[0][0] * b[2][0] * c3)+ ((b[0][0] * b[2][0] + b[0][1] * b[2][1] + b[0][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[0][0] * b[2][1] * c2 + b[0][1] * b[2][0] * c3) ) * 0.5 ),      (( (b[0][0] * b[2][2] * c2 + b[0][2] * b[2][0] * c3) ) * 0.5 ),      (( (b[0][0] * b[3][0] * c2 + b[0][0] * b[3][0] * c3)+ ((b[0][0] * b[3][0] + b[0][1] * b[3][1] + b[0][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[0][0] * b[3][1] * c2 + b[0][1] * b[3][0] * c3) ) * 0.5 ),      (( (b[0][0] * b[3][2] * c2 + b[0][2] * b[3][0] * c3) ) * 0.5 ),      (( (b[0][0] * b[0][0] * c2 + b[0][0] * b[0][0] * c3)+ ((b[0][0] * b[0][0] + b[0][1] * b[0][1] + b[0][2] * b[0][2]) * c3) ) * 0.5 + ( (b[0][0] * b[1][0] * c2 + b[0][0] * b[1][0] * c3)+ ((b[0][0] * b[1][0] + b[0][1] * b[1][1] + b[0][2] * b[1][2]) * c3) ) * 1.0 ),      (( (b[0][0] * b[0][1] * c2 + b[0][1] * b[0][0] * c3) ) * 0.5 + ( (b[0][0] * b[1][1] * c2 + b[0][1] * b[1][0] * c3) ) * 1.0 ),      (( (b[0][0] * b[0][2] * c2 + b[0][2] * b[0][0] * c3) ) * 0.5 + ( (b[0][0] * b[1][2] * c2 + b[0][2] * b[1][0] * c3) ) * 1.0 ),      (( (b[0][0] * b[1][0] * c2 + b[0][0] * b[1][0] * c3)+ ((b[0][0] * b[1][0] + b[0][1] * b[1][1] + b[0][2] * b[1][2]) * c3) ) * 0.5 + ( (b[0][0] * b[2][0] * c2 + b[0][0] * b[2][0] * c3)+ ((b[0][0] * b[2][0] + b[0][1] * b[2][1] + b[0][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[0][0] * b[1][1] * c2 + b[0][1] * b[1][0] * c3) ) * 0.5 + ( (b[0][0] * b[2][1] * c2 + b[0][1] * b[2][0] * c3) ) * 0.5 ),      (( (b[0][0] * b[1][2] * c2 + b[0][2] * b[1][0] * c3) ) * 0.5 + ( (b[0][0] * b[2][2] * c2 + b[0][2] * b[2][0] * c3) ) * 0.5 ),      (( (b[0][0] * b[0][0] * c2 + b[0][0] * b[0][0] * c3)+ ((b[0][0] * b[0][0] + b[0][1] * b[0][1] + b[0][2] * b[0][2]) * c3) ) * 0.5 + ( (b[0][0] * b[2][0] * c2 + b[0][0] * b[2][0] * c3)+ ((b[0][0] * b[2][0] + b[0][1] * b[2][1] + b[0][2] * b[2][2]) * c3) ) * 1.0 ),      (( (b[0][0] * b[0][1] * c2 + b[0][1] * b[0][0] * c3) ) * 0.5 + ( (b[0][0] * b[2][1] * c2 + b[0][1] * b[2][0] * c3) ) * 1.0 ),      (( (b[0][0] * b[0][2] * c2 + b[0][2] * b[0][0] * c3) ) * 0.5 + ( (b[0][0] * b[2][2] * c2 + b[0][2] * b[2][0] * c3) ) * 1.0 ),      (( (b[0][0] * b[0][0] * c2 + b[0][0] * b[0][0] * c3)+ ((b[0][0] * b[0][0] + b[0][1] * b[0][1] + b[0][2] * b[0][2]) * c3) ) * 0.5 + ( (b[0][0] * b[3][0] * c2 + b[0][0] * b[3][0] * c3)+ ((b[0][0] * b[3][0] + b[0][1] * b[3][1] + b[0][2] * b[3][2]) * c3) ) * 1.0 ),      (( (b[0][0] * b[0][1] * c2 + b[0][1] * b[0][0] * c3) ) * 0.5 + ( (b[0][0] * b[3][1] * c2 + b[0][1] * b[3][0] * c3) ) * 1.0 ),      (( (b[0][0] * b[0][2] * c2 + b[0][2] * b[0][0] * c3) ) * 0.5 + ( (b[0][0] * b[3][2] * c2 + b[0][2] * b[3][0] * c3) ) * 1.0 ),      (( (b[0][0] * b[1][0] * c2 + b[0][0] * b[1][0] * c3)+ ((b[0][0] * b[1][0] + b[0][1] * b[1][1] + b[0][2] * b[1][2]) * c3) ) * 0.5 + ( (b[0][0] * b[3][0] * c2 + b[0][0] * b[3][0] * c3)+ ((b[0][0] * b[3][0] + b[0][1] * b[3][1] + b[0][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[0][0] * b[1][1] * c2 + b[0][1] * b[1][0] * c3) ) * 0.5 + ( (b[0][0] * b[3][1] * c2 + b[0][1] * b[3][0] * c3) ) * 0.5 ),      (( (b[0][0] * b[1][2] * c2 + b[0][2] * b[1][0] * c3) ) * 0.5 + ( (b[0][0] * b[3][2] * c2 + b[0][2] * b[3][0] * c3) ) * 0.5 ),      (( (b[0][0] * b[2][0] * c2 + b[0][0] * b[2][0] * c3)+ ((b[0][0] * b[2][0] + b[0][1] * b[2][1] + b[0][2] * b[2][2]) * c3) ) * 0.5 + ( (b[0][0] * b[3][0] * c2 + b[0][0] * b[3][0] * c3)+ ((b[0][0] * b[3][0] + b[0][1] * b[3][1] + b[0][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[0][0] * b[2][1] * c2 + b[0][1] * b[2][0] * c3) ) * 0.5 + ( (b[0][0] * b[3][1] * c2 + b[0][1] * b[3][0] * c3) ) * 0.5 ),      (( (b[0][0] * b[2][2] * c2 + b[0][2] * b[2][0] * c3) ) * 0.5 + ( (b[0][0] * b[3][2] * c2 + b[0][2] * b[3][0] * c3) ) * 0.5 )},
{ (( (b[0][1] * b[0][0] * c2 + b[0][0] * b[0][1] * c3) ) * 1.0 ),      (( (b[0][1] * b[0][1] * c2 + b[0][1] * b[0][1] * c3)+ ((b[0][0] * b[0][0] + b[0][1] * b[0][1] + b[0][2] * b[0][2]) * c3) ) * 1.0 ),      (( (b[0][1] * b[0][2] * c2 + b[0][2] * b[0][1] * c3) ) * 1.0 ),      (( (b[0][1] * b[1][0] * c2 + b[0][0] * b[1][1] * c3) ) * 0.5 ),      (( (b[0][1] * b[1][1] * c2 + b[0][1] * b[1][1] * c3)+ ((b[0][0] * b[1][0] + b[0][1] * b[1][1] + b[0][2] * b[1][2]) * c3) ) * 0.5 ),      (( (b[0][1] * b[1][2] * c2 + b[0][2] * b[1][1] * c3) ) * 0.5 ),      (( (b[0][1] * b[2][0] * c2 + b[0][0] * b[2][1] * c3) ) * 0.5 ),      (( (b[0][1] * b[2][1] * c2 + b[0][1] * b[2][1] * c3)+ ((b[0][0] * b[2][0] + b[0][1] * b[2][1] + b[0][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[0][1] * b[2][2] * c2 + b[0][2] * b[2][1] * c3) ) * 0.5 ),      (( (b[0][1] * b[3][0] * c2 + b[0][0] * b[3][1] * c3) ) * 0.5 ),      (( (b[0][1] * b[3][1] * c2 + b[0][1] * b[3][1] * c3)+ ((b[0][0] * b[3][0] + b[0][1] * b[3][1] + b[0][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[0][1] * b[3][2] * c2 + b[0][2] * b[3][1] * c3) ) * 0.5 ),      (( (b[0][1] * b[0][0] * c2 + b[0][0] * b[0][1] * c3) ) * 0.5 + ( (b[0][1] * b[1][0] * c2 + b[0][0] * b[1][1] * c3) ) * 1.0 ),      (( (b[0][1] * b[0][1] * c2 + b[0][1] * b[0][1] * c3)+ ((b[0][0] * b[0][0] + b[0][1] * b[0][1] + b[0][2] * b[0][2]) * c3) ) * 0.5 + ( (b[0][1] * b[1][1] * c2 + b[0][1] * b[1][1] * c3)+ ((b[0][0] * b[1][0] + b[0][1] * b[1][1] + b[0][2] * b[1][2]) * c3) ) * 1.0 ),      (( (b[0][1] * b[0][2] * c2 + b[0][2] * b[0][1] * c3) ) * 0.5 + ( (b[0][1] * b[1][2] * c2 + b[0][2] * b[1][1] * c3) ) * 1.0 ),      (( (b[0][1] * b[1][0] * c2 + b[0][0] * b[1][1] * c3) ) * 0.5 + ( (b[0][1] * b[2][0] * c2 + b[0][0] * b[2][1] * c3) ) * 0.5 ),      (( (b[0][1] * b[1][1] * c2 + b[0][1] * b[1][1] * c3)+ ((b[0][0] * b[1][0] + b[0][1] * b[1][1] + b[0][2] * b[1][2]) * c3) ) * 0.5 + ( (b[0][1] * b[2][1] * c2 + b[0][1] * b[2][1] * c3)+ ((b[0][0] * b[2][0] + b[0][1] * b[2][1] + b[0][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[0][1] * b[1][2] * c2 + b[0][2] * b[1][1] * c3) ) * 0.5 + ( (b[0][1] * b[2][2] * c2 + b[0][2] * b[2][1] * c3) ) * 0.5 ),      (( (b[0][1] * b[0][0] * c2 + b[0][0] * b[0][1] * c3) ) * 0.5 + ( (b[0][1] * b[2][0] * c2 + b[0][0] * b[2][1] * c3) ) * 1.0 ),      (( (b[0][1] * b[0][1] * c2 + b[0][1] * b[0][1] * c3)+ ((b[0][0] * b[0][0] + b[0][1] * b[0][1] + b[0][2] * b[0][2]) * c3) ) * 0.5 + ( (b[0][1] * b[2][1] * c2 + b[0][1] * b[2][1] * c3)+ ((b[0][0] * b[2][0] + b[0][1] * b[2][1] + b[0][2] * b[2][2]) * c3) ) * 1.0 ),      (( (b[0][1] * b[0][2] * c2 + b[0][2] * b[0][1] * c3) ) * 0.5 + ( (b[0][1] * b[2][2] * c2 + b[0][2] * b[2][1] * c3) ) * 1.0 ),      (( (b[0][1] * b[0][0] * c2 + b[0][0] * b[0][1] * c3) ) * 0.5 + ( (b[0][1] * b[3][0] * c2 + b[0][0] * b[3][1] * c3) ) * 1.0 ),      (( (b[0][1] * b[0][1] * c2 + b[0][1] * b[0][1] * c3)+ ((b[0][0] * b[0][0] + b[0][1] * b[0][1] + b[0][2] * b[0][2]) * c3) ) * 0.5 + ( (b[0][1] * b[3][1] * c2 + b[0][1] * b[3][1] * c3)+ ((b[0][0] * b[3][0] + b[0][1] * b[3][1] + b[0][2] * b[3][2]) * c3) ) * 1.0 ),      (( (b[0][1] * b[0][2] * c2 + b[0][2] * b[0][1] * c3) ) * 0.5 + ( (b[0][1] * b[3][2] * c2 + b[0][2] * b[3][1] * c3) ) * 1.0 ),      (( (b[0][1] * b[1][0] * c2 + b[0][0] * b[1][1] * c3) ) * 0.5 + ( (b[0][1] * b[3][0] * c2 + b[0][0] * b[3][1] * c3) ) * 0.5 ),      (( (b[0][1] * b[1][1] * c2 + b[0][1] * b[1][1] * c3)+ ((b[0][0] * b[1][0] + b[0][1] * b[1][1] + b[0][2] * b[1][2]) * c3) ) * 0.5 + ( (b[0][1] * b[3][1] * c2 + b[0][1] * b[3][1] * c3)+ ((b[0][0] * b[3][0] + b[0][1] * b[3][1] + b[0][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[0][1] * b[1][2] * c2 + b[0][2] * b[1][1] * c3) ) * 0.5 + ( (b[0][1] * b[3][2] * c2 + b[0][2] * b[3][1] * c3) ) * 0.5 ),      (( (b[0][1] * b[2][0] * c2 + b[0][0] * b[2][1] * c3) ) * 0.5 + ( (b[0][1] * b[3][0] * c2 + b[0][0] * b[3][1] * c3) ) * 0.5 ),      (( (b[0][1] * b[2][1] * c2 + b[0][1] * b[2][1] * c3)+ ((b[0][0] * b[2][0] + b[0][1] * b[2][1] + b[0][2] * b[2][2]) * c3) ) * 0.5 + ( (b[0][1] * b[3][1] * c2 + b[0][1] * b[3][1] * c3)+ ((b[0][0] * b[3][0] + b[0][1] * b[3][1] + b[0][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[0][1] * b[2][2] * c2 + b[0][2] * b[2][1] * c3) ) * 0.5 + ( (b[0][1] * b[3][2] * c2 + b[0][2] * b[3][1] * c3) ) * 0.5 )},
{ (( (b[0][2] * b[0][0] * c2 + b[0][0] * b[0][2] * c3) ) * 1.0 ),      (( (b[0][2] * b[0][1] * c2 + b[0][1] * b[0][2] * c3) ) * 1.0 ),      (( (b[0][2] * b[0][2] * c2 + b[0][2] * b[0][2] * c3)+ ((b[0][0] * b[0][0] + b[0][1] * b[0][1] + b[0][2] * b[0][2]) * c3) ) * 1.0 ),      (( (b[0][2] * b[1][0] * c2 + b[0][0] * b[1][2] * c3) ) * 0.5 ),      (( (b[0][2] * b[1][1] * c2 + b[0][1] * b[1][2] * c3) ) * 0.5 ),      (( (b[0][2] * b[1][2] * c2 + b[0][2] * b[1][2] * c3)+ ((b[0][0] * b[1][0] + b[0][1] * b[1][1] + b[0][2] * b[1][2]) * c3) ) * 0.5 ),      (( (b[0][2] * b[2][0] * c2 + b[0][0] * b[2][2] * c3) ) * 0.5 ),      (( (b[0][2] * b[2][1] * c2 + b[0][1] * b[2][2] * c3) ) * 0.5 ),      (( (b[0][2] * b[2][2] * c2 + b[0][2] * b[2][2] * c3)+ ((b[0][0] * b[2][0] + b[0][1] * b[2][1] + b[0][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[0][2] * b[3][0] * c2 + b[0][0] * b[3][2] * c3) ) * 0.5 ),      (( (b[0][2] * b[3][1] * c2 + b[0][1] * b[3][2] * c3) ) * 0.5 ),      (( (b[0][2] * b[3][2] * c2 + b[0][2] * b[3][2] * c3)+ ((b[0][0] * b[3][0] + b[0][1] * b[3][1] + b[0][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[0][2] * b[0][0] * c2 + b[0][0] * b[0][2] * c3) ) * 0.5 + ( (b[0][2] * b[1][0] * c2 + b[0][0] * b[1][2] * c3) ) * 1.0 ),      (( (b[0][2] * b[0][1] * c2 + b[0][1] * b[0][2] * c3) ) * 0.5 + ( (b[0][2] * b[1][1] * c2 + b[0][1] * b[1][2] * c3) ) * 1.0 ),      (( (b[0][2] * b[0][2] * c2 + b[0][2] * b[0][2] * c3)+ ((b[0][0] * b[0][0] + b[0][1] * b[0][1] + b[0][2] * b[0][2]) * c3) ) * 0.5 + ( (b[0][2] * b[1][2] * c2 + b[0][2] * b[1][2] * c3)+ ((b[0][0] * b[1][0] + b[0][1] * b[1][1] + b[0][2] * b[1][2]) * c3) ) * 1.0 ),      (( (b[0][2] * b[1][0] * c2 + b[0][0] * b[1][2] * c3) ) * 0.5 + ( (b[0][2] * b[2][0] * c2 + b[0][0] * b[2][2] * c3) ) * 0.5 ),      (( (b[0][2] * b[1][1] * c2 + b[0][1] * b[1][2] * c3) ) * 0.5 + ( (b[0][2] * b[2][1] * c2 + b[0][1] * b[2][2] * c3) ) * 0.5 ),      (( (b[0][2] * b[1][2] * c2 + b[0][2] * b[1][2] * c3)+ ((b[0][0] * b[1][0] + b[0][1] * b[1][1] + b[0][2] * b[1][2]) * c3) ) * 0.5 + ( (b[0][2] * b[2][2] * c2 + b[0][2] * b[2][2] * c3)+ ((b[0][0] * b[2][0] + b[0][1] * b[2][1] + b[0][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[0][2] * b[0][0] * c2 + b[0][0] * b[0][2] * c3) ) * 0.5 + ( (b[0][2] * b[2][0] * c2 + b[0][0] * b[2][2] * c3) ) * 1.0 ),      (( (b[0][2] * b[0][1] * c2 + b[0][1] * b[0][2] * c3) ) * 0.5 + ( (b[0][2] * b[2][1] * c2 + b[0][1] * b[2][2] * c3) ) * 1.0 ),      (( (b[0][2] * b[0][2] * c2 + b[0][2] * b[0][2] * c3)+ ((b[0][0] * b[0][0] + b[0][1] * b[0][1] + b[0][2] * b[0][2]) * c3) ) * 0.5 + ( (b[0][2] * b[2][2] * c2 + b[0][2] * b[2][2] * c3)+ ((b[0][0] * b[2][0] + b[0][1] * b[2][1] + b[0][2] * b[2][2]) * c3) ) * 1.0 ),      (( (b[0][2] * b[0][0] * c2 + b[0][0] * b[0][2] * c3) ) * 0.5 + ( (b[0][2] * b[3][0] * c2 + b[0][0] * b[3][2] * c3) ) * 1.0 ),      (( (b[0][2] * b[0][1] * c2 + b[0][1] * b[0][2] * c3) ) * 0.5 + ( (b[0][2] * b[3][1] * c2 + b[0][1] * b[3][2] * c3) ) * 1.0 ),      (( (b[0][2] * b[0][2] * c2 + b[0][2] * b[0][2] * c3)+ ((b[0][0] * b[0][0] + b[0][1] * b[0][1] + b[0][2] * b[0][2]) * c3) ) * 0.5 + ( (b[0][2] * b[3][2] * c2 + b[0][2] * b[3][2] * c3)+ ((b[0][0] * b[3][0] + b[0][1] * b[3][1] + b[0][2] * b[3][2]) * c3) ) * 1.0 ),      (( (b[0][2] * b[1][0] * c2 + b[0][0] * b[1][2] * c3) ) * 0.5 + ( (b[0][2] * b[3][0] * c2 + b[0][0] * b[3][2] * c3) ) * 0.5 ),      (( (b[0][2] * b[1][1] * c2 + b[0][1] * b[1][2] * c3) ) * 0.5 + ( (b[0][2] * b[3][1] * c2 + b[0][1] * b[3][2] * c3) ) * 0.5 ),      (( (b[0][2] * b[1][2] * c2 + b[0][2] * b[1][2] * c3)+ ((b[0][0] * b[1][0] + b[0][1] * b[1][1] + b[0][2] * b[1][2]) * c3) ) * 0.5 + ( (b[0][2] * b[3][2] * c2 + b[0][2] * b[3][2] * c3)+ ((b[0][0] * b[3][0] + b[0][1] * b[3][1] + b[0][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[0][2] * b[2][0] * c2 + b[0][0] * b[2][2] * c3) ) * 0.5 + ( (b[0][2] * b[3][0] * c2 + b[0][0] * b[3][2] * c3) ) * 0.5 ),      (( (b[0][2] * b[2][1] * c2 + b[0][1] * b[2][2] * c3) ) * 0.5 + ( (b[0][2] * b[3][1] * c2 + b[0][1] * b[3][2] * c3) ) * 0.5 ),      (( (b[0][2] * b[2][2] * c2 + b[0][2] * b[2][2] * c3)+ ((b[0][0] * b[2][0] + b[0][1] * b[2][1] + b[0][2] * b[2][2]) * c3) ) * 0.5 + ( (b[0][2] * b[3][2] * c2 + b[0][2] * b[3][2] * c3)+ ((b[0][0] * b[3][0] + b[0][1] * b[3][1] + b[0][2] * b[3][2]) * c3) ) * 0.5 )},
{ (( (b[1][0] * b[0][0] * c2 + b[1][0] * b[0][0] * c3)+ ((b[1][0] * b[0][0] + b[1][1] * b[0][1] + b[1][2] * b[0][2]) * c3) ) * 0.5 ),      (( (b[1][0] * b[0][1] * c2 + b[1][1] * b[0][0] * c3) ) * 0.5 ),      (( (b[1][0] * b[0][2] * c2 + b[1][2] * b[0][0] * c3) ) * 0.5 ),      (( (b[1][0] * b[1][0] * c2 + b[1][0] * b[1][0] * c3)+ ((b[1][0] * b[1][0] + b[1][1] * b[1][1] + b[1][2] * b[1][2]) * c3) ) * 1.0 ),      (( (b[1][0] * b[1][1] * c2 + b[1][1] * b[1][0] * c3) ) * 1.0 ),      (( (b[1][0] * b[1][2] * c2 + b[1][2] * b[1][0] * c3) ) * 1.0 ),      (( (b[1][0] * b[2][0] * c2 + b[1][0] * b[2][0] * c3)+ ((b[1][0] * b[2][0] + b[1][1] * b[2][1] + b[1][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[1][0] * b[2][1] * c2 + b[1][1] * b[2][0] * c3) ) * 0.5 ),      (( (b[1][0] * b[2][2] * c2 + b[1][2] * b[2][0] * c3) ) * 0.5 ),      (( (b[1][0] * b[3][0] * c2 + b[1][0] * b[3][0] * c3)+ ((b[1][0] * b[3][0] + b[1][1] * b[3][1] + b[1][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[1][0] * b[3][1] * c2 + b[1][1] * b[3][0] * c3) ) * 0.5 ),      (( (b[1][0] * b[3][2] * c2 + b[1][2] * b[3][0] * c3) ) * 0.5 ),      (( (b[1][0] * b[0][0] * c2 + b[1][0] * b[0][0] * c3)+ ((b[1][0] * b[0][0] + b[1][1] * b[0][1] + b[1][2] * b[0][2]) * c3) ) * 1.0 + ( (b[1][0] * b[1][0] * c2 + b[1][0] * b[1][0] * c3)+ ((b[1][0] * b[1][0] + b[1][1] * b[1][1] + b[1][2] * b[1][2]) * c3) ) * 0.5 ),      (( (b[1][0] * b[0][1] * c2 + b[1][1] * b[0][0] * c3) ) * 1.0 + ( (b[1][0] * b[1][1] * c2 + b[1][1] * b[1][0] * c3) ) * 0.5 ),      (( (b[1][0] * b[0][2] * c2 + b[1][2] * b[0][0] * c3) ) * 1.0 + ( (b[1][0] * b[1][2] * c2 + b[1][2] * b[1][0] * c3) ) * 0.5 ),      (( (b[1][0] * b[1][0] * c2 + b[1][0] * b[1][0] * c3)+ ((b[1][0] * b[1][0] + b[1][1] * b[1][1] + b[1][2] * b[1][2]) * c3) ) * 0.5 + ( (b[1][0] * b[2][0] * c2 + b[1][0] * b[2][0] * c3)+ ((b[1][0] * b[2][0] + b[1][1] * b[2][1] + b[1][2] * b[2][2]) * c3) ) * 1.0 ),      (( (b[1][0] * b[1][1] * c2 + b[1][1] * b[1][0] * c3) ) * 0.5 + ( (b[1][0] * b[2][1] * c2 + b[1][1] * b[2][0] * c3) ) * 1.0 ),      (( (b[1][0] * b[1][2] * c2 + b[1][2] * b[1][0] * c3) ) * 0.5 + ( (b[1][0] * b[2][2] * c2 + b[1][2] * b[2][0] * c3) ) * 1.0 ),      (( (b[1][0] * b[0][0] * c2 + b[1][0] * b[0][0] * c3)+ ((b[1][0] * b[0][0] + b[1][1] * b[0][1] + b[1][2] * b[0][2]) * c3) ) * 0.5 + ( (b[1][0] * b[2][0] * c2 + b[1][0] * b[2][0] * c3)+ ((b[1][0] * b[2][0] + b[1][1] * b[2][1] + b[1][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[1][0] * b[0][1] * c2 + b[1][1] * b[0][0] * c3) ) * 0.5 + ( (b[1][0] * b[2][1] * c2 + b[1][1] * b[2][0] * c3) ) * 0.5 ),      (( (b[1][0] * b[0][2] * c2 + b[1][2] * b[0][0] * c3) ) * 0.5 + ( (b[1][0] * b[2][2] * c2 + b[1][2] * b[2][0] * c3) ) * 0.5 ),      (( (b[1][0] * b[0][0] * c2 + b[1][0] * b[0][0] * c3)+ ((b[1][0] * b[0][0] + b[1][1] * b[0][1] + b[1][2] * b[0][2]) * c3) ) * 0.5 + ( (b[1][0] * b[3][0] * c2 + b[1][0] * b[3][0] * c3)+ ((b[1][0] * b[3][0] + b[1][1] * b[3][1] + b[1][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[1][0] * b[0][1] * c2 + b[1][1] * b[0][0] * c3) ) * 0.5 + ( (b[1][0] * b[3][1] * c2 + b[1][1] * b[3][0] * c3) ) * 0.5 ),      (( (b[1][0] * b[0][2] * c2 + b[1][2] * b[0][0] * c3) ) * 0.5 + ( (b[1][0] * b[3][2] * c2 + b[1][2] * b[3][0] * c3) ) * 0.5 ),      (( (b[1][0] * b[1][0] * c2 + b[1][0] * b[1][0] * c3)+ ((b[1][0] * b[1][0] + b[1][1] * b[1][1] + b[1][2] * b[1][2]) * c3) ) * 0.5 + ( (b[1][0] * b[3][0] * c2 + b[1][0] * b[3][0] * c3)+ ((b[1][0] * b[3][0] + b[1][1] * b[3][1] + b[1][2] * b[3][2]) * c3) ) * 1.0 ),      (( (b[1][0] * b[1][1] * c2 + b[1][1] * b[1][0] * c3) ) * 0.5 + ( (b[1][0] * b[3][1] * c2 + b[1][1] * b[3][0] * c3) ) * 1.0 ),      (( (b[1][0] * b[1][2] * c2 + b[1][2] * b[1][0] * c3) ) * 0.5 + ( (b[1][0] * b[3][2] * c2 + b[1][2] * b[3][0] * c3) ) * 1.0 ),      (( (b[1][0] * b[2][0] * c2 + b[1][0] * b[2][0] * c3)+ ((b[1][0] * b[2][0] + b[1][1] * b[2][1] + b[1][2] * b[2][2]) * c3) ) * 0.5 + ( (b[1][0] * b[3][0] * c2 + b[1][0] * b[3][0] * c3)+ ((b[1][0] * b[3][0] + b[1][1] * b[3][1] + b[1][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[1][0] * b[2][1] * c2 + b[1][1] * b[2][0] * c3) ) * 0.5 + ( (b[1][0] * b[3][1] * c2 + b[1][1] * b[3][0] * c3) ) * 0.5 ),      (( (b[1][0] * b[2][2] * c2 + b[1][2] * b[2][0] * c3) ) * 0.5 + ( (b[1][0] * b[3][2] * c2 + b[1][2] * b[3][0] * c3) ) * 0.5 )},
{ (( (b[1][1] * b[0][0] * c2 + b[1][0] * b[0][1] * c3) ) * 0.5 ),      (( (b[1][1] * b[0][1] * c2 + b[1][1] * b[0][1] * c3)+ ((b[1][0] * b[0][0] + b[1][1] * b[0][1] + b[1][2] * b[0][2]) * c3) ) * 0.5 ),      (( (b[1][1] * b[0][2] * c2 + b[1][2] * b[0][1] * c3) ) * 0.5 ),      (( (b[1][1] * b[1][0] * c2 + b[1][0] * b[1][1] * c3) ) * 1.0 ),      (( (b[1][1] * b[1][1] * c2 + b[1][1] * b[1][1] * c3)+ ((b[1][0] * b[1][0] + b[1][1] * b[1][1] + b[1][2] * b[1][2]) * c3) ) * 1.0 ),      (( (b[1][1] * b[1][2] * c2 + b[1][2] * b[1][1] * c3) ) * 1.0 ),      (( (b[1][1] * b[2][0] * c2 + b[1][0] * b[2][1] * c3) ) * 0.5 ),      (( (b[1][1] * b[2][1] * c2 + b[1][1] * b[2][1] * c3)+ ((b[1][0] * b[2][0] + b[1][1] * b[2][1] + b[1][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[1][1] * b[2][2] * c2 + b[1][2] * b[2][1] * c3) ) * 0.5 ),      (( (b[1][1] * b[3][0] * c2 + b[1][0] * b[3][1] * c3) ) * 0.5 ),      (( (b[1][1] * b[3][1] * c2 + b[1][1] * b[3][1] * c3)+ ((b[1][0] * b[3][0] + b[1][1] * b[3][1] + b[1][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[1][1] * b[3][2] * c2 + b[1][2] * b[3][1] * c3) ) * 0.5 ),      (( (b[1][1] * b[0][0] * c2 + b[1][0] * b[0][1] * c3) ) * 1.0 + ( (b[1][1] * b[1][0] * c2 + b[1][0] * b[1][1] * c3) ) * 0.5 ),      (( (b[1][1] * b[0][1] * c2 + b[1][1] * b[0][1] * c3)+ ((b[1][0] * b[0][0] + b[1][1] * b[0][1] + b[1][2] * b[0][2]) * c3) ) * 1.0 + ( (b[1][1] * b[1][1] * c2 + b[1][1] * b[1][1] * c3)+ ((b[1][0] * b[1][0] + b[1][1] * b[1][1] + b[1][2] * b[1][2]) * c3) ) * 0.5 ),      (( (b[1][1] * b[0][2] * c2 + b[1][2] * b[0][1] * c3) ) * 1.0 + ( (b[1][1] * b[1][2] * c2 + b[1][2] * b[1][1] * c3) ) * 0.5 ),      (( (b[1][1] * b[1][0] * c2 + b[1][0] * b[1][1] * c3) ) * 0.5 + ( (b[1][1] * b[2][0] * c2 + b[1][0] * b[2][1] * c3) ) * 1.0 ),      (( (b[1][1] * b[1][1] * c2 + b[1][1] * b[1][1] * c3)+ ((b[1][0] * b[1][0] + b[1][1] * b[1][1] + b[1][2] * b[1][2]) * c3) ) * 0.5 + ( (b[1][1] * b[2][1] * c2 + b[1][1] * b[2][1] * c3)+ ((b[1][0] * b[2][0] + b[1][1] * b[2][1] + b[1][2] * b[2][2]) * c3) ) * 1.0 ),      (( (b[1][1] * b[1][2] * c2 + b[1][2] * b[1][1] * c3) ) * 0.5 + ( (b[1][1] * b[2][2] * c2 + b[1][2] * b[2][1] * c3) ) * 1.0 ),      (( (b[1][1] * b[0][0] * c2 + b[1][0] * b[0][1] * c3) ) * 0.5 + ( (b[1][1] * b[2][0] * c2 + b[1][0] * b[2][1] * c3) ) * 0.5 ),      (( (b[1][1] * b[0][1] * c2 + b[1][1] * b[0][1] * c3)+ ((b[1][0] * b[0][0] + b[1][1] * b[0][1] + b[1][2] * b[0][2]) * c3) ) * 0.5 + ( (b[1][1] * b[2][1] * c2 + b[1][1] * b[2][1] * c3)+ ((b[1][0] * b[2][0] + b[1][1] * b[2][1] + b[1][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[1][1] * b[0][2] * c2 + b[1][2] * b[0][1] * c3) ) * 0.5 + ( (b[1][1] * b[2][2] * c2 + b[1][2] * b[2][1] * c3) ) * 0.5 ),      (( (b[1][1] * b[0][0] * c2 + b[1][0] * b[0][1] * c3) ) * 0.5 + ( (b[1][1] * b[3][0] * c2 + b[1][0] * b[3][1] * c3) ) * 0.5 ),      (( (b[1][1] * b[0][1] * c2 + b[1][1] * b[0][1] * c3)+ ((b[1][0] * b[0][0] + b[1][1] * b[0][1] + b[1][2] * b[0][2]) * c3) ) * 0.5 + ( (b[1][1] * b[3][1] * c2 + b[1][1] * b[3][1] * c3)+ ((b[1][0] * b[3][0] + b[1][1] * b[3][1] + b[1][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[1][1] * b[0][2] * c2 + b[1][2] * b[0][1] * c3) ) * 0.5 + ( (b[1][1] * b[3][2] * c2 + b[1][2] * b[3][1] * c3) ) * 0.5 ),      (( (b[1][1] * b[1][0] * c2 + b[1][0] * b[1][1] * c3) ) * 0.5 + ( (b[1][1] * b[3][0] * c2 + b[1][0] * b[3][1] * c3) ) * 1.0 ),      (( (b[1][1] * b[1][1] * c2 + b[1][1] * b[1][1] * c3)+ ((b[1][0] * b[1][0] + b[1][1] * b[1][1] + b[1][2] * b[1][2]) * c3) ) * 0.5 + ( (b[1][1] * b[3][1] * c2 + b[1][1] * b[3][1] * c3)+ ((b[1][0] * b[3][0] + b[1][1] * b[3][1] + b[1][2] * b[3][2]) * c3) ) * 1.0 ),      (( (b[1][1] * b[1][2] * c2 + b[1][2] * b[1][1] * c3) ) * 0.5 + ( (b[1][1] * b[3][2] * c2 + b[1][2] * b[3][1] * c3) ) * 1.0 ),      (( (b[1][1] * b[2][0] * c2 + b[1][0] * b[2][1] * c3) ) * 0.5 + ( (b[1][1] * b[3][0] * c2 + b[1][0] * b[3][1] * c3) ) * 0.5 ),      (( (b[1][1] * b[2][1] * c2 + b[1][1] * b[2][1] * c3)+ ((b[1][0] * b[2][0] + b[1][1] * b[2][1] + b[1][2] * b[2][2]) * c3) ) * 0.5 + ( (b[1][1] * b[3][1] * c2 + b[1][1] * b[3][1] * c3)+ ((b[1][0] * b[3][0] + b[1][1] * b[3][1] + b[1][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[1][1] * b[2][2] * c2 + b[1][2] * b[2][1] * c3) ) * 0.5 + ( (b[1][1] * b[3][2] * c2 + b[1][2] * b[3][1] * c3) ) * 0.5 )},
{ (( (b[1][2] * b[0][0] * c2 + b[1][0] * b[0][2] * c3) ) * 0.5 ),      (( (b[1][2] * b[0][1] * c2 + b[1][1] * b[0][2] * c3) ) * 0.5 ),      (( (b[1][2] * b[0][2] * c2 + b[1][2] * b[0][2] * c3)+ ((b[1][0] * b[0][0] + b[1][1] * b[0][1] + b[1][2] * b[0][2]) * c3) ) * 0.5 ),      (( (b[1][2] * b[1][0] * c2 + b[1][0] * b[1][2] * c3) ) * 1.0 ),      (( (b[1][2] * b[1][1] * c2 + b[1][1] * b[1][2] * c3) ) * 1.0 ),      (( (b[1][2] * b[1][2] * c2 + b[1][2] * b[1][2] * c3)+ ((b[1][0] * b[1][0] + b[1][1] * b[1][1] + b[1][2] * b[1][2]) * c3) ) * 1.0 ),      (( (b[1][2] * b[2][0] * c2 + b[1][0] * b[2][2] * c3) ) * 0.5 ),      (( (b[1][2] * b[2][1] * c2 + b[1][1] * b[2][2] * c3) ) * 0.5 ),      (( (b[1][2] * b[2][2] * c2 + b[1][2] * b[2][2] * c3)+ ((b[1][0] * b[2][0] + b[1][1] * b[2][1] + b[1][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[1][2] * b[3][0] * c2 + b[1][0] * b[3][2] * c3) ) * 0.5 ),      (( (b[1][2] * b[3][1] * c2 + b[1][1] * b[3][2] * c3) ) * 0.5 ),      (( (b[1][2] * b[3][2] * c2 + b[1][2] * b[3][2] * c3)+ ((b[1][0] * b[3][0] + b[1][1] * b[3][1] + b[1][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[1][2] * b[0][0] * c2 + b[1][0] * b[0][2] * c3) ) * 1.0 + ( (b[1][2] * b[1][0] * c2 + b[1][0] * b[1][2] * c3) ) * 0.5 ),      (( (b[1][2] * b[0][1] * c2 + b[1][1] * b[0][2] * c3) ) * 1.0 + ( (b[1][2] * b[1][1] * c2 + b[1][1] * b[1][2] * c3) ) * 0.5 ),      (( (b[1][2] * b[0][2] * c2 + b[1][2] * b[0][2] * c3)+ ((b[1][0] * b[0][0] + b[1][1] * b[0][1] + b[1][2] * b[0][2]) * c3) ) * 1.0 + ( (b[1][2] * b[1][2] * c2 + b[1][2] * b[1][2] * c3)+ ((b[1][0] * b[1][0] + b[1][1] * b[1][1] + b[1][2] * b[1][2]) * c3) ) * 0.5 ),      (( (b[1][2] * b[1][0] * c2 + b[1][0] * b[1][2] * c3) ) * 0.5 + ( (b[1][2] * b[2][0] * c2 + b[1][0] * b[2][2] * c3) ) * 1.0 ),      (( (b[1][2] * b[1][1] * c2 + b[1][1] * b[1][2] * c3) ) * 0.5 + ( (b[1][2] * b[2][1] * c2 + b[1][1] * b[2][2] * c3) ) * 1.0 ),      (( (b[1][2] * b[1][2] * c2 + b[1][2] * b[1][2] * c3)+ ((b[1][0] * b[1][0] + b[1][1] * b[1][1] + b[1][2] * b[1][2]) * c3) ) * 0.5 + ( (b[1][2] * b[2][2] * c2 + b[1][2] * b[2][2] * c3)+ ((b[1][0] * b[2][0] + b[1][1] * b[2][1] + b[1][2] * b[2][2]) * c3) ) * 1.0 ),      (( (b[1][2] * b[0][0] * c2 + b[1][0] * b[0][2] * c3) ) * 0.5 + ( (b[1][2] * b[2][0] * c2 + b[1][0] * b[2][2] * c3) ) * 0.5 ),      (( (b[1][2] * b[0][1] * c2 + b[1][1] * b[0][2] * c3) ) * 0.5 + ( (b[1][2] * b[2][1] * c2 + b[1][1] * b[2][2] * c3) ) * 0.5 ),      (( (b[1][2] * b[0][2] * c2 + b[1][2] * b[0][2] * c3)+ ((b[1][0] * b[0][0] + b[1][1] * b[0][1] + b[1][2] * b[0][2]) * c3) ) * 0.5 + ( (b[1][2] * b[2][2] * c2 + b[1][2] * b[2][2] * c3)+ ((b[1][0] * b[2][0] + b[1][1] * b[2][1] + b[1][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[1][2] * b[0][0] * c2 + b[1][0] * b[0][2] * c3) ) * 0.5 + ( (b[1][2] * b[3][0] * c2 + b[1][0] * b[3][2] * c3) ) * 0.5 ),      (( (b[1][2] * b[0][1] * c2 + b[1][1] * b[0][2] * c3) ) * 0.5 + ( (b[1][2] * b[3][1] * c2 + b[1][1] * b[3][2] * c3) ) * 0.5 ),      (( (b[1][2] * b[0][2] * c2 + b[1][2] * b[0][2] * c3)+ ((b[1][0] * b[0][0] + b[1][1] * b[0][1] + b[1][2] * b[0][2]) * c3) ) * 0.5 + ( (b[1][2] * b[3][2] * c2 + b[1][2] * b[3][2] * c3)+ ((b[1][0] * b[3][0] + b[1][1] * b[3][1] + b[1][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[1][2] * b[1][0] * c2 + b[1][0] * b[1][2] * c3) ) * 0.5 + ( (b[1][2] * b[3][0] * c2 + b[1][0] * b[3][2] * c3) ) * 1.0 ),      (( (b[1][2] * b[1][1] * c2 + b[1][1] * b[1][2] * c3) ) * 0.5 + ( (b[1][2] * b[3][1] * c2 + b[1][1] * b[3][2] * c3) ) * 1.0 ),      (( (b[1][2] * b[1][2] * c2 + b[1][2] * b[1][2] * c3)+ ((b[1][0] * b[1][0] + b[1][1] * b[1][1] + b[1][2] * b[1][2]) * c3) ) * 0.5 + ( (b[1][2] * b[3][2] * c2 + b[1][2] * b[3][2] * c3)+ ((b[1][0] * b[3][0] + b[1][1] * b[3][1] + b[1][2] * b[3][2]) * c3) ) * 1.0 ),      (( (b[1][2] * b[2][0] * c2 + b[1][0] * b[2][2] * c3) ) * 0.5 + ( (b[1][2] * b[3][0] * c2 + b[1][0] * b[3][2] * c3) ) * 0.5 ),      (( (b[1][2] * b[2][1] * c2 + b[1][1] * b[2][2] * c3) ) * 0.5 + ( (b[1][2] * b[3][1] * c2 + b[1][1] * b[3][2] * c3) ) * 0.5 ),      (( (b[1][2] * b[2][2] * c2 + b[1][2] * b[2][2] * c3)+ ((b[1][0] * b[2][0] + b[1][1] * b[2][1] + b[1][2] * b[2][2]) * c3) ) * 0.5 + ( (b[1][2] * b[3][2] * c2 + b[1][2] * b[3][2] * c3)+ ((b[1][0] * b[3][0] + b[1][1] * b[3][1] + b[1][2] * b[3][2]) * c3) ) * 0.5 )},
{ (( (b[2][0] * b[0][0] * c2 + b[2][0] * b[0][0] * c3)+ ((b[2][0] * b[0][0] + b[2][1] * b[0][1] + b[2][2] * b[0][2]) * c3) ) * 0.5 ),      (( (b[2][0] * b[0][1] * c2 + b[2][1] * b[0][0] * c3) ) * 0.5 ),      (( (b[2][0] * b[0][2] * c2 + b[2][2] * b[0][0] * c3) ) * 0.5 ),      (( (b[2][0] * b[1][0] * c2 + b[2][0] * b[1][0] * c3)+ ((b[2][0] * b[1][0] + b[2][1] * b[1][1] + b[2][2] * b[1][2]) * c3) ) * 0.5 ),      (( (b[2][0] * b[1][1] * c2 + b[2][1] * b[1][0] * c3) ) * 0.5 ),      (( (b[2][0] * b[1][2] * c2 + b[2][2] * b[1][0] * c3) ) * 0.5 ),      (( (b[2][0] * b[2][0] * c2 + b[2][0] * b[2][0] * c3)+ ((b[2][0] * b[2][0] + b[2][1] * b[2][1] + b[2][2] * b[2][2]) * c3) ) * 1.0 ),      (( (b[2][0] * b[2][1] * c2 + b[2][1] * b[2][0] * c3) ) * 1.0 ),      (( (b[2][0] * b[2][2] * c2 + b[2][2] * b[2][0] * c3) ) * 1.0 ),      (( (b[2][0] * b[3][0] * c2 + b[2][0] * b[3][0] * c3)+ ((b[2][0] * b[3][0] + b[2][1] * b[3][1] + b[2][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[2][0] * b[3][1] * c2 + b[2][1] * b[3][0] * c3) ) * 0.5 ),      (( (b[2][0] * b[3][2] * c2 + b[2][2] * b[3][0] * c3) ) * 0.5 ),      (( (b[2][0] * b[0][0] * c2 + b[2][0] * b[0][0] * c3)+ ((b[2][0] * b[0][0] + b[2][1] * b[0][1] + b[2][2] * b[0][2]) * c3) ) * 0.5 + ( (b[2][0] * b[1][0] * c2 + b[2][0] * b[1][0] * c3)+ ((b[2][0] * b[1][0] + b[2][1] * b[1][1] + b[2][2] * b[1][2]) * c3) ) * 0.5 ),      (( (b[2][0] * b[0][1] * c2 + b[2][1] * b[0][0] * c3) ) * 0.5 + ( (b[2][0] * b[1][1] * c2 + b[2][1] * b[1][0] * c3) ) * 0.5 ),      (( (b[2][0] * b[0][2] * c2 + b[2][2] * b[0][0] * c3) ) * 0.5 + ( (b[2][0] * b[1][2] * c2 + b[2][2] * b[1][0] * c3) ) * 0.5 ),      (( (b[2][0] * b[1][0] * c2 + b[2][0] * b[1][0] * c3)+ ((b[2][0] * b[1][0] + b[2][1] * b[1][1] + b[2][2] * b[1][2]) * c3) ) * 1.0 + ( (b[2][0] * b[2][0] * c2 + b[2][0] * b[2][0] * c3)+ ((b[2][0] * b[2][0] + b[2][1] * b[2][1] + b[2][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[2][0] * b[1][1] * c2 + b[2][1] * b[1][0] * c3) ) * 1.0 + ( (b[2][0] * b[2][1] * c2 + b[2][1] * b[2][0] * c3) ) * 0.5 ),      (( (b[2][0] * b[1][2] * c2 + b[2][2] * b[1][0] * c3) ) * 1.0 + ( (b[2][0] * b[2][2] * c2 + b[2][2] * b[2][0] * c3) ) * 0.5 ),      (( (b[2][0] * b[0][0] * c2 + b[2][0] * b[0][0] * c3)+ ((b[2][0] * b[0][0] + b[2][1] * b[0][1] + b[2][2] * b[0][2]) * c3) ) * 1.0 + ( (b[2][0] * b[2][0] * c2 + b[2][0] * b[2][0] * c3)+ ((b[2][0] * b[2][0] + b[2][1] * b[2][1] + b[2][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[2][0] * b[0][1] * c2 + b[2][1] * b[0][0] * c3) ) * 1.0 + ( (b[2][0] * b[2][1] * c2 + b[2][1] * b[2][0] * c3) ) * 0.5 ),      (( (b[2][0] * b[0][2] * c2 + b[2][2] * b[0][0] * c3) ) * 1.0 + ( (b[2][0] * b[2][2] * c2 + b[2][2] * b[2][0] * c3) ) * 0.5 ),      (( (b[2][0] * b[0][0] * c2 + b[2][0] * b[0][0] * c3)+ ((b[2][0] * b[0][0] + b[2][1] * b[0][1] + b[2][2] * b[0][2]) * c3) ) * 0.5 + ( (b[2][0] * b[3][0] * c2 + b[2][0] * b[3][0] * c3)+ ((b[2][0] * b[3][0] + b[2][1] * b[3][1] + b[2][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[2][0] * b[0][1] * c2 + b[2][1] * b[0][0] * c3) ) * 0.5 + ( (b[2][0] * b[3][1] * c2 + b[2][1] * b[3][0] * c3) ) * 0.5 ),      (( (b[2][0] * b[0][2] * c2 + b[2][2] * b[0][0] * c3) ) * 0.5 + ( (b[2][0] * b[3][2] * c2 + b[2][2] * b[3][0] * c3) ) * 0.5 ),      (( (b[2][0] * b[1][0] * c2 + b[2][0] * b[1][0] * c3)+ ((b[2][0] * b[1][0] + b[2][1] * b[1][1] + b[2][2] * b[1][2]) * c3) ) * 0.5 + ( (b[2][0] * b[3][0] * c2 + b[2][0] * b[3][0] * c3)+ ((b[2][0] * b[3][0] + b[2][1] * b[3][1] + b[2][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[2][0] * b[1][1] * c2 + b[2][1] * b[1][0] * c3) ) * 0.5 + ( (b[2][0] * b[3][1] * c2 + b[2][1] * b[3][0] * c3) ) * 0.5 ),      (( (b[2][0] * b[1][2] * c2 + b[2][2] * b[1][0] * c3) ) * 0.5 + ( (b[2][0] * b[3][2] * c2 + b[2][2] * b[3][0] * c3) ) * 0.5 ),      (( (b[2][0] * b[2][0] * c2 + b[2][0] * b[2][0] * c3)+ ((b[2][0] * b[2][0] + b[2][1] * b[2][1] + b[2][2] * b[2][2]) * c3) ) * 0.5 + ( (b[2][0] * b[3][0] * c2 + b[2][0] * b[3][0] * c3)+ ((b[2][0] * b[3][0] + b[2][1] * b[3][1] + b[2][2] * b[3][2]) * c3) ) * 1.0 ),      (( (b[2][0] * b[2][1] * c2 + b[2][1] * b[2][0] * c3) ) * 0.5 + ( (b[2][0] * b[3][1] * c2 + b[2][1] * b[3][0] * c3) ) * 1.0 ),      (( (b[2][0] * b[2][2] * c2 + b[2][2] * b[2][0] * c3) ) * 0.5 + ( (b[2][0] * b[3][2] * c2 + b[2][2] * b[3][0] * c3) ) * 1.0 )},
{ (( (b[2][1] * b[0][0] * c2 + b[2][0] * b[0][1] * c3) ) * 0.5 ),      (( (b[2][1] * b[0][1] * c2 + b[2][1] * b[0][1] * c3)+ ((b[2][0] * b[0][0] + b[2][1] * b[0][1] + b[2][2] * b[0][2]) * c3) ) * 0.5 ),      (( (b[2][1] * b[0][2] * c2 + b[2][2] * b[0][1] * c3) ) * 0.5 ),      (( (b[2][1] * b[1][0] * c2 + b[2][0] * b[1][1] * c3) ) * 0.5 ),      (( (b[2][1] * b[1][1] * c2 + b[2][1] * b[1][1] * c3)+ ((b[2][0] * b[1][0] + b[2][1] * b[1][1] + b[2][2] * b[1][2]) * c3) ) * 0.5 ),      (( (b[2][1] * b[1][2] * c2 + b[2][2] * b[1][1] * c3) ) * 0.5 ),      (( (b[2][1] * b[2][0] * c2 + b[2][0] * b[2][1] * c3) ) * 1.0 ),      (( (b[2][1] * b[2][1] * c2 + b[2][1] * b[2][1] * c3)+ ((b[2][0] * b[2][0] + b[2][1] * b[2][1] + b[2][2] * b[2][2]) * c3) ) * 1.0 ),      (( (b[2][1] * b[2][2] * c2 + b[2][2] * b[2][1] * c3) ) * 1.0 ),      (( (b[2][1] * b[3][0] * c2 + b[2][0] * b[3][1] * c3) ) * 0.5 ),      (( (b[2][1] * b[3][1] * c2 + b[2][1] * b[3][1] * c3)+ ((b[2][0] * b[3][0] + b[2][1] * b[3][1] + b[2][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[2][1] * b[3][2] * c2 + b[2][2] * b[3][1] * c3) ) * 0.5 ),      (( (b[2][1] * b[0][0] * c2 + b[2][0] * b[0][1] * c3) ) * 0.5 + ( (b[2][1] * b[1][0] * c2 + b[2][0] * b[1][1] * c3) ) * 0.5 ),      (( (b[2][1] * b[0][1] * c2 + b[2][1] * b[0][1] * c3)+ ((b[2][0] * b[0][0] + b[2][1] * b[0][1] + b[2][2] * b[0][2]) * c3) ) * 0.5 + ( (b[2][1] * b[1][1] * c2 + b[2][1] * b[1][1] * c3)+ ((b[2][0] * b[1][0] + b[2][1] * b[1][1] + b[2][2] * b[1][2]) * c3) ) * 0.5 ),      (( (b[2][1] * b[0][2] * c2 + b[2][2] * b[0][1] * c3) ) * 0.5 + ( (b[2][1] * b[1][2] * c2 + b[2][2] * b[1][1] * c3) ) * 0.5 ),      (( (b[2][1] * b[1][0] * c2 + b[2][0] * b[1][1] * c3) ) * 1.0 + ( (b[2][1] * b[2][0] * c2 + b[2][0] * b[2][1] * c3) ) * 0.5 ),      (( (b[2][1] * b[1][1] * c2 + b[2][1] * b[1][1] * c3)+ ((b[2][0] * b[1][0] + b[2][1] * b[1][1] + b[2][2] * b[1][2]) * c3) ) * 1.0 + ( (b[2][1] * b[2][1] * c2 + b[2][1] * b[2][1] * c3)+ ((b[2][0] * b[2][0] + b[2][1] * b[2][1] + b[2][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[2][1] * b[1][2] * c2 + b[2][2] * b[1][1] * c3) ) * 1.0 + ( (b[2][1] * b[2][2] * c2 + b[2][2] * b[2][1] * c3) ) * 0.5 ),      (( (b[2][1] * b[0][0] * c2 + b[2][0] * b[0][1] * c3) ) * 1.0 + ( (b[2][1] * b[2][0] * c2 + b[2][0] * b[2][1] * c3) ) * 0.5 ),      (( (b[2][1] * b[0][1] * c2 + b[2][1] * b[0][1] * c3)+ ((b[2][0] * b[0][0] + b[2][1] * b[0][1] + b[2][2] * b[0][2]) * c3) ) * 1.0 + ( (b[2][1] * b[2][1] * c2 + b[2][1] * b[2][1] * c3)+ ((b[2][0] * b[2][0] + b[2][1] * b[2][1] + b[2][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[2][1] * b[0][2] * c2 + b[2][2] * b[0][1] * c3) ) * 1.0 + ( (b[2][1] * b[2][2] * c2 + b[2][2] * b[2][1] * c3) ) * 0.5 ),      (( (b[2][1] * b[0][0] * c2 + b[2][0] * b[0][1] * c3) ) * 0.5 + ( (b[2][1] * b[3][0] * c2 + b[2][0] * b[3][1] * c3) ) * 0.5 ),      (( (b[2][1] * b[0][1] * c2 + b[2][1] * b[0][1] * c3)+ ((b[2][0] * b[0][0] + b[2][1] * b[0][1] + b[2][2] * b[0][2]) * c3) ) * 0.5 + ( (b[2][1] * b[3][1] * c2 + b[2][1] * b[3][1] * c3)+ ((b[2][0] * b[3][0] + b[2][1] * b[3][1] + b[2][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[2][1] * b[0][2] * c2 + b[2][2] * b[0][1] * c3) ) * 0.5 + ( (b[2][1] * b[3][2] * c2 + b[2][2] * b[3][1] * c3) ) * 0.5 ),      (( (b[2][1] * b[1][0] * c2 + b[2][0] * b[1][1] * c3) ) * 0.5 + ( (b[2][1] * b[3][0] * c2 + b[2][0] * b[3][1] * c3) ) * 0.5 ),      (( (b[2][1] * b[1][1] * c2 + b[2][1] * b[1][1] * c3)+ ((b[2][0] * b[1][0] + b[2][1] * b[1][1] + b[2][2] * b[1][2]) * c3) ) * 0.5 + ( (b[2][1] * b[3][1] * c2 + b[2][1] * b[3][1] * c3)+ ((b[2][0] * b[3][0] + b[2][1] * b[3][1] + b[2][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[2][1] * b[1][2] * c2 + b[2][2] * b[1][1] * c3) ) * 0.5 + ( (b[2][1] * b[3][2] * c2 + b[2][2] * b[3][1] * c3) ) * 0.5 ),      (( (b[2][1] * b[2][0] * c2 + b[2][0] * b[2][1] * c3) ) * 0.5 + ( (b[2][1] * b[3][0] * c2 + b[2][0] * b[3][1] * c3) ) * 1.0 ),      (( (b[2][1] * b[2][1] * c2 + b[2][1] * b[2][1] * c3)+ ((b[2][0] * b[2][0] + b[2][1] * b[2][1] + b[2][2] * b[2][2]) * c3) ) * 0.5 + ( (b[2][1] * b[3][1] * c2 + b[2][1] * b[3][1] * c3)+ ((b[2][0] * b[3][0] + b[2][1] * b[3][1] + b[2][2] * b[3][2]) * c3) ) * 1.0 ),      (( (b[2][1] * b[2][2] * c2 + b[2][2] * b[2][1] * c3) ) * 0.5 + ( (b[2][1] * b[3][2] * c2 + b[2][2] * b[3][1] * c3) ) * 1.0 )},
{ (( (b[2][2] * b[0][0] * c2 + b[2][0] * b[0][2] * c3) ) * 0.5 ),      (( (b[2][2] * b[0][1] * c2 + b[2][1] * b[0][2] * c3) ) * 0.5 ),      (( (b[2][2] * b[0][2] * c2 + b[2][2] * b[0][2] * c3)+ ((b[2][0] * b[0][0] + b[2][1] * b[0][1] + b[2][2] * b[0][2]) * c3) ) * 0.5 ),      (( (b[2][2] * b[1][0] * c2 + b[2][0] * b[1][2] * c3) ) * 0.5 ),      (( (b[2][2] * b[1][1] * c2 + b[2][1] * b[1][2] * c3) ) * 0.5 ),      (( (b[2][2] * b[1][2] * c2 + b[2][2] * b[1][2] * c3)+ ((b[2][0] * b[1][0] + b[2][1] * b[1][1] + b[2][2] * b[1][2]) * c3) ) * 0.5 ),      (( (b[2][2] * b[2][0] * c2 + b[2][0] * b[2][2] * c3) ) * 1.0 ),      (( (b[2][2] * b[2][1] * c2 + b[2][1] * b[2][2] * c3) ) * 1.0 ),      (( (b[2][2] * b[2][2] * c2 + b[2][2] * b[2][2] * c3)+ ((b[2][0] * b[2][0] + b[2][1] * b[2][1] + b[2][2] * b[2][2]) * c3) ) * 1.0 ),      (( (b[2][2] * b[3][0] * c2 + b[2][0] * b[3][2] * c3) ) * 0.5 ),      (( (b[2][2] * b[3][1] * c2 + b[2][1] * b[3][2] * c3) ) * 0.5 ),      (( (b[2][2] * b[3][2] * c2 + b[2][2] * b[3][2] * c3)+ ((b[2][0] * b[3][0] + b[2][1] * b[3][1] + b[2][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[2][2] * b[0][0] * c2 + b[2][0] * b[0][2] * c3) ) * 0.5 + ( (b[2][2] * b[1][0] * c2 + b[2][0] * b[1][2] * c3) ) * 0.5 ),      (( (b[2][2] * b[0][1] * c2 + b[2][1] * b[0][2] * c3) ) * 0.5 + ( (b[2][2] * b[1][1] * c2 + b[2][1] * b[1][2] * c3) ) * 0.5 ),      (( (b[2][2] * b[0][2] * c2 + b[2][2] * b[0][2] * c3)+ ((b[2][0] * b[0][0] + b[2][1] * b[0][1] + b[2][2] * b[0][2]) * c3) ) * 0.5 + ( (b[2][2] * b[1][2] * c2 + b[2][2] * b[1][2] * c3)+ ((b[2][0] * b[1][0] + b[2][1] * b[1][1] + b[2][2] * b[1][2]) * c3) ) * 0.5 ),      (( (b[2][2] * b[1][0] * c2 + b[2][0] * b[1][2] * c3) ) * 1.0 + ( (b[2][2] * b[2][0] * c2 + b[2][0] * b[2][2] * c3) ) * 0.5 ),      (( (b[2][2] * b[1][1] * c2 + b[2][1] * b[1][2] * c3) ) * 1.0 + ( (b[2][2] * b[2][1] * c2 + b[2][1] * b[2][2] * c3) ) * 0.5 ),      (( (b[2][2] * b[1][2] * c2 + b[2][2] * b[1][2] * c3)+ ((b[2][0] * b[1][0] + b[2][1] * b[1][1] + b[2][2] * b[1][2]) * c3) ) * 1.0 + ( (b[2][2] * b[2][2] * c2 + b[2][2] * b[2][2] * c3)+ ((b[2][0] * b[2][0] + b[2][1] * b[2][1] + b[2][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[2][2] * b[0][0] * c2 + b[2][0] * b[0][2] * c3) ) * 1.0 + ( (b[2][2] * b[2][0] * c2 + b[2][0] * b[2][2] * c3) ) * 0.5 ),      (( (b[2][2] * b[0][1] * c2 + b[2][1] * b[0][2] * c3) ) * 1.0 + ( (b[2][2] * b[2][1] * c2 + b[2][1] * b[2][2] * c3) ) * 0.5 ),      (( (b[2][2] * b[0][2] * c2 + b[2][2] * b[0][2] * c3)+ ((b[2][0] * b[0][0] + b[2][1] * b[0][1] + b[2][2] * b[0][2]) * c3) ) * 1.0 + ( (b[2][2] * b[2][2] * c2 + b[2][2] * b[2][2] * c3)+ ((b[2][0] * b[2][0] + b[2][1] * b[2][1] + b[2][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[2][2] * b[0][0] * c2 + b[2][0] * b[0][2] * c3) ) * 0.5 + ( (b[2][2] * b[3][0] * c2 + b[2][0] * b[3][2] * c3) ) * 0.5 ),      (( (b[2][2] * b[0][1] * c2 + b[2][1] * b[0][2] * c3) ) * 0.5 + ( (b[2][2] * b[3][1] * c2 + b[2][1] * b[3][2] * c3) ) * 0.5 ),      (( (b[2][2] * b[0][2] * c2 + b[2][2] * b[0][2] * c3)+ ((b[2][0] * b[0][0] + b[2][1] * b[0][1] + b[2][2] * b[0][2]) * c3) ) * 0.5 + ( (b[2][2] * b[3][2] * c2 + b[2][2] * b[3][2] * c3)+ ((b[2][0] * b[3][0] + b[2][1] * b[3][1] + b[2][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[2][2] * b[1][0] * c2 + b[2][0] * b[1][2] * c3) ) * 0.5 + ( (b[2][2] * b[3][0] * c2 + b[2][0] * b[3][2] * c3) ) * 0.5 ),      (( (b[2][2] * b[1][1] * c2 + b[2][1] * b[1][2] * c3) ) * 0.5 + ( (b[2][2] * b[3][1] * c2 + b[2][1] * b[3][2] * c3) ) * 0.5 ),      (( (b[2][2] * b[1][2] * c2 + b[2][2] * b[1][2] * c3)+ ((b[2][0] * b[1][0] + b[2][1] * b[1][1] + b[2][2] * b[1][2]) * c3) ) * 0.5 + ( (b[2][2] * b[3][2] * c2 + b[2][2] * b[3][2] * c3)+ ((b[2][0] * b[3][0] + b[2][1] * b[3][1] + b[2][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[2][2] * b[2][0] * c2 + b[2][0] * b[2][2] * c3) ) * 0.5 + ( (b[2][2] * b[3][0] * c2 + b[2][0] * b[3][2] * c3) ) * 1.0 ),      (( (b[2][2] * b[2][1] * c2 + b[2][1] * b[2][2] * c3) ) * 0.5 + ( (b[2][2] * b[3][1] * c2 + b[2][1] * b[3][2] * c3) ) * 1.0 ),      (( (b[2][2] * b[2][2] * c2 + b[2][2] * b[2][2] * c3)+ ((b[2][0] * b[2][0] + b[2][1] * b[2][1] + b[2][2] * b[2][2]) * c3) ) * 0.5 + ( (b[2][2] * b[3][2] * c2 + b[2][2] * b[3][2] * c3)+ ((b[2][0] * b[3][0] + b[2][1] * b[3][1] + b[2][2] * b[3][2]) * c3) ) * 1.0 )},
{ (( (b[3][0] * b[0][0] * c2 + b[3][0] * b[0][0] * c3)+ ((b[3][0] * b[0][0] + b[3][1] * b[0][1] + b[3][2] * b[0][2]) * c3) ) * 0.5 ),      (( (b[3][0] * b[0][1] * c2 + b[3][1] * b[0][0] * c3) ) * 0.5 ),      (( (b[3][0] * b[0][2] * c2 + b[3][2] * b[0][0] * c3) ) * 0.5 ),      (( (b[3][0] * b[1][0] * c2 + b[3][0] * b[1][0] * c3)+ ((b[3][0] * b[1][0] + b[3][1] * b[1][1] + b[3][2] * b[1][2]) * c3) ) * 0.5 ),      (( (b[3][0] * b[1][1] * c2 + b[3][1] * b[1][0] * c3) ) * 0.5 ),      (( (b[3][0] * b[1][2] * c2 + b[3][2] * b[1][0] * c3) ) * 0.5 ),      (( (b[3][0] * b[2][0] * c2 + b[3][0] * b[2][0] * c3)+ ((b[3][0] * b[2][0] + b[3][1] * b[2][1] + b[3][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[3][0] * b[2][1] * c2 + b[3][1] * b[2][0] * c3) ) * 0.5 ),      (( (b[3][0] * b[2][2] * c2 + b[3][2] * b[2][0] * c3) ) * 0.5 ),      (( (b[3][0] * b[3][0] * c2 + b[3][0] * b[3][0] * c3)+ ((b[3][0] * b[3][0] + b[3][1] * b[3][1] + b[3][2] * b[3][2]) * c3) ) * 1.0 ),      (( (b[3][0] * b[3][1] * c2 + b[3][1] * b[3][0] * c3) ) * 1.0 ),      (( (b[3][0] * b[3][2] * c2 + b[3][2] * b[3][0] * c3) ) * 1.0 ),      (( (b[3][0] * b[0][0] * c2 + b[3][0] * b[0][0] * c3)+ ((b[3][0] * b[0][0] + b[3][1] * b[0][1] + b[3][2] * b[0][2]) * c3) ) * 0.5 + ( (b[3][0] * b[1][0] * c2 + b[3][0] * b[1][0] * c3)+ ((b[3][0] * b[1][0] + b[3][1] * b[1][1] + b[3][2] * b[1][2]) * c3) ) * 0.5 ),      (( (b[3][0] * b[0][1] * c2 + b[3][1] * b[0][0] * c3) ) * 0.5 + ( (b[3][0] * b[1][1] * c2 + b[3][1] * b[1][0] * c3) ) * 0.5 ),      (( (b[3][0] * b[0][2] * c2 + b[3][2] * b[0][0] * c3) ) * 0.5 + ( (b[3][0] * b[1][2] * c2 + b[3][2] * b[1][0] * c3) ) * 0.5 ),      (( (b[3][0] * b[1][0] * c2 + b[3][0] * b[1][0] * c3)+ ((b[3][0] * b[1][0] + b[3][1] * b[1][1] + b[3][2] * b[1][2]) * c3) ) * 0.5 + ( (b[3][0] * b[2][0] * c2 + b[3][0] * b[2][0] * c3)+ ((b[3][0] * b[2][0] + b[3][1] * b[2][1] + b[3][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[3][0] * b[1][1] * c2 + b[3][1] * b[1][0] * c3) ) * 0.5 + ( (b[3][0] * b[2][1] * c2 + b[3][1] * b[2][0] * c3) ) * 0.5 ),      (( (b[3][0] * b[1][2] * c2 + b[3][2] * b[1][0] * c3) ) * 0.5 + ( (b[3][0] * b[2][2] * c2 + b[3][2] * b[2][0] * c3) ) * 0.5 ),      (( (b[3][0] * b[0][0] * c2 + b[3][0] * b[0][0] * c3)+ ((b[3][0] * b[0][0] + b[3][1] * b[0][1] + b[3][2] * b[0][2]) * c3) ) * 0.5 + ( (b[3][0] * b[2][0] * c2 + b[3][0] * b[2][0] * c3)+ ((b[3][0] * b[2][0] + b[3][1] * b[2][1] + b[3][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[3][0] * b[0][1] * c2 + b[3][1] * b[0][0] * c3) ) * 0.5 + ( (b[3][0] * b[2][1] * c2 + b[3][1] * b[2][0] * c3) ) * 0.5 ),      (( (b[3][0] * b[0][2] * c2 + b[3][2] * b[0][0] * c3) ) * 0.5 + ( (b[3][0] * b[2][2] * c2 + b[3][2] * b[2][0] * c3) ) * 0.5 ),      (( (b[3][0] * b[0][0] * c2 + b[3][0] * b[0][0] * c3)+ ((b[3][0] * b[0][0] + b[3][1] * b[0][1] + b[3][2] * b[0][2]) * c3) ) * 1.0 + ( (b[3][0] * b[3][0] * c2 + b[3][0] * b[3][0] * c3)+ ((b[3][0] * b[3][0] + b[3][1] * b[3][1] + b[3][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[3][0] * b[0][1] * c2 + b[3][1] * b[0][0] * c3) ) * 1.0 + ( (b[3][0] * b[3][1] * c2 + b[3][1] * b[3][0] * c3) ) * 0.5 ),      (( (b[3][0] * b[0][2] * c2 + b[3][2] * b[0][0] * c3) ) * 1.0 + ( (b[3][0] * b[3][2] * c2 + b[3][2] * b[3][0] * c3) ) * 0.5 ),      (( (b[3][0] * b[1][0] * c2 + b[3][0] * b[1][0] * c3)+ ((b[3][0] * b[1][0] + b[3][1] * b[1][1] + b[3][2] * b[1][2]) * c3) ) * 1.0 + ( (b[3][0] * b[3][0] * c2 + b[3][0] * b[3][0] * c3)+ ((b[3][0] * b[3][0] + b[3][1] * b[3][1] + b[3][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[3][0] * b[1][1] * c2 + b[3][1] * b[1][0] * c3) ) * 1.0 + ( (b[3][0] * b[3][1] * c2 + b[3][1] * b[3][0] * c3) ) * 0.5 ),      (( (b[3][0] * b[1][2] * c2 + b[3][2] * b[1][0] * c3) ) * 1.0 + ( (b[3][0] * b[3][2] * c2 + b[3][2] * b[3][0] * c3) ) * 0.5 ),      (( (b[3][0] * b[2][0] * c2 + b[3][0] * b[2][0] * c3)+ ((b[3][0] * b[2][0] + b[3][1] * b[2][1] + b[3][2] * b[2][2]) * c3) ) * 1.0 + ( (b[3][0] * b[3][0] * c2 + b[3][0] * b[3][0] * c3)+ ((b[3][0] * b[3][0] + b[3][1] * b[3][1] + b[3][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[3][0] * b[2][1] * c2 + b[3][1] * b[2][0] * c3) ) * 1.0 + ( (b[3][0] * b[3][1] * c2 + b[3][1] * b[3][0] * c3) ) * 0.5 ),      (( (b[3][0] * b[2][2] * c2 + b[3][2] * b[2][0] * c3) ) * 1.0 + ( (b[3][0] * b[3][2] * c2 + b[3][2] * b[3][0] * c3) ) * 0.5 )},
{ (( (b[3][1] * b[0][0] * c2 + b[3][0] * b[0][1] * c3) ) * 0.5 ),      (( (b[3][1] * b[0][1] * c2 + b[3][1] * b[0][1] * c3)+ ((b[3][0] * b[0][0] + b[3][1] * b[0][1] + b[3][2] * b[0][2]) * c3) ) * 0.5 ),      (( (b[3][1] * b[0][2] * c2 + b[3][2] * b[0][1] * c3) ) * 0.5 ),      (( (b[3][1] * b[1][0] * c2 + b[3][0] * b[1][1] * c3) ) * 0.5 ),      (( (b[3][1] * b[1][1] * c2 + b[3][1] * b[1][1] * c3)+ ((b[3][0] * b[1][0] + b[3][1] * b[1][1] + b[3][2] * b[1][2]) * c3) ) * 0.5 ),      (( (b[3][1] * b[1][2] * c2 + b[3][2] * b[1][1] * c3) ) * 0.5 ),      (( (b[3][1] * b[2][0] * c2 + b[3][0] * b[2][1] * c3) ) * 0.5 ),      (( (b[3][1] * b[2][1] * c2 + b[3][1] * b[2][1] * c3)+ ((b[3][0] * b[2][0] + b[3][1] * b[2][1] + b[3][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[3][1] * b[2][2] * c2 + b[3][2] * b[2][1] * c3) ) * 0.5 ),      (( (b[3][1] * b[3][0] * c2 + b[3][0] * b[3][1] * c3) ) * 1.0 ),      (( (b[3][1] * b[3][1] * c2 + b[3][1] * b[3][1] * c3)+ ((b[3][0] * b[3][0] + b[3][1] * b[3][1] + b[3][2] * b[3][2]) * c3) ) * 1.0 ),      (( (b[3][1] * b[3][2] * c2 + b[3][2] * b[3][1] * c3) ) * 1.0 ),      (( (b[3][1] * b[0][0] * c2 + b[3][0] * b[0][1] * c3) ) * 0.5 + ( (b[3][1] * b[1][0] * c2 + b[3][0] * b[1][1] * c3) ) * 0.5 ),      (( (b[3][1] * b[0][1] * c2 + b[3][1] * b[0][1] * c3)+ ((b[3][0] * b[0][0] + b[3][1] * b[0][1] + b[3][2] * b[0][2]) * c3) ) * 0.5 + ( (b[3][1] * b[1][1] * c2 + b[3][1] * b[1][1] * c3)+ ((b[3][0] * b[1][0] + b[3][1] * b[1][1] + b[3][2] * b[1][2]) * c3) ) * 0.5 ),      (( (b[3][1] * b[0][2] * c2 + b[3][2] * b[0][1] * c3) ) * 0.5 + ( (b[3][1] * b[1][2] * c2 + b[3][2] * b[1][1] * c3) ) * 0.5 ),      (( (b[3][1] * b[1][0] * c2 + b[3][0] * b[1][1] * c3) ) * 0.5 + ( (b[3][1] * b[2][0] * c2 + b[3][0] * b[2][1] * c3) ) * 0.5 ),      (( (b[3][1] * b[1][1] * c2 + b[3][1] * b[1][1] * c3)+ ((b[3][0] * b[1][0] + b[3][1] * b[1][1] + b[3][2] * b[1][2]) * c3) ) * 0.5 + ( (b[3][1] * b[2][1] * c2 + b[3][1] * b[2][1] * c3)+ ((b[3][0] * b[2][0] + b[3][1] * b[2][1] + b[3][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[3][1] * b[1][2] * c2 + b[3][2] * b[1][1] * c3) ) * 0.5 + ( (b[3][1] * b[2][2] * c2 + b[3][2] * b[2][1] * c3) ) * 0.5 ),      (( (b[3][1] * b[0][0] * c2 + b[3][0] * b[0][1] * c3) ) * 0.5 + ( (b[3][1] * b[2][0] * c2 + b[3][0] * b[2][1] * c3) ) * 0.5 ),      (( (b[3][1] * b[0][1] * c2 + b[3][1] * b[0][1] * c3)+ ((b[3][0] * b[0][0] + b[3][1] * b[0][1] + b[3][2] * b[0][2]) * c3) ) * 0.5 + ( (b[3][1] * b[2][1] * c2 + b[3][1] * b[2][1] * c3)+ ((b[3][0] * b[2][0] + b[3][1] * b[2][1] + b[3][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[3][1] * b[0][2] * c2 + b[3][2] * b[0][1] * c3) ) * 0.5 + ( (b[3][1] * b[2][2] * c2 + b[3][2] * b[2][1] * c3) ) * 0.5 ),      (( (b[3][1] * b[0][0] * c2 + b[3][0] * b[0][1] * c3) ) * 1.0 + ( (b[3][1] * b[3][0] * c2 + b[3][0] * b[3][1] * c3) ) * 0.5 ),      (( (b[3][1] * b[0][1] * c2 + b[3][1] * b[0][1] * c3)+ ((b[3][0] * b[0][0] + b[3][1] * b[0][1] + b[3][2] * b[0][2]) * c3) ) * 1.0 + ( (b[3][1] * b[3][1] * c2 + b[3][1] * b[3][1] * c3)+ ((b[3][0] * b[3][0] + b[3][1] * b[3][1] + b[3][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[3][1] * b[0][2] * c2 + b[3][2] * b[0][1] * c3) ) * 1.0 + ( (b[3][1] * b[3][2] * c2 + b[3][2] * b[3][1] * c3) ) * 0.5 ),      (( (b[3][1] * b[1][0] * c2 + b[3][0] * b[1][1] * c3) ) * 1.0 + ( (b[3][1] * b[3][0] * c2 + b[3][0] * b[3][1] * c3) ) * 0.5 ),      (( (b[3][1] * b[1][1] * c2 + b[3][1] * b[1][1] * c3)+ ((b[3][0] * b[1][0] + b[3][1] * b[1][1] + b[3][2] * b[1][2]) * c3) ) * 1.0 + ( (b[3][1] * b[3][1] * c2 + b[3][1] * b[3][1] * c3)+ ((b[3][0] * b[3][0] + b[3][1] * b[3][1] + b[3][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[3][1] * b[1][2] * c2 + b[3][2] * b[1][1] * c3) ) * 1.0 + ( (b[3][1] * b[3][2] * c2 + b[3][2] * b[3][1] * c3) ) * 0.5 ),      (( (b[3][1] * b[2][0] * c2 + b[3][0] * b[2][1] * c3) ) * 1.0 + ( (b[3][1] * b[3][0] * c2 + b[3][0] * b[3][1] * c3) ) * 0.5 ),      (( (b[3][1] * b[2][1] * c2 + b[3][1] * b[2][1] * c3)+ ((b[3][0] * b[2][0] + b[3][1] * b[2][1] + b[3][2] * b[2][2]) * c3) ) * 1.0 + ( (b[3][1] * b[3][1] * c2 + b[3][1] * b[3][1] * c3)+ ((b[3][0] * b[3][0] + b[3][1] * b[3][1] + b[3][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[3][1] * b[2][2] * c2 + b[3][2] * b[2][1] * c3) ) * 1.0 + ( (b[3][1] * b[3][2] * c2 + b[3][2] * b[3][1] * c3) ) * 0.5 )},
{ (( (b[3][2] * b[0][0] * c2 + b[3][0] * b[0][2] * c3) ) * 0.5 ),      (( (b[3][2] * b[0][1] * c2 + b[3][1] * b[0][2] * c3) ) * 0.5 ),      (( (b[3][2] * b[0][2] * c2 + b[3][2] * b[0][2] * c3)+ ((b[3][0] * b[0][0] + b[3][1] * b[0][1] + b[3][2] * b[0][2]) * c3) ) * 0.5 ),      (( (b[3][2] * b[1][0] * c2 + b[3][0] * b[1][2] * c3) ) * 0.5 ),      (( (b[3][2] * b[1][1] * c2 + b[3][1] * b[1][2] * c3) ) * 0.5 ),      (( (b[3][2] * b[1][2] * c2 + b[3][2] * b[1][2] * c3)+ ((b[3][0] * b[1][0] + b[3][1] * b[1][1] + b[3][2] * b[1][2]) * c3) ) * 0.5 ),      (( (b[3][2] * b[2][0] * c2 + b[3][0] * b[2][2] * c3) ) * 0.5 ),      (( (b[3][2] * b[2][1] * c2 + b[3][1] * b[2][2] * c3) ) * 0.5 ),      (( (b[3][2] * b[2][2] * c2 + b[3][2] * b[2][2] * c3)+ ((b[3][0] * b[2][0] + b[3][1] * b[2][1] + b[3][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[3][2] * b[3][0] * c2 + b[3][0] * b[3][2] * c3) ) * 1.0 ),      (( (b[3][2] * b[3][1] * c2 + b[3][1] * b[3][2] * c3) ) * 1.0 ),      (( (b[3][2] * b[3][2] * c2 + b[3][2] * b[3][2] * c3)+ ((b[3][0] * b[3][0] + b[3][1] * b[3][1] + b[3][2] * b[3][2]) * c3) ) * 1.0 ),      (( (b[3][2] * b[0][0] * c2 + b[3][0] * b[0][2] * c3) ) * 0.5 + ( (b[3][2] * b[1][0] * c2 + b[3][0] * b[1][2] * c3) ) * 0.5 ),      (( (b[3][2] * b[0][1] * c2 + b[3][1] * b[0][2] * c3) ) * 0.5 + ( (b[3][2] * b[1][1] * c2 + b[3][1] * b[1][2] * c3) ) * 0.5 ),      (( (b[3][2] * b[0][2] * c2 + b[3][2] * b[0][2] * c3)+ ((b[3][0] * b[0][0] + b[3][1] * b[0][1] + b[3][2] * b[0][2]) * c3) ) * 0.5 + ( (b[3][2] * b[1][2] * c2 + b[3][2] * b[1][2] * c3)+ ((b[3][0] * b[1][0] + b[3][1] * b[1][1] + b[3][2] * b[1][2]) * c3) ) * 0.5 ),      (( (b[3][2] * b[1][0] * c2 + b[3][0] * b[1][2] * c3) ) * 0.5 + ( (b[3][2] * b[2][0] * c2 + b[3][0] * b[2][2] * c3) ) * 0.5 ),      (( (b[3][2] * b[1][1] * c2 + b[3][1] * b[1][2] * c3) ) * 0.5 + ( (b[3][2] * b[2][1] * c2 + b[3][1] * b[2][2] * c3) ) * 0.5 ),      (( (b[3][2] * b[1][2] * c2 + b[3][2] * b[1][2] * c3)+ ((b[3][0] * b[1][0] + b[3][1] * b[1][1] + b[3][2] * b[1][2]) * c3) ) * 0.5 + ( (b[3][2] * b[2][2] * c2 + b[3][2] * b[2][2] * c3)+ ((b[3][0] * b[2][0] + b[3][1] * b[2][1] + b[3][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[3][2] * b[0][0] * c2 + b[3][0] * b[0][2] * c3) ) * 0.5 + ( (b[3][2] * b[2][0] * c2 + b[3][0] * b[2][2] * c3) ) * 0.5 ),      (( (b[3][2] * b[0][1] * c2 + b[3][1] * b[0][2] * c3) ) * 0.5 + ( (b[3][2] * b[2][1] * c2 + b[3][1] * b[2][2] * c3) ) * 0.5 ),      (( (b[3][2] * b[0][2] * c2 + b[3][2] * b[0][2] * c3)+ ((b[3][0] * b[0][0] + b[3][1] * b[0][1] + b[3][2] * b[0][2]) * c3) ) * 0.5 + ( (b[3][2] * b[2][2] * c2 + b[3][2] * b[2][2] * c3)+ ((b[3][0] * b[2][0] + b[3][1] * b[2][1] + b[3][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[3][2] * b[0][0] * c2 + b[3][0] * b[0][2] * c3) ) * 1.0 + ( (b[3][2] * b[3][0] * c2 + b[3][0] * b[3][2] * c3) ) * 0.5 ),      (( (b[3][2] * b[0][1] * c2 + b[3][1] * b[0][2] * c3) ) * 1.0 + ( (b[3][2] * b[3][1] * c2 + b[3][1] * b[3][2] * c3) ) * 0.5 ),      (( (b[3][2] * b[0][2] * c2 + b[3][2] * b[0][2] * c3)+ ((b[3][0] * b[0][0] + b[3][1] * b[0][1] + b[3][2] * b[0][2]) * c3) ) * 1.0 + ( (b[3][2] * b[3][2] * c2 + b[3][2] * b[3][2] * c3)+ ((b[3][0] * b[3][0] + b[3][1] * b[3][1] + b[3][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[3][2] * b[1][0] * c2 + b[3][0] * b[1][2] * c3) ) * 1.0 + ( (b[3][2] * b[3][0] * c2 + b[3][0] * b[3][2] * c3) ) * 0.5 ),      (( (b[3][2] * b[1][1] * c2 + b[3][1] * b[1][2] * c3) ) * 1.0 + ( (b[3][2] * b[3][1] * c2 + b[3][1] * b[3][2] * c3) ) * 0.5 ),      (( (b[3][2] * b[1][2] * c2 + b[3][2] * b[1][2] * c3)+ ((b[3][0] * b[1][0] + b[3][1] * b[1][1] + b[3][2] * b[1][2]) * c3) ) * 1.0 + ( (b[3][2] * b[3][2] * c2 + b[3][2] * b[3][2] * c3)+ ((b[3][0] * b[3][0] + b[3][1] * b[3][1] + b[3][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[3][2] * b[2][0] * c2 + b[3][0] * b[2][2] * c3) ) * 1.0 + ( (b[3][2] * b[3][0] * c2 + b[3][0] * b[3][2] * c3) ) * 0.5 ),      (( (b[3][2] * b[2][1] * c2 + b[3][1] * b[2][2] * c3) ) * 1.0 + ( (b[3][2] * b[3][1] * c2 + b[3][1] * b[3][2] * c3) ) * 0.5 ),      (( (b[3][2] * b[2][2] * c2 + b[3][2] * b[2][2] * c3)+ ((b[3][0] * b[2][0] + b[3][1] * b[2][1] + b[3][2] * b[2][2]) * c3) ) * 1.0 + ( (b[3][2] * b[3][2] * c2 + b[3][2] * b[3][2] * c3)+ ((b[3][0] * b[3][0] + b[3][1] * b[3][1] + b[3][2] * b[3][2]) * c3) ) * 0.5 )},
{ (( (b[0][0] * b[0][0] * c2 + b[0][0] * b[0][0] * c3)+ ((b[0][0] * b[0][0] + b[0][1] * b[0][1] + b[0][2] * b[0][2]) * c3) ) * 0.5 + ( (b[1][0] * b[0][0] * c2 + b[1][0] * b[0][0] * c3)+ ((b[1][0] * b[0][0] + b[1][1] * b[0][1] + b[1][2] * b[0][2]) * c3) ) * 1.0 ),      (( (b[0][0] * b[0][1] * c2 + b[0][1] * b[0][0] * c3) ) * 0.5 + ( (b[1][0] * b[0][1] * c2 + b[1][1] * b[0][0] * c3) ) * 1.0 ),      (( (b[0][0] * b[0][2] * c2 + b[0][2] * b[0][0] * c3) ) * 0.5 + ( (b[1][0] * b[0][2] * c2 + b[1][2] * b[0][0] * c3) ) * 1.0 ),      (( (b[0][0] * b[1][0] * c2 + b[0][0] * b[1][0] * c3)+ ((b[0][0] * b[1][0] + b[0][1] * b[1][1] + b[0][2] * b[1][2]) * c3) ) * 1.0 + ( (b[1][0] * b[1][0] * c2 + b[1][0] * b[1][0] * c3)+ ((b[1][0] * b[1][0] + b[1][1] * b[1][1] + b[1][2] * b[1][2]) * c3) ) * 0.5 ),      (( (b[0][0] * b[1][1] * c2 + b[0][1] * b[1][0] * c3) ) * 1.0 + ( (b[1][0] * b[1][1] * c2 + b[1][1] * b[1][0] * c3) ) * 0.5 ),      (( (b[0][0] * b[1][2] * c2 + b[0][2] * b[1][0] * c3) ) * 1.0 + ( (b[1][0] * b[1][2] * c2 + b[1][2] * b[1][0] * c3) ) * 0.5 ),      (( (b[0][0] * b[2][0] * c2 + b[0][0] * b[2][0] * c3)+ ((b[0][0] * b[2][0] + b[0][1] * b[2][1] + b[0][2] * b[2][2]) * c3) ) * 0.5 + ( (b[1][0] * b[2][0] * c2 + b[1][0] * b[2][0] * c3)+ ((b[1][0] * b[2][0] + b[1][1] * b[2][1] + b[1][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[0][0] * b[2][1] * c2 + b[0][1] * b[2][0] * c3) ) * 0.5 + ( (b[1][0] * b[2][1] * c2 + b[1][1] * b[2][0] * c3) ) * 0.5 ),      (( (b[0][0] * b[2][2] * c2 + b[0][2] * b[2][0] * c3) ) * 0.5 + ( (b[1][0] * b[2][2] * c2 + b[1][2] * b[2][0] * c3) ) * 0.5 ),      (( (b[0][0] * b[3][0] * c2 + b[0][0] * b[3][0] * c3)+ ((b[0][0] * b[3][0] + b[0][1] * b[3][1] + b[0][2] * b[3][2]) * c3) ) * 0.5 + ( (b[1][0] * b[3][0] * c2 + b[1][0] * b[3][0] * c3)+ ((b[1][0] * b[3][0] + b[1][1] * b[3][1] + b[1][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[0][0] * b[3][1] * c2 + b[0][1] * b[3][0] * c3) ) * 0.5 + ( (b[1][0] * b[3][1] * c2 + b[1][1] * b[3][0] * c3) ) * 0.5 ),      (( (b[0][0] * b[3][2] * c2 + b[0][2] * b[3][0] * c3) ) * 0.5 + ( (b[1][0] * b[3][2] * c2 + b[1][2] * b[3][0] * c3) ) * 0.5 ),      (( (b[0][0] * b[0][0] * c2 + b[0][0] * b[0][0] * c3)+ ((b[0][0] * b[0][0] + b[0][1] * b[0][1] + b[0][2] * b[0][2]) * c3) ) * 1.0 + ( (b[0][0] * b[1][0] * c2 + b[0][0] * b[1][0] * c3)+ ((b[0][0] * b[1][0] + b[0][1] * b[1][1] + b[0][2] * b[1][2]) * c3) ) * 0.5 + ( (b[1][0] * b[0][0] * c2 + b[1][0] * b[0][0] * c3)+ ((b[1][0] * b[0][0] + b[1][1] * b[0][1] + b[1][2] * b[0][2]) * c3) ) * 0.5 + ( (b[1][0] * b[1][0] * c2 + b[1][0] * b[1][0] * c3)+ ((b[1][0] * b[1][0] + b[1][1] * b[1][1] + b[1][2] * b[1][2]) * c3) ) * 1.0 ),      (( (b[0][0] * b[0][1] * c2 + b[0][1] * b[0][0] * c3) ) * 1.0 + ( (b[0][0] * b[1][1] * c2 + b[0][1] * b[1][0] * c3) ) * 0.5 + ( (b[1][0] * b[0][1] * c2 + b[1][1] * b[0][0] * c3) ) * 0.5 + ( (b[1][0] * b[1][1] * c2 + b[1][1] * b[1][0] * c3) ) * 1.0 ),      (( (b[0][0] * b[0][2] * c2 + b[0][2] * b[0][0] * c3) ) * 1.0 + ( (b[0][0] * b[1][2] * c2 + b[0][2] * b[1][0] * c3) ) * 0.5 + ( (b[1][0] * b[0][2] * c2 + b[1][2] * b[0][0] * c3) ) * 0.5 + ( (b[1][0] * b[1][2] * c2 + b[1][2] * b[1][0] * c3) ) * 1.0 ),      (( (b[0][0] * b[1][0] * c2 + b[0][0] * b[1][0] * c3)+ ((b[0][0] * b[1][0] + b[0][1] * b[1][1] + b[0][2] * b[1][2]) * c3) ) * 0.5 + ( (b[0][0] * b[2][0] * c2 + b[0][0] * b[2][0] * c3)+ ((b[0][0] * b[2][0] + b[0][1] * b[2][1] + b[0][2] * b[2][2]) * c3) ) * 1.0 + ( (b[1][0] * b[1][0] * c2 + b[1][0] * b[1][0] * c3)+ ((b[1][0] * b[1][0] + b[1][1] * b[1][1] + b[1][2] * b[1][2]) * c3) ) * 0.5 + ( (b[1][0] * b[2][0] * c2 + b[1][0] * b[2][0] * c3)+ ((b[1][0] * b[2][0] + b[1][1] * b[2][1] + b[1][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[0][0] * b[1][1] * c2 + b[0][1] * b[1][0] * c3) ) * 0.5 + ( (b[0][0] * b[2][1] * c2 + b[0][1] * b[2][0] * c3) ) * 1.0 + ( (b[1][0] * b[1][1] * c2 + b[1][1] * b[1][0] * c3) ) * 0.5 + ( (b[1][0] * b[2][1] * c2 + b[1][1] * b[2][0] * c3) ) * 0.5 ),      (( (b[0][0] * b[1][2] * c2 + b[0][2] * b[1][0] * c3) ) * 0.5 + ( (b[0][0] * b[2][2] * c2 + b[0][2] * b[2][0] * c3) ) * 1.0 + ( (b[1][0] * b[1][2] * c2 + b[1][2] * b[1][0] * c3) ) * 0.5 + ( (b[1][0] * b[2][2] * c2 + b[1][2] * b[2][0] * c3) ) * 0.5 ),      (( (b[0][0] * b[0][0] * c2 + b[0][0] * b[0][0] * c3)+ ((b[0][0] * b[0][0] + b[0][1] * b[0][1] + b[0][2] * b[0][2]) * c3) ) * 0.5 + ( (b[0][0] * b[2][0] * c2 + b[0][0] * b[2][0] * c3)+ ((b[0][0] * b[2][0] + b[0][1] * b[2][1] + b[0][2] * b[2][2]) * c3) ) * 0.5 + ( (b[1][0] * b[0][0] * c2 + b[1][0] * b[0][0] * c3)+ ((b[1][0] * b[0][0] + b[1][1] * b[0][1] + b[1][2] * b[0][2]) * c3) ) * 0.5 + ( (b[1][0] * b[2][0] * c2 + b[1][0] * b[2][0] * c3)+ ((b[1][0] * b[2][0] + b[1][1] * b[2][1] + b[1][2] * b[2][2]) * c3) ) * 1.0 ),      (( (b[0][0] * b[0][1] * c2 + b[0][1] * b[0][0] * c3) ) * 0.5 + ( (b[0][0] * b[2][1] * c2 + b[0][1] * b[2][0] * c3) ) * 0.5 + ( (b[1][0] * b[0][1] * c2 + b[1][1] * b[0][0] * c3) ) * 0.5 + ( (b[1][0] * b[2][1] * c2 + b[1][1] * b[2][0] * c3) ) * 1.0 ),      (( (b[0][0] * b[0][2] * c2 + b[0][2] * b[0][0] * c3) ) * 0.5 + ( (b[0][0] * b[2][2] * c2 + b[0][2] * b[2][0] * c3) ) * 0.5 + ( (b[1][0] * b[0][2] * c2 + b[1][2] * b[0][0] * c3) ) * 0.5 + ( (b[1][0] * b[2][2] * c2 + b[1][2] * b[2][0] * c3) ) * 1.0 ),      (( (b[0][0] * b[0][0] * c2 + b[0][0] * b[0][0] * c3)+ ((b[0][0] * b[0][0] + b[0][1] * b[0][1] + b[0][2] * b[0][2]) * c3) ) * 0.5 + ( (b[0][0] * b[3][0] * c2 + b[0][0] * b[3][0] * c3)+ ((b[0][0] * b[3][0] + b[0][1] * b[3][1] + b[0][2] * b[3][2]) * c3) ) * 0.5 + ( (b[1][0] * b[0][0] * c2 + b[1][0] * b[0][0] * c3)+ ((b[1][0] * b[0][0] + b[1][1] * b[0][1] + b[1][2] * b[0][2]) * c3) ) * 0.5 + ( (b[1][0] * b[3][0] * c2 + b[1][0] * b[3][0] * c3)+ ((b[1][0] * b[3][0] + b[1][1] * b[3][1] + b[1][2] * b[3][2]) * c3) ) * 1.0 ),      (( (b[0][0] * b[0][1] * c2 + b[0][1] * b[0][0] * c3) ) * 0.5 + ( (b[0][0] * b[3][1] * c2 + b[0][1] * b[3][0] * c3) ) * 0.5 + ( (b[1][0] * b[0][1] * c2 + b[1][1] * b[0][0] * c3) ) * 0.5 + ( (b[1][0] * b[3][1] * c2 + b[1][1] * b[3][0] * c3) ) * 1.0 ),      (( (b[0][0] * b[0][2] * c2 + b[0][2] * b[0][0] * c3) ) * 0.5 + ( (b[0][0] * b[3][2] * c2 + b[0][2] * b[3][0] * c3) ) * 0.5 + ( (b[1][0] * b[0][2] * c2 + b[1][2] * b[0][0] * c3) ) * 0.5 + ( (b[1][0] * b[3][2] * c2 + b[1][2] * b[3][0] * c3) ) * 1.0 ),      (( (b[0][0] * b[1][0] * c2 + b[0][0] * b[1][0] * c3)+ ((b[0][0] * b[1][0] + b[0][1] * b[1][1] + b[0][2] * b[1][2]) * c3) ) * 0.5 + ( (b[0][0] * b[3][0] * c2 + b[0][0] * b[3][0] * c3)+ ((b[0][0] * b[3][0] + b[0][1] * b[3][1] + b[0][2] * b[3][2]) * c3) ) * 1.0 + ( (b[1][0] * b[1][0] * c2 + b[1][0] * b[1][0] * c3)+ ((b[1][0] * b[1][0] + b[1][1] * b[1][1] + b[1][2] * b[1][2]) * c3) ) * 0.5 + ( (b[1][0] * b[3][0] * c2 + b[1][0] * b[3][0] * c3)+ ((b[1][0] * b[3][0] + b[1][1] * b[3][1] + b[1][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[0][0] * b[1][1] * c2 + b[0][1] * b[1][0] * c3) ) * 0.5 + ( (b[0][0] * b[3][1] * c2 + b[0][1] * b[3][0] * c3) ) * 1.0 + ( (b[1][0] * b[1][1] * c2 + b[1][1] * b[1][0] * c3) ) * 0.5 + ( (b[1][0] * b[3][1] * c2 + b[1][1] * b[3][0] * c3) ) * 0.5 ),      (( (b[0][0] * b[1][2] * c2 + b[0][2] * b[1][0] * c3) ) * 0.5 + ( (b[0][0] * b[3][2] * c2 + b[0][2] * b[3][0] * c3) ) * 1.0 + ( (b[1][0] * b[1][2] * c2 + b[1][2] * b[1][0] * c3) ) * 0.5 + ( (b[1][0] * b[3][2] * c2 + b[1][2] * b[3][0] * c3) ) * 0.5 ),      (( (b[0][0] * b[2][0] * c2 + b[0][0] * b[2][0] * c3)+ ((b[0][0] * b[2][0] + b[0][1] * b[2][1] + b[0][2] * b[2][2]) * c3) ) * 0.5 + ( (b[0][0] * b[3][0] * c2 + b[0][0] * b[3][0] * c3)+ ((b[0][0] * b[3][0] + b[0][1] * b[3][1] + b[0][2] * b[3][2]) * c3) ) * 0.5 + ( (b[1][0] * b[2][0] * c2 + b[1][0] * b[2][0] * c3)+ ((b[1][0] * b[2][0] + b[1][1] * b[2][1] + b[1][2] * b[2][2]) * c3) ) * 0.5 + ( (b[1][0] * b[3][0] * c2 + b[1][0] * b[3][0] * c3)+ ((b[1][0] * b[3][0] + b[1][1] * b[3][1] + b[1][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[0][0] * b[2][1] * c2 + b[0][1] * b[2][0] * c3) ) * 0.5 + ( (b[0][0] * b[3][1] * c2 + b[0][1] * b[3][0] * c3) ) * 0.5 + ( (b[1][0] * b[2][1] * c2 + b[1][1] * b[2][0] * c3) ) * 0.5 + ( (b[1][0] * b[3][1] * c2 + b[1][1] * b[3][0] * c3) ) * 0.5 ),      (( (b[0][0] * b[2][2] * c2 + b[0][2] * b[2][0] * c3) ) * 0.5 + ( (b[0][0] * b[3][2] * c2 + b[0][2] * b[3][0] * c3) ) * 0.5 + ( (b[1][0] * b[2][2] * c2 + b[1][2] * b[2][0] * c3) ) * 0.5 + ( (b[1][0] * b[3][2] * c2 + b[1][2] * b[3][0] * c3) ) * 0.5 )},
{ (( (b[0][1] * b[0][0] * c2 + b[0][0] * b[0][1] * c3) ) * 0.5 + ( (b[1][1] * b[0][0] * c2 + b[1][0] * b[0][1] * c3) ) * 1.0 ),      (( (b[0][1] * b[0][1] * c2 + b[0][1] * b[0][1] * c3)+ ((b[0][0] * b[0][0] + b[0][1] * b[0][1] + b[0][2] * b[0][2]) * c3) ) * 0.5 + ( (b[1][1] * b[0][1] * c2 + b[1][1] * b[0][1] * c3)+ ((b[1][0] * b[0][0] + b[1][1] * b[0][1] + b[1][2] * b[0][2]) * c3) ) * 1.0 ),      (( (b[0][1] * b[0][2] * c2 + b[0][2] * b[0][1] * c3) ) * 0.5 + ( (b[1][1] * b[0][2] * c2 + b[1][2] * b[0][1] * c3) ) * 1.0 ),      (( (b[0][1] * b[1][0] * c2 + b[0][0] * b[1][1] * c3) ) * 1.0 + ( (b[1][1] * b[1][0] * c2 + b[1][0] * b[1][1] * c3) ) * 0.5 ),      (( (b[0][1] * b[1][1] * c2 + b[0][1] * b[1][1] * c3)+ ((b[0][0] * b[1][0] + b[0][1] * b[1][1] + b[0][2] * b[1][2]) * c3) ) * 1.0 + ( (b[1][1] * b[1][1] * c2 + b[1][1] * b[1][1] * c3)+ ((b[1][0] * b[1][0] + b[1][1] * b[1][1] + b[1][2] * b[1][2]) * c3) ) * 0.5 ),      (( (b[0][1] * b[1][2] * c2 + b[0][2] * b[1][1] * c3) ) * 1.0 + ( (b[1][1] * b[1][2] * c2 + b[1][2] * b[1][1] * c3) ) * 0.5 ),      (( (b[0][1] * b[2][0] * c2 + b[0][0] * b[2][1] * c3) ) * 0.5 + ( (b[1][1] * b[2][0] * c2 + b[1][0] * b[2][1] * c3) ) * 0.5 ),      (( (b[0][1] * b[2][1] * c2 + b[0][1] * b[2][1] * c3)+ ((b[0][0] * b[2][0] + b[0][1] * b[2][1] + b[0][2] * b[2][2]) * c3) ) * 0.5 + ( (b[1][1] * b[2][1] * c2 + b[1][1] * b[2][1] * c3)+ ((b[1][0] * b[2][0] + b[1][1] * b[2][1] + b[1][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[0][1] * b[2][2] * c2 + b[0][2] * b[2][1] * c3) ) * 0.5 + ( (b[1][1] * b[2][2] * c2 + b[1][2] * b[2][1] * c3) ) * 0.5 ),      (( (b[0][1] * b[3][0] * c2 + b[0][0] * b[3][1] * c3) ) * 0.5 + ( (b[1][1] * b[3][0] * c2 + b[1][0] * b[3][1] * c3) ) * 0.5 ),      (( (b[0][1] * b[3][1] * c2 + b[0][1] * b[3][1] * c3)+ ((b[0][0] * b[3][0] + b[0][1] * b[3][1] + b[0][2] * b[3][2]) * c3) ) * 0.5 + ( (b[1][1] * b[3][1] * c2 + b[1][1] * b[3][1] * c3)+ ((b[1][0] * b[3][0] + b[1][1] * b[3][1] + b[1][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[0][1] * b[3][2] * c2 + b[0][2] * b[3][1] * c3) ) * 0.5 + ( (b[1][1] * b[3][2] * c2 + b[1][2] * b[3][1] * c3) ) * 0.5 ),      (( (b[0][1] * b[0][0] * c2 + b[0][0] * b[0][1] * c3) ) * 1.0 + ( (b[0][1] * b[1][0] * c2 + b[0][0] * b[1][1] * c3) ) * 0.5 + ( (b[1][1] * b[0][0] * c2 + b[1][0] * b[0][1] * c3) ) * 0.5 + ( (b[1][1] * b[1][0] * c2 + b[1][0] * b[1][1] * c3) ) * 1.0 ),      (( (b[0][1] * b[0][1] * c2 + b[0][1] * b[0][1] * c3)+ ((b[0][0] * b[0][0] + b[0][1] * b[0][1] + b[0][2] * b[0][2]) * c3) ) * 1.0 + ( (b[0][1] * b[1][1] * c2 + b[0][1] * b[1][1] * c3)+ ((b[0][0] * b[1][0] + b[0][1] * b[1][1] + b[0][2] * b[1][2]) * c3) ) * 0.5 + ( (b[1][1] * b[0][1] * c2 + b[1][1] * b[0][1] * c3)+ ((b[1][0] * b[0][0] + b[1][1] * b[0][1] + b[1][2] * b[0][2]) * c3) ) * 0.5 + ( (b[1][1] * b[1][1] * c2 + b[1][1] * b[1][1] * c3)+ ((b[1][0] * b[1][0] + b[1][1] * b[1][1] + b[1][2] * b[1][2]) * c3) ) * 1.0 ),      (( (b[0][1] * b[0][2] * c2 + b[0][2] * b[0][1] * c3) ) * 1.0 + ( (b[0][1] * b[1][2] * c2 + b[0][2] * b[1][1] * c3) ) * 0.5 + ( (b[1][1] * b[0][2] * c2 + b[1][2] * b[0][1] * c3) ) * 0.5 + ( (b[1][1] * b[1][2] * c2 + b[1][2] * b[1][1] * c3) ) * 1.0 ),      (( (b[0][1] * b[1][0] * c2 + b[0][0] * b[1][1] * c3) ) * 0.5 + ( (b[0][1] * b[2][0] * c2 + b[0][0] * b[2][1] * c3) ) * 1.0 + ( (b[1][1] * b[1][0] * c2 + b[1][0] * b[1][1] * c3) ) * 0.5 + ( (b[1][1] * b[2][0] * c2 + b[1][0] * b[2][1] * c3) ) * 0.5 ),      (( (b[0][1] * b[1][1] * c2 + b[0][1] * b[1][1] * c3)+ ((b[0][0] * b[1][0] + b[0][1] * b[1][1] + b[0][2] * b[1][2]) * c3) ) * 0.5 + ( (b[0][1] * b[2][1] * c2 + b[0][1] * b[2][1] * c3)+ ((b[0][0] * b[2][0] + b[0][1] * b[2][1] + b[0][2] * b[2][2]) * c3) ) * 1.0 + ( (b[1][1] * b[1][1] * c2 + b[1][1] * b[1][1] * c3)+ ((b[1][0] * b[1][0] + b[1][1] * b[1][1] + b[1][2] * b[1][2]) * c3) ) * 0.5 + ( (b[1][1] * b[2][1] * c2 + b[1][1] * b[2][1] * c3)+ ((b[1][0] * b[2][0] + b[1][1] * b[2][1] + b[1][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[0][1] * b[1][2] * c2 + b[0][2] * b[1][1] * c3) ) * 0.5 + ( (b[0][1] * b[2][2] * c2 + b[0][2] * b[2][1] * c3) ) * 1.0 + ( (b[1][1] * b[1][2] * c2 + b[1][2] * b[1][1] * c3) ) * 0.5 + ( (b[1][1] * b[2][2] * c2 + b[1][2] * b[2][1] * c3) ) * 0.5 ),      (( (b[0][1] * b[0][0] * c2 + b[0][0] * b[0][1] * c3) ) * 0.5 + ( (b[0][1] * b[2][0] * c2 + b[0][0] * b[2][1] * c3) ) * 0.5 + ( (b[1][1] * b[0][0] * c2 + b[1][0] * b[0][1] * c3) ) * 0.5 + ( (b[1][1] * b[2][0] * c2 + b[1][0] * b[2][1] * c3) ) * 1.0 ),      (( (b[0][1] * b[0][1] * c2 + b[0][1] * b[0][1] * c3)+ ((b[0][0] * b[0][0] + b[0][1] * b[0][1] + b[0][2] * b[0][2]) * c3) ) * 0.5 + ( (b[0][1] * b[2][1] * c2 + b[0][1] * b[2][1] * c3)+ ((b[0][0] * b[2][0] + b[0][1] * b[2][1] + b[0][2] * b[2][2]) * c3) ) * 0.5 + ( (b[1][1] * b[0][1] * c2 + b[1][1] * b[0][1] * c3)+ ((b[1][0] * b[0][0] + b[1][1] * b[0][1] + b[1][2] * b[0][2]) * c3) ) * 0.5 + ( (b[1][1] * b[2][1] * c2 + b[1][1] * b[2][1] * c3)+ ((b[1][0] * b[2][0] + b[1][1] * b[2][1] + b[1][2] * b[2][2]) * c3) ) * 1.0 ),      (( (b[0][1] * b[0][2] * c2 + b[0][2] * b[0][1] * c3) ) * 0.5 + ( (b[0][1] * b[2][2] * c2 + b[0][2] * b[2][1] * c3) ) * 0.5 + ( (b[1][1] * b[0][2] * c2 + b[1][2] * b[0][1] * c3) ) * 0.5 + ( (b[1][1] * b[2][2] * c2 + b[1][2] * b[2][1] * c3) ) * 1.0 ),      (( (b[0][1] * b[0][0] * c2 + b[0][0] * b[0][1] * c3) ) * 0.5 + ( (b[0][1] * b[3][0] * c2 + b[0][0] * b[3][1] * c3) ) * 0.5 + ( (b[1][1] * b[0][0] * c2 + b[1][0] * b[0][1] * c3) ) * 0.5 + ( (b[1][1] * b[3][0] * c2 + b[1][0] * b[3][1] * c3) ) * 1.0 ),      (( (b[0][1] * b[0][1] * c2 + b[0][1] * b[0][1] * c3)+ ((b[0][0] * b[0][0] + b[0][1] * b[0][1] + b[0][2] * b[0][2]) * c3) ) * 0.5 + ( (b[0][1] * b[3][1] * c2 + b[0][1] * b[3][1] * c3)+ ((b[0][0] * b[3][0] + b[0][1] * b[3][1] + b[0][2] * b[3][2]) * c3) ) * 0.5 + ( (b[1][1] * b[0][1] * c2 + b[1][1] * b[0][1] * c3)+ ((b[1][0] * b[0][0] + b[1][1] * b[0][1] + b[1][2] * b[0][2]) * c3) ) * 0.5 + ( (b[1][1] * b[3][1] * c2 + b[1][1] * b[3][1] * c3)+ ((b[1][0] * b[3][0] + b[1][1] * b[3][1] + b[1][2] * b[3][2]) * c3) ) * 1.0 ),      (( (b[0][1] * b[0][2] * c2 + b[0][2] * b[0][1] * c3) ) * 0.5 + ( (b[0][1] * b[3][2] * c2 + b[0][2] * b[3][1] * c3) ) * 0.5 + ( (b[1][1] * b[0][2] * c2 + b[1][2] * b[0][1] * c3) ) * 0.5 + ( (b[1][1] * b[3][2] * c2 + b[1][2] * b[3][1] * c3) ) * 1.0 ),      (( (b[0][1] * b[1][0] * c2 + b[0][0] * b[1][1] * c3) ) * 0.5 + ( (b[0][1] * b[3][0] * c2 + b[0][0] * b[3][1] * c3) ) * 1.0 + ( (b[1][1] * b[1][0] * c2 + b[1][0] * b[1][1] * c3) ) * 0.5 + ( (b[1][1] * b[3][0] * c2 + b[1][0] * b[3][1] * c3) ) * 0.5 ),      (( (b[0][1] * b[1][1] * c2 + b[0][1] * b[1][1] * c3)+ ((b[0][0] * b[1][0] + b[0][1] * b[1][1] + b[0][2] * b[1][2]) * c3) ) * 0.5 + ( (b[0][1] * b[3][1] * c2 + b[0][1] * b[3][1] * c3)+ ((b[0][0] * b[3][0] + b[0][1] * b[3][1] + b[0][2] * b[3][2]) * c3) ) * 1.0 + ( (b[1][1] * b[1][1] * c2 + b[1][1] * b[1][1] * c3)+ ((b[1][0] * b[1][0] + b[1][1] * b[1][1] + b[1][2] * b[1][2]) * c3) ) * 0.5 + ( (b[1][1] * b[3][1] * c2 + b[1][1] * b[3][1] * c3)+ ((b[1][0] * b[3][0] + b[1][1] * b[3][1] + b[1][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[0][1] * b[1][2] * c2 + b[0][2] * b[1][1] * c3) ) * 0.5 + ( (b[0][1] * b[3][2] * c2 + b[0][2] * b[3][1] * c3) ) * 1.0 + ( (b[1][1] * b[1][2] * c2 + b[1][2] * b[1][1] * c3) ) * 0.5 + ( (b[1][1] * b[3][2] * c2 + b[1][2] * b[3][1] * c3) ) * 0.5 ),      (( (b[0][1] * b[2][0] * c2 + b[0][0] * b[2][1] * c3) ) * 0.5 + ( (b[0][1] * b[3][0] * c2 + b[0][0] * b[3][1] * c3) ) * 0.5 + ( (b[1][1] * b[2][0] * c2 + b[1][0] * b[2][1] * c3) ) * 0.5 + ( (b[1][1] * b[3][0] * c2 + b[1][0] * b[3][1] * c3) ) * 0.5 ),      (( (b[0][1] * b[2][1] * c2 + b[0][1] * b[2][1] * c3)+ ((b[0][0] * b[2][0] + b[0][1] * b[2][1] + b[0][2] * b[2][2]) * c3) ) * 0.5 + ( (b[0][1] * b[3][1] * c2 + b[0][1] * b[3][1] * c3)+ ((b[0][0] * b[3][0] + b[0][1] * b[3][1] + b[0][2] * b[3][2]) * c3) ) * 0.5 + ( (b[1][1] * b[2][1] * c2 + b[1][1] * b[2][1] * c3)+ ((b[1][0] * b[2][0] + b[1][1] * b[2][1] + b[1][2] * b[2][2]) * c3) ) * 0.5 + ( (b[1][1] * b[3][1] * c2 + b[1][1] * b[3][1] * c3)+ ((b[1][0] * b[3][0] + b[1][1] * b[3][1] + b[1][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[0][1] * b[2][2] * c2 + b[0][2] * b[2][1] * c3) ) * 0.5 + ( (b[0][1] * b[3][2] * c2 + b[0][2] * b[3][1] * c3) ) * 0.5 + ( (b[1][1] * b[2][2] * c2 + b[1][2] * b[2][1] * c3) ) * 0.5 + ( (b[1][1] * b[3][2] * c2 + b[1][2] * b[3][1] * c3) ) * 0.5 )},
{ (( (b[0][2] * b[0][0] * c2 + b[0][0] * b[0][2] * c3) ) * 0.5 + ( (b[1][2] * b[0][0] * c2 + b[1][0] * b[0][2] * c3) ) * 1.0 ),      (( (b[0][2] * b[0][1] * c2 + b[0][1] * b[0][2] * c3) ) * 0.5 + ( (b[1][2] * b[0][1] * c2 + b[1][1] * b[0][2] * c3) ) * 1.0 ),      (( (b[0][2] * b[0][2] * c2 + b[0][2] * b[0][2] * c3)+ ((b[0][0] * b[0][0] + b[0][1] * b[0][1] + b[0][2] * b[0][2]) * c3) ) * 0.5 + ( (b[1][2] * b[0][2] * c2 + b[1][2] * b[0][2] * c3)+ ((b[1][0] * b[0][0] + b[1][1] * b[0][1] + b[1][2] * b[0][2]) * c3) ) * 1.0 ),      (( (b[0][2] * b[1][0] * c2 + b[0][0] * b[1][2] * c3) ) * 1.0 + ( (b[1][2] * b[1][0] * c2 + b[1][0] * b[1][2] * c3) ) * 0.5 ),      (( (b[0][2] * b[1][1] * c2 + b[0][1] * b[1][2] * c3) ) * 1.0 + ( (b[1][2] * b[1][1] * c2 + b[1][1] * b[1][2] * c3) ) * 0.5 ),      (( (b[0][2] * b[1][2] * c2 + b[0][2] * b[1][2] * c3)+ ((b[0][0] * b[1][0] + b[0][1] * b[1][1] + b[0][2] * b[1][2]) * c3) ) * 1.0 + ( (b[1][2] * b[1][2] * c2 + b[1][2] * b[1][2] * c3)+ ((b[1][0] * b[1][0] + b[1][1] * b[1][1] + b[1][2] * b[1][2]) * c3) ) * 0.5 ),      (( (b[0][2] * b[2][0] * c2 + b[0][0] * b[2][2] * c3) ) * 0.5 + ( (b[1][2] * b[2][0] * c2 + b[1][0] * b[2][2] * c3) ) * 0.5 ),      (( (b[0][2] * b[2][1] * c2 + b[0][1] * b[2][2] * c3) ) * 0.5 + ( (b[1][2] * b[2][1] * c2 + b[1][1] * b[2][2] * c3) ) * 0.5 ),      (( (b[0][2] * b[2][2] * c2 + b[0][2] * b[2][2] * c3)+ ((b[0][0] * b[2][0] + b[0][1] * b[2][1] + b[0][2] * b[2][2]) * c3) ) * 0.5 + ( (b[1][2] * b[2][2] * c2 + b[1][2] * b[2][2] * c3)+ ((b[1][0] * b[2][0] + b[1][1] * b[2][1] + b[1][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[0][2] * b[3][0] * c2 + b[0][0] * b[3][2] * c3) ) * 0.5 + ( (b[1][2] * b[3][0] * c2 + b[1][0] * b[3][2] * c3) ) * 0.5 ),      (( (b[0][2] * b[3][1] * c2 + b[0][1] * b[3][2] * c3) ) * 0.5 + ( (b[1][2] * b[3][1] * c2 + b[1][1] * b[3][2] * c3) ) * 0.5 ),      (( (b[0][2] * b[3][2] * c2 + b[0][2] * b[3][2] * c3)+ ((b[0][0] * b[3][0] + b[0][1] * b[3][1] + b[0][2] * b[3][2]) * c3) ) * 0.5 + ( (b[1][2] * b[3][2] * c2 + b[1][2] * b[3][2] * c3)+ ((b[1][0] * b[3][0] + b[1][1] * b[3][1] + b[1][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[0][2] * b[0][0] * c2 + b[0][0] * b[0][2] * c3) ) * 1.0 + ( (b[0][2] * b[1][0] * c2 + b[0][0] * b[1][2] * c3) ) * 0.5 + ( (b[1][2] * b[0][0] * c2 + b[1][0] * b[0][2] * c3) ) * 0.5 + ( (b[1][2] * b[1][0] * c2 + b[1][0] * b[1][2] * c3) ) * 1.0 ),      (( (b[0][2] * b[0][1] * c2 + b[0][1] * b[0][2] * c3) ) * 1.0 + ( (b[0][2] * b[1][1] * c2 + b[0][1] * b[1][2] * c3) ) * 0.5 + ( (b[1][2] * b[0][1] * c2 + b[1][1] * b[0][2] * c3) ) * 0.5 + ( (b[1][2] * b[1][1] * c2 + b[1][1] * b[1][2] * c3) ) * 1.0 ),      (( (b[0][2] * b[0][2] * c2 + b[0][2] * b[0][2] * c3)+ ((b[0][0] * b[0][0] + b[0][1] * b[0][1] + b[0][2] * b[0][2]) * c3) ) * 1.0 + ( (b[0][2] * b[1][2] * c2 + b[0][2] * b[1][2] * c3)+ ((b[0][0] * b[1][0] + b[0][1] * b[1][1] + b[0][2] * b[1][2]) * c3) ) * 0.5 + ( (b[1][2] * b[0][2] * c2 + b[1][2] * b[0][2] * c3)+ ((b[1][0] * b[0][0] + b[1][1] * b[0][1] + b[1][2] * b[0][2]) * c3) ) * 0.5 + ( (b[1][2] * b[1][2] * c2 + b[1][2] * b[1][2] * c3)+ ((b[1][0] * b[1][0] + b[1][1] * b[1][1] + b[1][2] * b[1][2]) * c3) ) * 1.0 ),      (( (b[0][2] * b[1][0] * c2 + b[0][0] * b[1][2] * c3) ) * 0.5 + ( (b[0][2] * b[2][0] * c2 + b[0][0] * b[2][2] * c3) ) * 1.0 + ( (b[1][2] * b[1][0] * c2 + b[1][0] * b[1][2] * c3) ) * 0.5 + ( (b[1][2] * b[2][0] * c2 + b[1][0] * b[2][2] * c3) ) * 0.5 ),      (( (b[0][2] * b[1][1] * c2 + b[0][1] * b[1][2] * c3) ) * 0.5 + ( (b[0][2] * b[2][1] * c2 + b[0][1] * b[2][2] * c3) ) * 1.0 + ( (b[1][2] * b[1][1] * c2 + b[1][1] * b[1][2] * c3) ) * 0.5 + ( (b[1][2] * b[2][1] * c2 + b[1][1] * b[2][2] * c3) ) * 0.5 ),      (( (b[0][2] * b[1][2] * c2 + b[0][2] * b[1][2] * c3)+ ((b[0][0] * b[1][0] + b[0][1] * b[1][1] + b[0][2] * b[1][2]) * c3) ) * 0.5 + ( (b[0][2] * b[2][2] * c2 + b[0][2] * b[2][2] * c3)+ ((b[0][0] * b[2][0] + b[0][1] * b[2][1] + b[0][2] * b[2][2]) * c3) ) * 1.0 + ( (b[1][2] * b[1][2] * c2 + b[1][2] * b[1][2] * c3)+ ((b[1][0] * b[1][0] + b[1][1] * b[1][1] + b[1][2] * b[1][2]) * c3) ) * 0.5 + ( (b[1][2] * b[2][2] * c2 + b[1][2] * b[2][2] * c3)+ ((b[1][0] * b[2][0] + b[1][1] * b[2][1] + b[1][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[0][2] * b[0][0] * c2 + b[0][0] * b[0][2] * c3) ) * 0.5 + ( (b[0][2] * b[2][0] * c2 + b[0][0] * b[2][2] * c3) ) * 0.5 + ( (b[1][2] * b[0][0] * c2 + b[1][0] * b[0][2] * c3) ) * 0.5 + ( (b[1][2] * b[2][0] * c2 + b[1][0] * b[2][2] * c3) ) * 1.0 ),      (( (b[0][2] * b[0][1] * c2 + b[0][1] * b[0][2] * c3) ) * 0.5 + ( (b[0][2] * b[2][1] * c2 + b[0][1] * b[2][2] * c3) ) * 0.5 + ( (b[1][2] * b[0][1] * c2 + b[1][1] * b[0][2] * c3) ) * 0.5 + ( (b[1][2] * b[2][1] * c2 + b[1][1] * b[2][2] * c3) ) * 1.0 ),      (( (b[0][2] * b[0][2] * c2 + b[0][2] * b[0][2] * c3)+ ((b[0][0] * b[0][0] + b[0][1] * b[0][1] + b[0][2] * b[0][2]) * c3) ) * 0.5 + ( (b[0][2] * b[2][2] * c2 + b[0][2] * b[2][2] * c3)+ ((b[0][0] * b[2][0] + b[0][1] * b[2][1] + b[0][2] * b[2][2]) * c3) ) * 0.5 + ( (b[1][2] * b[0][2] * c2 + b[1][2] * b[0][2] * c3)+ ((b[1][0] * b[0][0] + b[1][1] * b[0][1] + b[1][2] * b[0][2]) * c3) ) * 0.5 + ( (b[1][2] * b[2][2] * c2 + b[1][2] * b[2][2] * c3)+ ((b[1][0] * b[2][0] + b[1][1] * b[2][1] + b[1][2] * b[2][2]) * c3) ) * 1.0 ),      (( (b[0][2] * b[0][0] * c2 + b[0][0] * b[0][2] * c3) ) * 0.5 + ( (b[0][2] * b[3][0] * c2 + b[0][0] * b[3][2] * c3) ) * 0.5 + ( (b[1][2] * b[0][0] * c2 + b[1][0] * b[0][2] * c3) ) * 0.5 + ( (b[1][2] * b[3][0] * c2 + b[1][0] * b[3][2] * c3) ) * 1.0 ),      (( (b[0][2] * b[0][1] * c2 + b[0][1] * b[0][2] * c3) ) * 0.5 + ( (b[0][2] * b[3][1] * c2 + b[0][1] * b[3][2] * c3) ) * 0.5 + ( (b[1][2] * b[0][1] * c2 + b[1][1] * b[0][2] * c3) ) * 0.5 + ( (b[1][2] * b[3][1] * c2 + b[1][1] * b[3][2] * c3) ) * 1.0 ),      (( (b[0][2] * b[0][2] * c2 + b[0][2] * b[0][2] * c3)+ ((b[0][0] * b[0][0] + b[0][1] * b[0][1] + b[0][2] * b[0][2]) * c3) ) * 0.5 + ( (b[0][2] * b[3][2] * c2 + b[0][2] * b[3][2] * c3)+ ((b[0][0] * b[3][0] + b[0][1] * b[3][1] + b[0][2] * b[3][2]) * c3) ) * 0.5 + ( (b[1][2] * b[0][2] * c2 + b[1][2] * b[0][2] * c3)+ ((b[1][0] * b[0][0] + b[1][1] * b[0][1] + b[1][2] * b[0][2]) * c3) ) * 0.5 + ( (b[1][2] * b[3][2] * c2 + b[1][2] * b[3][2] * c3)+ ((b[1][0] * b[3][0] + b[1][1] * b[3][1] + b[1][2] * b[3][2]) * c3) ) * 1.0 ),      (( (b[0][2] * b[1][0] * c2 + b[0][0] * b[1][2] * c3) ) * 0.5 + ( (b[0][2] * b[3][0] * c2 + b[0][0] * b[3][2] * c3) ) * 1.0 + ( (b[1][2] * b[1][0] * c2 + b[1][0] * b[1][2] * c3) ) * 0.5 + ( (b[1][2] * b[3][0] * c2 + b[1][0] * b[3][2] * c3) ) * 0.5 ),      (( (b[0][2] * b[1][1] * c2 + b[0][1] * b[1][2] * c3) ) * 0.5 + ( (b[0][2] * b[3][1] * c2 + b[0][1] * b[3][2] * c3) ) * 1.0 + ( (b[1][2] * b[1][1] * c2 + b[1][1] * b[1][2] * c3) ) * 0.5 + ( (b[1][2] * b[3][1] * c2 + b[1][1] * b[3][2] * c3) ) * 0.5 ),      (( (b[0][2] * b[1][2] * c2 + b[0][2] * b[1][2] * c3)+ ((b[0][0] * b[1][0] + b[0][1] * b[1][1] + b[0][2] * b[1][2]) * c3) ) * 0.5 + ( (b[0][2] * b[3][2] * c2 + b[0][2] * b[3][2] * c3)+ ((b[0][0] * b[3][0] + b[0][1] * b[3][1] + b[0][2] * b[3][2]) * c3) ) * 1.0 + ( (b[1][2] * b[1][2] * c2 + b[1][2] * b[1][2] * c3)+ ((b[1][0] * b[1][0] + b[1][1] * b[1][1] + b[1][2] * b[1][2]) * c3) ) * 0.5 + ( (b[1][2] * b[3][2] * c2 + b[1][2] * b[3][2] * c3)+ ((b[1][0] * b[3][0] + b[1][1] * b[3][1] + b[1][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[0][2] * b[2][0] * c2 + b[0][0] * b[2][2] * c3) ) * 0.5 + ( (b[0][2] * b[3][0] * c2 + b[0][0] * b[3][2] * c3) ) * 0.5 + ( (b[1][2] * b[2][0] * c2 + b[1][0] * b[2][2] * c3) ) * 0.5 + ( (b[1][2] * b[3][0] * c2 + b[1][0] * b[3][2] * c3) ) * 0.5 ),      (( (b[0][2] * b[2][1] * c2 + b[0][1] * b[2][2] * c3) ) * 0.5 + ( (b[0][2] * b[3][1] * c2 + b[0][1] * b[3][2] * c3) ) * 0.5 + ( (b[1][2] * b[2][1] * c2 + b[1][1] * b[2][2] * c3) ) * 0.5 + ( (b[1][2] * b[3][1] * c2 + b[1][1] * b[3][2] * c3) ) * 0.5 ),      (( (b[0][2] * b[2][2] * c2 + b[0][2] * b[2][2] * c3)+ ((b[0][0] * b[2][0] + b[0][1] * b[2][1] + b[0][2] * b[2][2]) * c3) ) * 0.5 + ( (b[0][2] * b[3][2] * c2 + b[0][2] * b[3][2] * c3)+ ((b[0][0] * b[3][0] + b[0][1] * b[3][1] + b[0][2] * b[3][2]) * c3) ) * 0.5 + ( (b[1][2] * b[2][2] * c2 + b[1][2] * b[2][2] * c3)+ ((b[1][0] * b[2][0] + b[1][1] * b[2][1] + b[1][2] * b[2][2]) * c3) ) * 0.5 + ( (b[1][2] * b[3][2] * c2 + b[1][2] * b[3][2] * c3)+ ((b[1][0] * b[3][0] + b[1][1] * b[3][1] + b[1][2] * b[3][2]) * c3) ) * 0.5 )},
{ (( (b[1][0] * b[0][0] * c2 + b[1][0] * b[0][0] * c3)+ ((b[1][0] * b[0][0] + b[1][1] * b[0][1] + b[1][2] * b[0][2]) * c3) ) * 0.5 + ( (b[2][0] * b[0][0] * c2 + b[2][0] * b[0][0] * c3)+ ((b[2][0] * b[0][0] + b[2][1] * b[0][1] + b[2][2] * b[0][2]) * c3) ) * 0.5 ),      (( (b[1][0] * b[0][1] * c2 + b[1][1] * b[0][0] * c3) ) * 0.5 + ( (b[2][0] * b[0][1] * c2 + b[2][1] * b[0][0] * c3) ) * 0.5 ),      (( (b[1][0] * b[0][2] * c2 + b[1][2] * b[0][0] * c3) ) * 0.5 + ( (b[2][0] * b[0][2] * c2 + b[2][2] * b[0][0] * c3) ) * 0.5 ),      (( (b[1][0] * b[1][0] * c2 + b[1][0] * b[1][0] * c3)+ ((b[1][0] * b[1][0] + b[1][1] * b[1][1] + b[1][2] * b[1][2]) * c3) ) * 0.5 + ( (b[2][0] * b[1][0] * c2 + b[2][0] * b[1][0] * c3)+ ((b[2][0] * b[1][0] + b[2][1] * b[1][1] + b[2][2] * b[1][2]) * c3) ) * 1.0 ),      (( (b[1][0] * b[1][1] * c2 + b[1][1] * b[1][0] * c3) ) * 0.5 + ( (b[2][0] * b[1][1] * c2 + b[2][1] * b[1][0] * c3) ) * 1.0 ),      (( (b[1][0] * b[1][2] * c2 + b[1][2] * b[1][0] * c3) ) * 0.5 + ( (b[2][0] * b[1][2] * c2 + b[2][2] * b[1][0] * c3) ) * 1.0 ),      (( (b[1][0] * b[2][0] * c2 + b[1][0] * b[2][0] * c3)+ ((b[1][0] * b[2][0] + b[1][1] * b[2][1] + b[1][2] * b[2][2]) * c3) ) * 1.0 + ( (b[2][0] * b[2][0] * c2 + b[2][0] * b[2][0] * c3)+ ((b[2][0] * b[2][0] + b[2][1] * b[2][1] + b[2][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[1][0] * b[2][1] * c2 + b[1][1] * b[2][0] * c3) ) * 1.0 + ( (b[2][0] * b[2][1] * c2 + b[2][1] * b[2][0] * c3) ) * 0.5 ),      (( (b[1][0] * b[2][2] * c2 + b[1][2] * b[2][0] * c3) ) * 1.0 + ( (b[2][0] * b[2][2] * c2 + b[2][2] * b[2][0] * c3) ) * 0.5 ),      (( (b[1][0] * b[3][0] * c2 + b[1][0] * b[3][0] * c3)+ ((b[1][0] * b[3][0] + b[1][1] * b[3][1] + b[1][2] * b[3][2]) * c3) ) * 0.5 + ( (b[2][0] * b[3][0] * c2 + b[2][0] * b[3][0] * c3)+ ((b[2][0] * b[3][0] + b[2][1] * b[3][1] + b[2][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[1][0] * b[3][1] * c2 + b[1][1] * b[3][0] * c3) ) * 0.5 + ( (b[2][0] * b[3][1] * c2 + b[2][1] * b[3][0] * c3) ) * 0.5 ),      (( (b[1][0] * b[3][2] * c2 + b[1][2] * b[3][0] * c3) ) * 0.5 + ( (b[2][0] * b[3][2] * c2 + b[2][2] * b[3][0] * c3) ) * 0.5 ),      (( (b[1][0] * b[0][0] * c2 + b[1][0] * b[0][0] * c3)+ ((b[1][0] * b[0][0] + b[1][1] * b[0][1] + b[1][2] * b[0][2]) * c3) ) * 0.5 + ( (b[1][0] * b[1][0] * c2 + b[1][0] * b[1][0] * c3)+ ((b[1][0] * b[1][0] + b[1][1] * b[1][1] + b[1][2] * b[1][2]) * c3) ) * 0.5 + ( (b[2][0] * b[0][0] * c2 + b[2][0] * b[0][0] * c3)+ ((b[2][0] * b[0][0] + b[2][1] * b[0][1] + b[2][2] * b[0][2]) * c3) ) * 1.0 + ( (b[2][0] * b[1][0] * c2 + b[2][0] * b[1][0] * c3)+ ((b[2][0] * b[1][0] + b[2][1] * b[1][1] + b[2][2] * b[1][2]) * c3) ) * 0.5 ),      (( (b[1][0] * b[0][1] * c2 + b[1][1] * b[0][0] * c3) ) * 0.5 + ( (b[1][0] * b[1][1] * c2 + b[1][1] * b[1][0] * c3) ) * 0.5 + ( (b[2][0] * b[0][1] * c2 + b[2][1] * b[0][0] * c3) ) * 1.0 + ( (b[2][0] * b[1][1] * c2 + b[2][1] * b[1][0] * c3) ) * 0.5 ),      (( (b[1][0] * b[0][2] * c2 + b[1][2] * b[0][0] * c3) ) * 0.5 + ( (b[1][0] * b[1][2] * c2 + b[1][2] * b[1][0] * c3) ) * 0.5 + ( (b[2][0] * b[0][2] * c2 + b[2][2] * b[0][0] * c3) ) * 1.0 + ( (b[2][0] * b[1][2] * c2 + b[2][2] * b[1][0] * c3) ) * 0.5 ),      (( (b[1][0] * b[1][0] * c2 + b[1][0] * b[1][0] * c3)+ ((b[1][0] * b[1][0] + b[1][1] * b[1][1] + b[1][2] * b[1][2]) * c3) ) * 1.0 + ( (b[1][0] * b[2][0] * c2 + b[1][0] * b[2][0] * c3)+ ((b[1][0] * b[2][0] + b[1][1] * b[2][1] + b[1][2] * b[2][2]) * c3) ) * 0.5 + ( (b[2][0] * b[1][0] * c2 + b[2][0] * b[1][0] * c3)+ ((b[2][0] * b[1][0] + b[2][1] * b[1][1] + b[2][2] * b[1][2]) * c3) ) * 0.5 + ( (b[2][0] * b[2][0] * c2 + b[2][0] * b[2][0] * c3)+ ((b[2][0] * b[2][0] + b[2][1] * b[2][1] + b[2][2] * b[2][2]) * c3) ) * 1.0 ),      (( (b[1][0] * b[1][1] * c2 + b[1][1] * b[1][0] * c3) ) * 1.0 + ( (b[1][0] * b[2][1] * c2 + b[1][1] * b[2][0] * c3) ) * 0.5 + ( (b[2][0] * b[1][1] * c2 + b[2][1] * b[1][0] * c3) ) * 0.5 + ( (b[2][0] * b[2][1] * c2 + b[2][1] * b[2][0] * c3) ) * 1.0 ),      (( (b[1][0] * b[1][2] * c2 + b[1][2] * b[1][0] * c3) ) * 1.0 + ( (b[1][0] * b[2][2] * c2 + b[1][2] * b[2][0] * c3) ) * 0.5 + ( (b[2][0] * b[1][2] * c2 + b[2][2] * b[1][0] * c3) ) * 0.5 + ( (b[2][0] * b[2][2] * c2 + b[2][2] * b[2][0] * c3) ) * 1.0 ),      (( (b[1][0] * b[0][0] * c2 + b[1][0] * b[0][0] * c3)+ ((b[1][0] * b[0][0] + b[1][1] * b[0][1] + b[1][2] * b[0][2]) * c3) ) * 1.0 + ( (b[1][0] * b[2][0] * c2 + b[1][0] * b[2][0] * c3)+ ((b[1][0] * b[2][0] + b[1][1] * b[2][1] + b[1][2] * b[2][2]) * c3) ) * 0.5 + ( (b[2][0] * b[0][0] * c2 + b[2][0] * b[0][0] * c3)+ ((b[2][0] * b[0][0] + b[2][1] * b[0][1] + b[2][2] * b[0][2]) * c3) ) * 0.5 + ( (b[2][0] * b[2][0] * c2 + b[2][0] * b[2][0] * c3)+ ((b[2][0] * b[2][0] + b[2][1] * b[2][1] + b[2][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[1][0] * b[0][1] * c2 + b[1][1] * b[0][0] * c3) ) * 1.0 + ( (b[1][0] * b[2][1] * c2 + b[1][1] * b[2][0] * c3) ) * 0.5 + ( (b[2][0] * b[0][1] * c2 + b[2][1] * b[0][0] * c3) ) * 0.5 + ( (b[2][0] * b[2][1] * c2 + b[2][1] * b[2][0] * c3) ) * 0.5 ),      (( (b[1][0] * b[0][2] * c2 + b[1][2] * b[0][0] * c3) ) * 1.0 + ( (b[1][0] * b[2][2] * c2 + b[1][2] * b[2][0] * c3) ) * 0.5 + ( (b[2][0] * b[0][2] * c2 + b[2][2] * b[0][0] * c3) ) * 0.5 + ( (b[2][0] * b[2][2] * c2 + b[2][2] * b[2][0] * c3) ) * 0.5 ),      (( (b[1][0] * b[0][0] * c2 + b[1][0] * b[0][0] * c3)+ ((b[1][0] * b[0][0] + b[1][1] * b[0][1] + b[1][2] * b[0][2]) * c3) ) * 0.5 + ( (b[1][0] * b[3][0] * c2 + b[1][0] * b[3][0] * c3)+ ((b[1][0] * b[3][0] + b[1][1] * b[3][1] + b[1][2] * b[3][2]) * c3) ) * 0.5 + ( (b[2][0] * b[0][0] * c2 + b[2][0] * b[0][0] * c3)+ ((b[2][0] * b[0][0] + b[2][1] * b[0][1] + b[2][2] * b[0][2]) * c3) ) * 0.5 + ( (b[2][0] * b[3][0] * c2 + b[2][0] * b[3][0] * c3)+ ((b[2][0] * b[3][0] + b[2][1] * b[3][1] + b[2][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[1][0] * b[0][1] * c2 + b[1][1] * b[0][0] * c3) ) * 0.5 + ( (b[1][0] * b[3][1] * c2 + b[1][1] * b[3][0] * c3) ) * 0.5 + ( (b[2][0] * b[0][1] * c2 + b[2][1] * b[0][0] * c3) ) * 0.5 + ( (b[2][0] * b[3][1] * c2 + b[2][1] * b[3][0] * c3) ) * 0.5 ),      (( (b[1][0] * b[0][2] * c2 + b[1][2] * b[0][0] * c3) ) * 0.5 + ( (b[1][0] * b[3][2] * c2 + b[1][2] * b[3][0] * c3) ) * 0.5 + ( (b[2][0] * b[0][2] * c2 + b[2][2] * b[0][0] * c3) ) * 0.5 + ( (b[2][0] * b[3][2] * c2 + b[2][2] * b[3][0] * c3) ) * 0.5 ),      (( (b[1][0] * b[1][0] * c2 + b[1][0] * b[1][0] * c3)+ ((b[1][0] * b[1][0] + b[1][1] * b[1][1] + b[1][2] * b[1][2]) * c3) ) * 0.5 + ( (b[1][0] * b[3][0] * c2 + b[1][0] * b[3][0] * c3)+ ((b[1][0] * b[3][0] + b[1][1] * b[3][1] + b[1][2] * b[3][2]) * c3) ) * 0.5 + ( (b[2][0] * b[1][0] * c2 + b[2][0] * b[1][0] * c3)+ ((b[2][0] * b[1][0] + b[2][1] * b[1][1] + b[2][2] * b[1][2]) * c3) ) * 0.5 + ( (b[2][0] * b[3][0] * c2 + b[2][0] * b[3][0] * c3)+ ((b[2][0] * b[3][0] + b[2][1] * b[3][1] + b[2][2] * b[3][2]) * c3) ) * 1.0 ),      (( (b[1][0] * b[1][1] * c2 + b[1][1] * b[1][0] * c3) ) * 0.5 + ( (b[1][0] * b[3][1] * c2 + b[1][1] * b[3][0] * c3) ) * 0.5 + ( (b[2][0] * b[1][1] * c2 + b[2][1] * b[1][0] * c3) ) * 0.5 + ( (b[2][0] * b[3][1] * c2 + b[2][1] * b[3][0] * c3) ) * 1.0 ),      (( (b[1][0] * b[1][2] * c2 + b[1][2] * b[1][0] * c3) ) * 0.5 + ( (b[1][0] * b[3][2] * c2 + b[1][2] * b[3][0] * c3) ) * 0.5 + ( (b[2][0] * b[1][2] * c2 + b[2][2] * b[1][0] * c3) ) * 0.5 + ( (b[2][0] * b[3][2] * c2 + b[2][2] * b[3][0] * c3) ) * 1.0 ),      (( (b[1][0] * b[2][0] * c2 + b[1][0] * b[2][0] * c3)+ ((b[1][0] * b[2][0] + b[1][1] * b[2][1] + b[1][2] * b[2][2]) * c3) ) * 0.5 + ( (b[1][0] * b[3][0] * c2 + b[1][0] * b[3][0] * c3)+ ((b[1][0] * b[3][0] + b[1][1] * b[3][1] + b[1][2] * b[3][2]) * c3) ) * 1.0 + ( (b[2][0] * b[2][0] * c2 + b[2][0] * b[2][0] * c3)+ ((b[2][0] * b[2][0] + b[2][1] * b[2][1] + b[2][2] * b[2][2]) * c3) ) * 0.5 + ( (b[2][0] * b[3][0] * c2 + b[2][0] * b[3][0] * c3)+ ((b[2][0] * b[3][0] + b[2][1] * b[3][1] + b[2][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[1][0] * b[2][1] * c2 + b[1][1] * b[2][0] * c3) ) * 0.5 + ( (b[1][0] * b[3][1] * c2 + b[1][1] * b[3][0] * c3) ) * 1.0 + ( (b[2][0] * b[2][1] * c2 + b[2][1] * b[2][0] * c3) ) * 0.5 + ( (b[2][0] * b[3][1] * c2 + b[2][1] * b[3][0] * c3) ) * 0.5 ),      (( (b[1][0] * b[2][2] * c2 + b[1][2] * b[2][0] * c3) ) * 0.5 + ( (b[1][0] * b[3][2] * c2 + b[1][2] * b[3][0] * c3) ) * 1.0 + ( (b[2][0] * b[2][2] * c2 + b[2][2] * b[2][0] * c3) ) * 0.5 + ( (b[2][0] * b[3][2] * c2 + b[2][2] * b[3][0] * c3) ) * 0.5 )},
{ (( (b[1][1] * b[0][0] * c2 + b[1][0] * b[0][1] * c3) ) * 0.5 + ( (b[2][1] * b[0][0] * c2 + b[2][0] * b[0][1] * c3) ) * 0.5 ),      (( (b[1][1] * b[0][1] * c2 + b[1][1] * b[0][1] * c3)+ ((b[1][0] * b[0][0] + b[1][1] * b[0][1] + b[1][2] * b[0][2]) * c3) ) * 0.5 + ( (b[2][1] * b[0][1] * c2 + b[2][1] * b[0][1] * c3)+ ((b[2][0] * b[0][0] + b[2][1] * b[0][1] + b[2][2] * b[0][2]) * c3) ) * 0.5 ),      (( (b[1][1] * b[0][2] * c2 + b[1][2] * b[0][1] * c3) ) * 0.5 + ( (b[2][1] * b[0][2] * c2 + b[2][2] * b[0][1] * c3) ) * 0.5 ),      (( (b[1][1] * b[1][0] * c2 + b[1][0] * b[1][1] * c3) ) * 0.5 + ( (b[2][1] * b[1][0] * c2 + b[2][0] * b[1][1] * c3) ) * 1.0 ),      (( (b[1][1] * b[1][1] * c2 + b[1][1] * b[1][1] * c3)+ ((b[1][0] * b[1][0] + b[1][1] * b[1][1] + b[1][2] * b[1][2]) * c3) ) * 0.5 + ( (b[2][1] * b[1][1] * c2 + b[2][1] * b[1][1] * c3)+ ((b[2][0] * b[1][0] + b[2][1] * b[1][1] + b[2][2] * b[1][2]) * c3) ) * 1.0 ),      (( (b[1][1] * b[1][2] * c2 + b[1][2] * b[1][1] * c3) ) * 0.5 + ( (b[2][1] * b[1][2] * c2 + b[2][2] * b[1][1] * c3) ) * 1.0 ),      (( (b[1][1] * b[2][0] * c2 + b[1][0] * b[2][1] * c3) ) * 1.0 + ( (b[2][1] * b[2][0] * c2 + b[2][0] * b[2][1] * c3) ) * 0.5 ),      (( (b[1][1] * b[2][1] * c2 + b[1][1] * b[2][1] * c3)+ ((b[1][0] * b[2][0] + b[1][1] * b[2][1] + b[1][2] * b[2][2]) * c3) ) * 1.0 + ( (b[2][1] * b[2][1] * c2 + b[2][1] * b[2][1] * c3)+ ((b[2][0] * b[2][0] + b[2][1] * b[2][1] + b[2][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[1][1] * b[2][2] * c2 + b[1][2] * b[2][1] * c3) ) * 1.0 + ( (b[2][1] * b[2][2] * c2 + b[2][2] * b[2][1] * c3) ) * 0.5 ),      (( (b[1][1] * b[3][0] * c2 + b[1][0] * b[3][1] * c3) ) * 0.5 + ( (b[2][1] * b[3][0] * c2 + b[2][0] * b[3][1] * c3) ) * 0.5 ),      (( (b[1][1] * b[3][1] * c2 + b[1][1] * b[3][1] * c3)+ ((b[1][0] * b[3][0] + b[1][1] * b[3][1] + b[1][2] * b[3][2]) * c3) ) * 0.5 + ( (b[2][1] * b[3][1] * c2 + b[2][1] * b[3][1] * c3)+ ((b[2][0] * b[3][0] + b[2][1] * b[3][1] + b[2][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[1][1] * b[3][2] * c2 + b[1][2] * b[3][1] * c3) ) * 0.5 + ( (b[2][1] * b[3][2] * c2 + b[2][2] * b[3][1] * c3) ) * 0.5 ),      (( (b[1][1] * b[0][0] * c2 + b[1][0] * b[0][1] * c3) ) * 0.5 + ( (b[1][1] * b[1][0] * c2 + b[1][0] * b[1][1] * c3) ) * 0.5 + ( (b[2][1] * b[0][0] * c2 + b[2][0] * b[0][1] * c3) ) * 1.0 + ( (b[2][1] * b[1][0] * c2 + b[2][0] * b[1][1] * c3) ) * 0.5 ),      (( (b[1][1] * b[0][1] * c2 + b[1][1] * b[0][1] * c3)+ ((b[1][0] * b[0][0] + b[1][1] * b[0][1] + b[1][2] * b[0][2]) * c3) ) * 0.5 + ( (b[1][1] * b[1][1] * c2 + b[1][1] * b[1][1] * c3)+ ((b[1][0] * b[1][0] + b[1][1] * b[1][1] + b[1][2] * b[1][2]) * c3) ) * 0.5 + ( (b[2][1] * b[0][1] * c2 + b[2][1] * b[0][1] * c3)+ ((b[2][0] * b[0][0] + b[2][1] * b[0][1] + b[2][2] * b[0][2]) * c3) ) * 1.0 + ( (b[2][1] * b[1][1] * c2 + b[2][1] * b[1][1] * c3)+ ((b[2][0] * b[1][0] + b[2][1] * b[1][1] + b[2][2] * b[1][2]) * c3) ) * 0.5 ),      (( (b[1][1] * b[0][2] * c2 + b[1][2] * b[0][1] * c3) ) * 0.5 + ( (b[1][1] * b[1][2] * c2 + b[1][2] * b[1][1] * c3) ) * 0.5 + ( (b[2][1] * b[0][2] * c2 + b[2][2] * b[0][1] * c3) ) * 1.0 + ( (b[2][1] * b[1][2] * c2 + b[2][2] * b[1][1] * c3) ) * 0.5 ),      (( (b[1][1] * b[1][0] * c2 + b[1][0] * b[1][1] * c3) ) * 1.0 + ( (b[1][1] * b[2][0] * c2 + b[1][0] * b[2][1] * c3) ) * 0.5 + ( (b[2][1] * b[1][0] * c2 + b[2][0] * b[1][1] * c3) ) * 0.5 + ( (b[2][1] * b[2][0] * c2 + b[2][0] * b[2][1] * c3) ) * 1.0 ),      (( (b[1][1] * b[1][1] * c2 + b[1][1] * b[1][1] * c3)+ ((b[1][0] * b[1][0] + b[1][1] * b[1][1] + b[1][2] * b[1][2]) * c3) ) * 1.0 + ( (b[1][1] * b[2][1] * c2 + b[1][1] * b[2][1] * c3)+ ((b[1][0] * b[2][0] + b[1][1] * b[2][1] + b[1][2] * b[2][2]) * c3) ) * 0.5 + ( (b[2][1] * b[1][1] * c2 + b[2][1] * b[1][1] * c3)+ ((b[2][0] * b[1][0] + b[2][1] * b[1][1] + b[2][2] * b[1][2]) * c3) ) * 0.5 + ( (b[2][1] * b[2][1] * c2 + b[2][1] * b[2][1] * c3)+ ((b[2][0] * b[2][0] + b[2][1] * b[2][1] + b[2][2] * b[2][2]) * c3) ) * 1.0 ),      (( (b[1][1] * b[1][2] * c2 + b[1][2] * b[1][1] * c3) ) * 1.0 + ( (b[1][1] * b[2][2] * c2 + b[1][2] * b[2][1] * c3) ) * 0.5 + ( (b[2][1] * b[1][2] * c2 + b[2][2] * b[1][1] * c3) ) * 0.5 + ( (b[2][1] * b[2][2] * c2 + b[2][2] * b[2][1] * c3) ) * 1.0 ),      (( (b[1][1] * b[0][0] * c2 + b[1][0] * b[0][1] * c3) ) * 1.0 + ( (b[1][1] * b[2][0] * c2 + b[1][0] * b[2][1] * c3) ) * 0.5 + ( (b[2][1] * b[0][0] * c2 + b[2][0] * b[0][1] * c3) ) * 0.5 + ( (b[2][1] * b[2][0] * c2 + b[2][0] * b[2][1] * c3) ) * 0.5 ),      (( (b[1][1] * b[0][1] * c2 + b[1][1] * b[0][1] * c3)+ ((b[1][0] * b[0][0] + b[1][1] * b[0][1] + b[1][2] * b[0][2]) * c3) ) * 1.0 + ( (b[1][1] * b[2][1] * c2 + b[1][1] * b[2][1] * c3)+ ((b[1][0] * b[2][0] + b[1][1] * b[2][1] + b[1][2] * b[2][2]) * c3) ) * 0.5 + ( (b[2][1] * b[0][1] * c2 + b[2][1] * b[0][1] * c3)+ ((b[2][0] * b[0][0] + b[2][1] * b[0][1] + b[2][2] * b[0][2]) * c3) ) * 0.5 + ( (b[2][1] * b[2][1] * c2 + b[2][1] * b[2][1] * c3)+ ((b[2][0] * b[2][0] + b[2][1] * b[2][1] + b[2][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[1][1] * b[0][2] * c2 + b[1][2] * b[0][1] * c3) ) * 1.0 + ( (b[1][1] * b[2][2] * c2 + b[1][2] * b[2][1] * c3) ) * 0.5 + ( (b[2][1] * b[0][2] * c2 + b[2][2] * b[0][1] * c3) ) * 0.5 + ( (b[2][1] * b[2][2] * c2 + b[2][2] * b[2][1] * c3) ) * 0.5 ),      (( (b[1][1] * b[0][0] * c2 + b[1][0] * b[0][1] * c3) ) * 0.5 + ( (b[1][1] * b[3][0] * c2 + b[1][0] * b[3][1] * c3) ) * 0.5 + ( (b[2][1] * b[0][0] * c2 + b[2][0] * b[0][1] * c3) ) * 0.5 + ( (b[2][1] * b[3][0] * c2 + b[2][0] * b[3][1] * c3) ) * 0.5 ),      (( (b[1][1] * b[0][1] * c2 + b[1][1] * b[0][1] * c3)+ ((b[1][0] * b[0][0] + b[1][1] * b[0][1] + b[1][2] * b[0][2]) * c3) ) * 0.5 + ( (b[1][1] * b[3][1] * c2 + b[1][1] * b[3][1] * c3)+ ((b[1][0] * b[3][0] + b[1][1] * b[3][1] + b[1][2] * b[3][2]) * c3) ) * 0.5 + ( (b[2][1] * b[0][1] * c2 + b[2][1] * b[0][1] * c3)+ ((b[2][0] * b[0][0] + b[2][1] * b[0][1] + b[2][2] * b[0][2]) * c3) ) * 0.5 + ( (b[2][1] * b[3][1] * c2 + b[2][1] * b[3][1] * c3)+ ((b[2][0] * b[3][0] + b[2][1] * b[3][1] + b[2][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[1][1] * b[0][2] * c2 + b[1][2] * b[0][1] * c3) ) * 0.5 + ( (b[1][1] * b[3][2] * c2 + b[1][2] * b[3][1] * c3) ) * 0.5 + ( (b[2][1] * b[0][2] * c2 + b[2][2] * b[0][1] * c3) ) * 0.5 + ( (b[2][1] * b[3][2] * c2 + b[2][2] * b[3][1] * c3) ) * 0.5 ),      (( (b[1][1] * b[1][0] * c2 + b[1][0] * b[1][1] * c3) ) * 0.5 + ( (b[1][1] * b[3][0] * c2 + b[1][0] * b[3][1] * c3) ) * 0.5 + ( (b[2][1] * b[1][0] * c2 + b[2][0] * b[1][1] * c3) ) * 0.5 + ( (b[2][1] * b[3][0] * c2 + b[2][0] * b[3][1] * c3) ) * 1.0 ),      (( (b[1][1] * b[1][1] * c2 + b[1][1] * b[1][1] * c3)+ ((b[1][0] * b[1][0] + b[1][1] * b[1][1] + b[1][2] * b[1][2]) * c3) ) * 0.5 + ( (b[1][1] * b[3][1] * c2 + b[1][1] * b[3][1] * c3)+ ((b[1][0] * b[3][0] + b[1][1] * b[3][1] + b[1][2] * b[3][2]) * c3) ) * 0.5 + ( (b[2][1] * b[1][1] * c2 + b[2][1] * b[1][1] * c3)+ ((b[2][0] * b[1][0] + b[2][1] * b[1][1] + b[2][2] * b[1][2]) * c3) ) * 0.5 + ( (b[2][1] * b[3][1] * c2 + b[2][1] * b[3][1] * c3)+ ((b[2][0] * b[3][0] + b[2][1] * b[3][1] + b[2][2] * b[3][2]) * c3) ) * 1.0 ),      (( (b[1][1] * b[1][2] * c2 + b[1][2] * b[1][1] * c3) ) * 0.5 + ( (b[1][1] * b[3][2] * c2 + b[1][2] * b[3][1] * c3) ) * 0.5 + ( (b[2][1] * b[1][2] * c2 + b[2][2] * b[1][1] * c3) ) * 0.5 + ( (b[2][1] * b[3][2] * c2 + b[2][2] * b[3][1] * c3) ) * 1.0 ),      (( (b[1][1] * b[2][0] * c2 + b[1][0] * b[2][1] * c3) ) * 0.5 + ( (b[1][1] * b[3][0] * c2 + b[1][0] * b[3][1] * c3) ) * 1.0 + ( (b[2][1] * b[2][0] * c2 + b[2][0] * b[2][1] * c3) ) * 0.5 + ( (b[2][1] * b[3][0] * c2 + b[2][0] * b[3][1] * c3) ) * 0.5 ),      (( (b[1][1] * b[2][1] * c2 + b[1][1] * b[2][1] * c3)+ ((b[1][0] * b[2][0] + b[1][1] * b[2][1] + b[1][2] * b[2][2]) * c3) ) * 0.5 + ( (b[1][1] * b[3][1] * c2 + b[1][1] * b[3][1] * c3)+ ((b[1][0] * b[3][0] + b[1][1] * b[3][1] + b[1][2] * b[3][2]) * c3) ) * 1.0 + ( (b[2][1] * b[2][1] * c2 + b[2][1] * b[2][1] * c3)+ ((b[2][0] * b[2][0] + b[2][1] * b[2][1] + b[2][2] * b[2][2]) * c3) ) * 0.5 + ( (b[2][1] * b[3][1] * c2 + b[2][1] * b[3][1] * c3)+ ((b[2][0] * b[3][0] + b[2][1] * b[3][1] + b[2][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[1][1] * b[2][2] * c2 + b[1][2] * b[2][1] * c3) ) * 0.5 + ( (b[1][1] * b[3][2] * c2 + b[1][2] * b[3][1] * c3) ) * 1.0 + ( (b[2][1] * b[2][2] * c2 + b[2][2] * b[2][1] * c3) ) * 0.5 + ( (b[2][1] * b[3][2] * c2 + b[2][2] * b[3][1] * c3) ) * 0.5 )},
{ (( (b[1][2] * b[0][0] * c2 + b[1][0] * b[0][2] * c3) ) * 0.5 + ( (b[2][2] * b[0][0] * c2 + b[2][0] * b[0][2] * c3) ) * 0.5 ),      (( (b[1][2] * b[0][1] * c2 + b[1][1] * b[0][2] * c3) ) * 0.5 + ( (b[2][2] * b[0][1] * c2 + b[2][1] * b[0][2] * c3) ) * 0.5 ),      (( (b[1][2] * b[0][2] * c2 + b[1][2] * b[0][2] * c3)+ ((b[1][0] * b[0][0] + b[1][1] * b[0][1] + b[1][2] * b[0][2]) * c3) ) * 0.5 + ( (b[2][2] * b[0][2] * c2 + b[2][2] * b[0][2] * c3)+ ((b[2][0] * b[0][0] + b[2][1] * b[0][1] + b[2][2] * b[0][2]) * c3) ) * 0.5 ),      (( (b[1][2] * b[1][0] * c2 + b[1][0] * b[1][2] * c3) ) * 0.5 + ( (b[2][2] * b[1][0] * c2 + b[2][0] * b[1][2] * c3) ) * 1.0 ),      (( (b[1][2] * b[1][1] * c2 + b[1][1] * b[1][2] * c3) ) * 0.5 + ( (b[2][2] * b[1][1] * c2 + b[2][1] * b[1][2] * c3) ) * 1.0 ),      (( (b[1][2] * b[1][2] * c2 + b[1][2] * b[1][2] * c3)+ ((b[1][0] * b[1][0] + b[1][1] * b[1][1] + b[1][2] * b[1][2]) * c3) ) * 0.5 + ( (b[2][2] * b[1][2] * c2 + b[2][2] * b[1][2] * c3)+ ((b[2][0] * b[1][0] + b[2][1] * b[1][1] + b[2][2] * b[1][2]) * c3) ) * 1.0 ),      (( (b[1][2] * b[2][0] * c2 + b[1][0] * b[2][2] * c3) ) * 1.0 + ( (b[2][2] * b[2][0] * c2 + b[2][0] * b[2][2] * c3) ) * 0.5 ),      (( (b[1][2] * b[2][1] * c2 + b[1][1] * b[2][2] * c3) ) * 1.0 + ( (b[2][2] * b[2][1] * c2 + b[2][1] * b[2][2] * c3) ) * 0.5 ),      (( (b[1][2] * b[2][2] * c2 + b[1][2] * b[2][2] * c3)+ ((b[1][0] * b[2][0] + b[1][1] * b[2][1] + b[1][2] * b[2][2]) * c3) ) * 1.0 + ( (b[2][2] * b[2][2] * c2 + b[2][2] * b[2][2] * c3)+ ((b[2][0] * b[2][0] + b[2][1] * b[2][1] + b[2][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[1][2] * b[3][0] * c2 + b[1][0] * b[3][2] * c3) ) * 0.5 + ( (b[2][2] * b[3][0] * c2 + b[2][0] * b[3][2] * c3) ) * 0.5 ),      (( (b[1][2] * b[3][1] * c2 + b[1][1] * b[3][2] * c3) ) * 0.5 + ( (b[2][2] * b[3][1] * c2 + b[2][1] * b[3][2] * c3) ) * 0.5 ),      (( (b[1][2] * b[3][2] * c2 + b[1][2] * b[3][2] * c3)+ ((b[1][0] * b[3][0] + b[1][1] * b[3][1] + b[1][2] * b[3][2]) * c3) ) * 0.5 + ( (b[2][2] * b[3][2] * c2 + b[2][2] * b[3][2] * c3)+ ((b[2][0] * b[3][0] + b[2][1] * b[3][1] + b[2][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[1][2] * b[0][0] * c2 + b[1][0] * b[0][2] * c3) ) * 0.5 + ( (b[1][2] * b[1][0] * c2 + b[1][0] * b[1][2] * c3) ) * 0.5 + ( (b[2][2] * b[0][0] * c2 + b[2][0] * b[0][2] * c3) ) * 1.0 + ( (b[2][2] * b[1][0] * c2 + b[2][0] * b[1][2] * c3) ) * 0.5 ),      (( (b[1][2] * b[0][1] * c2 + b[1][1] * b[0][2] * c3) ) * 0.5 + ( (b[1][2] * b[1][1] * c2 + b[1][1] * b[1][2] * c3) ) * 0.5 + ( (b[2][2] * b[0][1] * c2 + b[2][1] * b[0][2] * c3) ) * 1.0 + ( (b[2][2] * b[1][1] * c2 + b[2][1] * b[1][2] * c3) ) * 0.5 ),      (( (b[1][2] * b[0][2] * c2 + b[1][2] * b[0][2] * c3)+ ((b[1][0] * b[0][0] + b[1][1] * b[0][1] + b[1][2] * b[0][2]) * c3) ) * 0.5 + ( (b[1][2] * b[1][2] * c2 + b[1][2] * b[1][2] * c3)+ ((b[1][0] * b[1][0] + b[1][1] * b[1][1] + b[1][2] * b[1][2]) * c3) ) * 0.5 + ( (b[2][2] * b[0][2] * c2 + b[2][2] * b[0][2] * c3)+ ((b[2][0] * b[0][0] + b[2][1] * b[0][1] + b[2][2] * b[0][2]) * c3) ) * 1.0 + ( (b[2][2] * b[1][2] * c2 + b[2][2] * b[1][2] * c3)+ ((b[2][0] * b[1][0] + b[2][1] * b[1][1] + b[2][2] * b[1][2]) * c3) ) * 0.5 ),      (( (b[1][2] * b[1][0] * c2 + b[1][0] * b[1][2] * c3) ) * 1.0 + ( (b[1][2] * b[2][0] * c2 + b[1][0] * b[2][2] * c3) ) * 0.5 + ( (b[2][2] * b[1][0] * c2 + b[2][0] * b[1][2] * c3) ) * 0.5 + ( (b[2][2] * b[2][0] * c2 + b[2][0] * b[2][2] * c3) ) * 1.0 ),      (( (b[1][2] * b[1][1] * c2 + b[1][1] * b[1][2] * c3) ) * 1.0 + ( (b[1][2] * b[2][1] * c2 + b[1][1] * b[2][2] * c3) ) * 0.5 + ( (b[2][2] * b[1][1] * c2 + b[2][1] * b[1][2] * c3) ) * 0.5 + ( (b[2][2] * b[2][1] * c2 + b[2][1] * b[2][2] * c3) ) * 1.0 ),      (( (b[1][2] * b[1][2] * c2 + b[1][2] * b[1][2] * c3)+ ((b[1][0] * b[1][0] + b[1][1] * b[1][1] + b[1][2] * b[1][2]) * c3) ) * 1.0 + ( (b[1][2] * b[2][2] * c2 + b[1][2] * b[2][2] * c3)+ ((b[1][0] * b[2][0] + b[1][1] * b[2][1] + b[1][2] * b[2][2]) * c3) ) * 0.5 + ( (b[2][2] * b[1][2] * c2 + b[2][2] * b[1][2] * c3)+ ((b[2][0] * b[1][0] + b[2][1] * b[1][1] + b[2][2] * b[1][2]) * c3) ) * 0.5 + ( (b[2][2] * b[2][2] * c2 + b[2][2] * b[2][2] * c3)+ ((b[2][0] * b[2][0] + b[2][1] * b[2][1] + b[2][2] * b[2][2]) * c3) ) * 1.0 ),      (( (b[1][2] * b[0][0] * c2 + b[1][0] * b[0][2] * c3) ) * 1.0 + ( (b[1][2] * b[2][0] * c2 + b[1][0] * b[2][2] * c3) ) * 0.5 + ( (b[2][2] * b[0][0] * c2 + b[2][0] * b[0][2] * c3) ) * 0.5 + ( (b[2][2] * b[2][0] * c2 + b[2][0] * b[2][2] * c3) ) * 0.5 ),      (( (b[1][2] * b[0][1] * c2 + b[1][1] * b[0][2] * c3) ) * 1.0 + ( (b[1][2] * b[2][1] * c2 + b[1][1] * b[2][2] * c3) ) * 0.5 + ( (b[2][2] * b[0][1] * c2 + b[2][1] * b[0][2] * c3) ) * 0.5 + ( (b[2][2] * b[2][1] * c2 + b[2][1] * b[2][2] * c3) ) * 0.5 ),      (( (b[1][2] * b[0][2] * c2 + b[1][2] * b[0][2] * c3)+ ((b[1][0] * b[0][0] + b[1][1] * b[0][1] + b[1][2] * b[0][2]) * c3) ) * 1.0 + ( (b[1][2] * b[2][2] * c2 + b[1][2] * b[2][2] * c3)+ ((b[1][0] * b[2][0] + b[1][1] * b[2][1] + b[1][2] * b[2][2]) * c3) ) * 0.5 + ( (b[2][2] * b[0][2] * c2 + b[2][2] * b[0][2] * c3)+ ((b[2][0] * b[0][0] + b[2][1] * b[0][1] + b[2][2] * b[0][2]) * c3) ) * 0.5 + ( (b[2][2] * b[2][2] * c2 + b[2][2] * b[2][2] * c3)+ ((b[2][0] * b[2][0] + b[2][1] * b[2][1] + b[2][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[1][2] * b[0][0] * c2 + b[1][0] * b[0][2] * c3) ) * 0.5 + ( (b[1][2] * b[3][0] * c2 + b[1][0] * b[3][2] * c3) ) * 0.5 + ( (b[2][2] * b[0][0] * c2 + b[2][0] * b[0][2] * c3) ) * 0.5 + ( (b[2][2] * b[3][0] * c2 + b[2][0] * b[3][2] * c3) ) * 0.5 ),      (( (b[1][2] * b[0][1] * c2 + b[1][1] * b[0][2] * c3) ) * 0.5 + ( (b[1][2] * b[3][1] * c2 + b[1][1] * b[3][2] * c3) ) * 0.5 + ( (b[2][2] * b[0][1] * c2 + b[2][1] * b[0][2] * c3) ) * 0.5 + ( (b[2][2] * b[3][1] * c2 + b[2][1] * b[3][2] * c3) ) * 0.5 ),      (( (b[1][2] * b[0][2] * c2 + b[1][2] * b[0][2] * c3)+ ((b[1][0] * b[0][0] + b[1][1] * b[0][1] + b[1][2] * b[0][2]) * c3) ) * 0.5 + ( (b[1][2] * b[3][2] * c2 + b[1][2] * b[3][2] * c3)+ ((b[1][0] * b[3][0] + b[1][1] * b[3][1] + b[1][2] * b[3][2]) * c3) ) * 0.5 + ( (b[2][2] * b[0][2] * c2 + b[2][2] * b[0][2] * c3)+ ((b[2][0] * b[0][0] + b[2][1] * b[0][1] + b[2][2] * b[0][2]) * c3) ) * 0.5 + ( (b[2][2] * b[3][2] * c2 + b[2][2] * b[3][2] * c3)+ ((b[2][0] * b[3][0] + b[2][1] * b[3][1] + b[2][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[1][2] * b[1][0] * c2 + b[1][0] * b[1][2] * c3) ) * 0.5 + ( (b[1][2] * b[3][0] * c2 + b[1][0] * b[3][2] * c3) ) * 0.5 + ( (b[2][2] * b[1][0] * c2 + b[2][0] * b[1][2] * c3) ) * 0.5 + ( (b[2][2] * b[3][0] * c2 + b[2][0] * b[3][2] * c3) ) * 1.0 ),      (( (b[1][2] * b[1][1] * c2 + b[1][1] * b[1][2] * c3) ) * 0.5 + ( (b[1][2] * b[3][1] * c2 + b[1][1] * b[3][2] * c3) ) * 0.5 + ( (b[2][2] * b[1][1] * c2 + b[2][1] * b[1][2] * c3) ) * 0.5 + ( (b[2][2] * b[3][1] * c2 + b[2][1] * b[3][2] * c3) ) * 1.0 ),      (( (b[1][2] * b[1][2] * c2 + b[1][2] * b[1][2] * c3)+ ((b[1][0] * b[1][0] + b[1][1] * b[1][1] + b[1][2] * b[1][2]) * c3) ) * 0.5 + ( (b[1][2] * b[3][2] * c2 + b[1][2] * b[3][2] * c3)+ ((b[1][0] * b[3][0] + b[1][1] * b[3][1] + b[1][2] * b[3][2]) * c3) ) * 0.5 + ( (b[2][2] * b[1][2] * c2 + b[2][2] * b[1][2] * c3)+ ((b[2][0] * b[1][0] + b[2][1] * b[1][1] + b[2][2] * b[1][2]) * c3) ) * 0.5 + ( (b[2][2] * b[3][2] * c2 + b[2][2] * b[3][2] * c3)+ ((b[2][0] * b[3][0] + b[2][1] * b[3][1] + b[2][2] * b[3][2]) * c3) ) * 1.0 ),      (( (b[1][2] * b[2][0] * c2 + b[1][0] * b[2][2] * c3) ) * 0.5 + ( (b[1][2] * b[3][0] * c2 + b[1][0] * b[3][2] * c3) ) * 1.0 + ( (b[2][2] * b[2][0] * c2 + b[2][0] * b[2][2] * c3) ) * 0.5 + ( (b[2][2] * b[3][0] * c2 + b[2][0] * b[3][2] * c3) ) * 0.5 ),      (( (b[1][2] * b[2][1] * c2 + b[1][1] * b[2][2] * c3) ) * 0.5 + ( (b[1][2] * b[3][1] * c2 + b[1][1] * b[3][2] * c3) ) * 1.0 + ( (b[2][2] * b[2][1] * c2 + b[2][1] * b[2][2] * c3) ) * 0.5 + ( (b[2][2] * b[3][1] * c2 + b[2][1] * b[3][2] * c3) ) * 0.5 ),      (( (b[1][2] * b[2][2] * c2 + b[1][2] * b[2][2] * c3)+ ((b[1][0] * b[2][0] + b[1][1] * b[2][1] + b[1][2] * b[2][2]) * c3) ) * 0.5 + ( (b[1][2] * b[3][2] * c2 + b[1][2] * b[3][2] * c3)+ ((b[1][0] * b[3][0] + b[1][1] * b[3][1] + b[1][2] * b[3][2]) * c3) ) * 1.0 + ( (b[2][2] * b[2][2] * c2 + b[2][2] * b[2][2] * c3)+ ((b[2][0] * b[2][0] + b[2][1] * b[2][1] + b[2][2] * b[2][2]) * c3) ) * 0.5 + ( (b[2][2] * b[3][2] * c2 + b[2][2] * b[3][2] * c3)+ ((b[2][0] * b[3][0] + b[2][1] * b[3][1] + b[2][2] * b[3][2]) * c3) ) * 0.5 )},
{ (( (b[0][0] * b[0][0] * c2 + b[0][0] * b[0][0] * c3)+ ((b[0][0] * b[0][0] + b[0][1] * b[0][1] + b[0][2] * b[0][2]) * c3) ) * 0.5 + ( (b[2][0] * b[0][0] * c2 + b[2][0] * b[0][0] * c3)+ ((b[2][0] * b[0][0] + b[2][1] * b[0][1] + b[2][2] * b[0][2]) * c3) ) * 1.0 ),      (( (b[0][0] * b[0][1] * c2 + b[0][1] * b[0][0] * c3) ) * 0.5 + ( (b[2][0] * b[0][1] * c2 + b[2][1] * b[0][0] * c3) ) * 1.0 ),      (( (b[0][0] * b[0][2] * c2 + b[0][2] * b[0][0] * c3) ) * 0.5 + ( (b[2][0] * b[0][2] * c2 + b[2][2] * b[0][0] * c3) ) * 1.0 ),      (( (b[0][0] * b[1][0] * c2 + b[0][0] * b[1][0] * c3)+ ((b[0][0] * b[1][0] + b[0][1] * b[1][1] + b[0][2] * b[1][2]) * c3) ) * 0.5 + ( (b[2][0] * b[1][0] * c2 + b[2][0] * b[1][0] * c3)+ ((b[2][0] * b[1][0] + b[2][1] * b[1][1] + b[2][2] * b[1][2]) * c3) ) * 0.5 ),      (( (b[0][0] * b[1][1] * c2 + b[0][1] * b[1][0] * c3) ) * 0.5 + ( (b[2][0] * b[1][1] * c2 + b[2][1] * b[1][0] * c3) ) * 0.5 ),      (( (b[0][0] * b[1][2] * c2 + b[0][2] * b[1][0] * c3) ) * 0.5 + ( (b[2][0] * b[1][2] * c2 + b[2][2] * b[1][0] * c3) ) * 0.5 ),      (( (b[0][0] * b[2][0] * c2 + b[0][0] * b[2][0] * c3)+ ((b[0][0] * b[2][0] + b[0][1] * b[2][1] + b[0][2] * b[2][2]) * c3) ) * 1.0 + ( (b[2][0] * b[2][0] * c2 + b[2][0] * b[2][0] * c3)+ ((b[2][0] * b[2][0] + b[2][1] * b[2][1] + b[2][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[0][0] * b[2][1] * c2 + b[0][1] * b[2][0] * c3) ) * 1.0 + ( (b[2][0] * b[2][1] * c2 + b[2][1] * b[2][0] * c3) ) * 0.5 ),      (( (b[0][0] * b[2][2] * c2 + b[0][2] * b[2][0] * c3) ) * 1.0 + ( (b[2][0] * b[2][2] * c2 + b[2][2] * b[2][0] * c3) ) * 0.5 ),      (( (b[0][0] * b[3][0] * c2 + b[0][0] * b[3][0] * c3)+ ((b[0][0] * b[3][0] + b[0][1] * b[3][1] + b[0][2] * b[3][2]) * c3) ) * 0.5 + ( (b[2][0] * b[3][0] * c2 + b[2][0] * b[3][0] * c3)+ ((b[2][0] * b[3][0] + b[2][1] * b[3][1] + b[2][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[0][0] * b[3][1] * c2 + b[0][1] * b[3][0] * c3) ) * 0.5 + ( (b[2][0] * b[3][1] * c2 + b[2][1] * b[3][0] * c3) ) * 0.5 ),      (( (b[0][0] * b[3][2] * c2 + b[0][2] * b[3][0] * c3) ) * 0.5 + ( (b[2][0] * b[3][2] * c2 + b[2][2] * b[3][0] * c3) ) * 0.5 ),      (( (b[0][0] * b[0][0] * c2 + b[0][0] * b[0][0] * c3)+ ((b[0][0] * b[0][0] + b[0][1] * b[0][1] + b[0][2] * b[0][2]) * c3) ) * 0.5 + ( (b[0][0] * b[1][0] * c2 + b[0][0] * b[1][0] * c3)+ ((b[0][0] * b[1][0] + b[0][1] * b[1][1] + b[0][2] * b[1][2]) * c3) ) * 0.5 + ( (b[2][0] * b[0][0] * c2 + b[2][0] * b[0][0] * c3)+ ((b[2][0] * b[0][0] + b[2][1] * b[0][1] + b[2][2] * b[0][2]) * c3) ) * 0.5 + ( (b[2][0] * b[1][0] * c2 + b[2][0] * b[1][0] * c3)+ ((b[2][0] * b[1][0] + b[2][1] * b[1][1] + b[2][2] * b[1][2]) * c3) ) * 1.0 ),      (( (b[0][0] * b[0][1] * c2 + b[0][1] * b[0][0] * c3) ) * 0.5 + ( (b[0][0] * b[1][1] * c2 + b[0][1] * b[1][0] * c3) ) * 0.5 + ( (b[2][0] * b[0][1] * c2 + b[2][1] * b[0][0] * c3) ) * 0.5 + ( (b[2][0] * b[1][1] * c2 + b[2][1] * b[1][0] * c3) ) * 1.0 ),      (( (b[0][0] * b[0][2] * c2 + b[0][2] * b[0][0] * c3) ) * 0.5 + ( (b[0][0] * b[1][2] * c2 + b[0][2] * b[1][0] * c3) ) * 0.5 + ( (b[2][0] * b[0][2] * c2 + b[2][2] * b[0][0] * c3) ) * 0.5 + ( (b[2][0] * b[1][2] * c2 + b[2][2] * b[1][0] * c3) ) * 1.0 ),      (( (b[0][0] * b[1][0] * c2 + b[0][0] * b[1][0] * c3)+ ((b[0][0] * b[1][0] + b[0][1] * b[1][1] + b[0][2] * b[1][2]) * c3) ) * 1.0 + ( (b[0][0] * b[2][0] * c2 + b[0][0] * b[2][0] * c3)+ ((b[0][0] * b[2][0] + b[0][1] * b[2][1] + b[0][2] * b[2][2]) * c3) ) * 0.5 + ( (b[2][0] * b[1][0] * c2 + b[2][0] * b[1][0] * c3)+ ((b[2][0] * b[1][0] + b[2][1] * b[1][1] + b[2][2] * b[1][2]) * c3) ) * 0.5 + ( (b[2][0] * b[2][0] * c2 + b[2][0] * b[2][0] * c3)+ ((b[2][0] * b[2][0] + b[2][1] * b[2][1] + b[2][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[0][0] * b[1][1] * c2 + b[0][1] * b[1][0] * c3) ) * 1.0 + ( (b[0][0] * b[2][1] * c2 + b[0][1] * b[2][0] * c3) ) * 0.5 + ( (b[2][0] * b[1][1] * c2 + b[2][1] * b[1][0] * c3) ) * 0.5 + ( (b[2][0] * b[2][1] * c2 + b[2][1] * b[2][0] * c3) ) * 0.5 ),      (( (b[0][0] * b[1][2] * c2 + b[0][2] * b[1][0] * c3) ) * 1.0 + ( (b[0][0] * b[2][2] * c2 + b[0][2] * b[2][0] * c3) ) * 0.5 + ( (b[2][0] * b[1][2] * c2 + b[2][2] * b[1][0] * c3) ) * 0.5 + ( (b[2][0] * b[2][2] * c2 + b[2][2] * b[2][0] * c3) ) * 0.5 ),      (( (b[0][0] * b[0][0] * c2 + b[0][0] * b[0][0] * c3)+ ((b[0][0] * b[0][0] + b[0][1] * b[0][1] + b[0][2] * b[0][2]) * c3) ) * 1.0 + ( (b[0][0] * b[2][0] * c2 + b[0][0] * b[2][0] * c3)+ ((b[0][0] * b[2][0] + b[0][1] * b[2][1] + b[0][2] * b[2][2]) * c3) ) * 0.5 + ( (b[2][0] * b[0][0] * c2 + b[2][0] * b[0][0] * c3)+ ((b[2][0] * b[0][0] + b[2][1] * b[0][1] + b[2][2] * b[0][2]) * c3) ) * 0.5 + ( (b[2][0] * b[2][0] * c2 + b[2][0] * b[2][0] * c3)+ ((b[2][0] * b[2][0] + b[2][1] * b[2][1] + b[2][2] * b[2][2]) * c3) ) * 1.0 ),      (( (b[0][0] * b[0][1] * c2 + b[0][1] * b[0][0] * c3) ) * 1.0 + ( (b[0][0] * b[2][1] * c2 + b[0][1] * b[2][0] * c3) ) * 0.5 + ( (b[2][0] * b[0][1] * c2 + b[2][1] * b[0][0] * c3) ) * 0.5 + ( (b[2][0] * b[2][1] * c2 + b[2][1] * b[2][0] * c3) ) * 1.0 ),      (( (b[0][0] * b[0][2] * c2 + b[0][2] * b[0][0] * c3) ) * 1.0 + ( (b[0][0] * b[2][2] * c2 + b[0][2] * b[2][0] * c3) ) * 0.5 + ( (b[2][0] * b[0][2] * c2 + b[2][2] * b[0][0] * c3) ) * 0.5 + ( (b[2][0] * b[2][2] * c2 + b[2][2] * b[2][0] * c3) ) * 1.0 ),      (( (b[0][0] * b[0][0] * c2 + b[0][0] * b[0][0] * c3)+ ((b[0][0] * b[0][0] + b[0][1] * b[0][1] + b[0][2] * b[0][2]) * c3) ) * 0.5 + ( (b[0][0] * b[3][0] * c2 + b[0][0] * b[3][0] * c3)+ ((b[0][0] * b[3][0] + b[0][1] * b[3][1] + b[0][2] * b[3][2]) * c3) ) * 0.5 + ( (b[2][0] * b[0][0] * c2 + b[2][0] * b[0][0] * c3)+ ((b[2][0] * b[0][0] + b[2][1] * b[0][1] + b[2][2] * b[0][2]) * c3) ) * 0.5 + ( (b[2][0] * b[3][0] * c2 + b[2][0] * b[3][0] * c3)+ ((b[2][0] * b[3][0] + b[2][1] * b[3][1] + b[2][2] * b[3][2]) * c3) ) * 1.0 ),      (( (b[0][0] * b[0][1] * c2 + b[0][1] * b[0][0] * c3) ) * 0.5 + ( (b[0][0] * b[3][1] * c2 + b[0][1] * b[3][0] * c3) ) * 0.5 + ( (b[2][0] * b[0][1] * c2 + b[2][1] * b[0][0] * c3) ) * 0.5 + ( (b[2][0] * b[3][1] * c2 + b[2][1] * b[3][0] * c3) ) * 1.0 ),      (( (b[0][0] * b[0][2] * c2 + b[0][2] * b[0][0] * c3) ) * 0.5 + ( (b[0][0] * b[3][2] * c2 + b[0][2] * b[3][0] * c3) ) * 0.5 + ( (b[2][0] * b[0][2] * c2 + b[2][2] * b[0][0] * c3) ) * 0.5 + ( (b[2][0] * b[3][2] * c2 + b[2][2] * b[3][0] * c3) ) * 1.0 ),      (( (b[0][0] * b[1][0] * c2 + b[0][0] * b[1][0] * c3)+ ((b[0][0] * b[1][0] + b[0][1] * b[1][1] + b[0][2] * b[1][2]) * c3) ) * 0.5 + ( (b[0][0] * b[3][0] * c2 + b[0][0] * b[3][0] * c3)+ ((b[0][0] * b[3][0] + b[0][1] * b[3][1] + b[0][2] * b[3][2]) * c3) ) * 0.5 + ( (b[2][0] * b[1][0] * c2 + b[2][0] * b[1][0] * c3)+ ((b[2][0] * b[1][0] + b[2][1] * b[1][1] + b[2][2] * b[1][2]) * c3) ) * 0.5 + ( (b[2][0] * b[3][0] * c2 + b[2][0] * b[3][0] * c3)+ ((b[2][0] * b[3][0] + b[2][1] * b[3][1] + b[2][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[0][0] * b[1][1] * c2 + b[0][1] * b[1][0] * c3) ) * 0.5 + ( (b[0][0] * b[3][1] * c2 + b[0][1] * b[3][0] * c3) ) * 0.5 + ( (b[2][0] * b[1][1] * c2 + b[2][1] * b[1][0] * c3) ) * 0.5 + ( (b[2][0] * b[3][1] * c2 + b[2][1] * b[3][0] * c3) ) * 0.5 ),      (( (b[0][0] * b[1][2] * c2 + b[0][2] * b[1][0] * c3) ) * 0.5 + ( (b[0][0] * b[3][2] * c2 + b[0][2] * b[3][0] * c3) ) * 0.5 + ( (b[2][0] * b[1][2] * c2 + b[2][2] * b[1][0] * c3) ) * 0.5 + ( (b[2][0] * b[3][2] * c2 + b[2][2] * b[3][0] * c3) ) * 0.5 ),      (( (b[0][0] * b[2][0] * c2 + b[0][0] * b[2][0] * c3)+ ((b[0][0] * b[2][0] + b[0][1] * b[2][1] + b[0][2] * b[2][2]) * c3) ) * 0.5 + ( (b[0][0] * b[3][0] * c2 + b[0][0] * b[3][0] * c3)+ ((b[0][0] * b[3][0] + b[0][1] * b[3][1] + b[0][2] * b[3][2]) * c3) ) * 1.0 + ( (b[2][0] * b[2][0] * c2 + b[2][0] * b[2][0] * c3)+ ((b[2][0] * b[2][0] + b[2][1] * b[2][1] + b[2][2] * b[2][2]) * c3) ) * 0.5 + ( (b[2][0] * b[3][0] * c2 + b[2][0] * b[3][0] * c3)+ ((b[2][0] * b[3][0] + b[2][1] * b[3][1] + b[2][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[0][0] * b[2][1] * c2 + b[0][1] * b[2][0] * c3) ) * 0.5 + ( (b[0][0] * b[3][1] * c2 + b[0][1] * b[3][0] * c3) ) * 1.0 + ( (b[2][0] * b[2][1] * c2 + b[2][1] * b[2][0] * c3) ) * 0.5 + ( (b[2][0] * b[3][1] * c2 + b[2][1] * b[3][0] * c3) ) * 0.5 ),      (( (b[0][0] * b[2][2] * c2 + b[0][2] * b[2][0] * c3) ) * 0.5 + ( (b[0][0] * b[3][2] * c2 + b[0][2] * b[3][0] * c3) ) * 1.0 + ( (b[2][0] * b[2][2] * c2 + b[2][2] * b[2][0] * c3) ) * 0.5 + ( (b[2][0] * b[3][2] * c2 + b[2][2] * b[3][0] * c3) ) * 0.5 )},
{ (( (b[0][1] * b[0][0] * c2 + b[0][0] * b[0][1] * c3) ) * 0.5 + ( (b[2][1] * b[0][0] * c2 + b[2][0] * b[0][1] * c3) ) * 1.0 ),      (( (b[0][1] * b[0][1] * c2 + b[0][1] * b[0][1] * c3)+ ((b[0][0] * b[0][0] + b[0][1] * b[0][1] + b[0][2] * b[0][2]) * c3) ) * 0.5 + ( (b[2][1] * b[0][1] * c2 + b[2][1] * b[0][1] * c3)+ ((b[2][0] * b[0][0] + b[2][1] * b[0][1] + b[2][2] * b[0][2]) * c3) ) * 1.0 ),      (( (b[0][1] * b[0][2] * c2 + b[0][2] * b[0][1] * c3) ) * 0.5 + ( (b[2][1] * b[0][2] * c2 + b[2][2] * b[0][1] * c3) ) * 1.0 ),      (( (b[0][1] * b[1][0] * c2 + b[0][0] * b[1][1] * c3) ) * 0.5 + ( (b[2][1] * b[1][0] * c2 + b[2][0] * b[1][1] * c3) ) * 0.5 ),      (( (b[0][1] * b[1][1] * c2 + b[0][1] * b[1][1] * c3)+ ((b[0][0] * b[1][0] + b[0][1] * b[1][1] + b[0][2] * b[1][2]) * c3) ) * 0.5 + ( (b[2][1] * b[1][1] * c2 + b[2][1] * b[1][1] * c3)+ ((b[2][0] * b[1][0] + b[2][1] * b[1][1] + b[2][2] * b[1][2]) * c3) ) * 0.5 ),      (( (b[0][1] * b[1][2] * c2 + b[0][2] * b[1][1] * c3) ) * 0.5 + ( (b[2][1] * b[1][2] * c2 + b[2][2] * b[1][1] * c3) ) * 0.5 ),      (( (b[0][1] * b[2][0] * c2 + b[0][0] * b[2][1] * c3) ) * 1.0 + ( (b[2][1] * b[2][0] * c2 + b[2][0] * b[2][1] * c3) ) * 0.5 ),      (( (b[0][1] * b[2][1] * c2 + b[0][1] * b[2][1] * c3)+ ((b[0][0] * b[2][0] + b[0][1] * b[2][1] + b[0][2] * b[2][2]) * c3) ) * 1.0 + ( (b[2][1] * b[2][1] * c2 + b[2][1] * b[2][1] * c3)+ ((b[2][0] * b[2][0] + b[2][1] * b[2][1] + b[2][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[0][1] * b[2][2] * c2 + b[0][2] * b[2][1] * c3) ) * 1.0 + ( (b[2][1] * b[2][2] * c2 + b[2][2] * b[2][1] * c3) ) * 0.5 ),      (( (b[0][1] * b[3][0] * c2 + b[0][0] * b[3][1] * c3) ) * 0.5 + ( (b[2][1] * b[3][0] * c2 + b[2][0] * b[3][1] * c3) ) * 0.5 ),      (( (b[0][1] * b[3][1] * c2 + b[0][1] * b[3][1] * c3)+ ((b[0][0] * b[3][0] + b[0][1] * b[3][1] + b[0][2] * b[3][2]) * c3) ) * 0.5 + ( (b[2][1] * b[3][1] * c2 + b[2][1] * b[3][1] * c3)+ ((b[2][0] * b[3][0] + b[2][1] * b[3][1] + b[2][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[0][1] * b[3][2] * c2 + b[0][2] * b[3][1] * c3) ) * 0.5 + ( (b[2][1] * b[3][2] * c2 + b[2][2] * b[3][1] * c3) ) * 0.5 ),      (( (b[0][1] * b[0][0] * c2 + b[0][0] * b[0][1] * c3) ) * 0.5 + ( (b[0][1] * b[1][0] * c2 + b[0][0] * b[1][1] * c3) ) * 0.5 + ( (b[2][1] * b[0][0] * c2 + b[2][0] * b[0][1] * c3) ) * 0.5 + ( (b[2][1] * b[1][0] * c2 + b[2][0] * b[1][1] * c3) ) * 1.0 ),      (( (b[0][1] * b[0][1] * c2 + b[0][1] * b[0][1] * c3)+ ((b[0][0] * b[0][0] + b[0][1] * b[0][1] + b[0][2] * b[0][2]) * c3) ) * 0.5 + ( (b[0][1] * b[1][1] * c2 + b[0][1] * b[1][1] * c3)+ ((b[0][0] * b[1][0] + b[0][1] * b[1][1] + b[0][2] * b[1][2]) * c3) ) * 0.5 + ( (b[2][1] * b[0][1] * c2 + b[2][1] * b[0][1] * c3)+ ((b[2][0] * b[0][0] + b[2][1] * b[0][1] + b[2][2] * b[0][2]) * c3) ) * 0.5 + ( (b[2][1] * b[1][1] * c2 + b[2][1] * b[1][1] * c3)+ ((b[2][0] * b[1][0] + b[2][1] * b[1][1] + b[2][2] * b[1][2]) * c3) ) * 1.0 ),      (( (b[0][1] * b[0][2] * c2 + b[0][2] * b[0][1] * c3) ) * 0.5 + ( (b[0][1] * b[1][2] * c2 + b[0][2] * b[1][1] * c3) ) * 0.5 + ( (b[2][1] * b[0][2] * c2 + b[2][2] * b[0][1] * c3) ) * 0.5 + ( (b[2][1] * b[1][2] * c2 + b[2][2] * b[1][1] * c3) ) * 1.0 ),      (( (b[0][1] * b[1][0] * c2 + b[0][0] * b[1][1] * c3) ) * 1.0 + ( (b[0][1] * b[2][0] * c2 + b[0][0] * b[2][1] * c3) ) * 0.5 + ( (b[2][1] * b[1][0] * c2 + b[2][0] * b[1][1] * c3) ) * 0.5 + ( (b[2][1] * b[2][0] * c2 + b[2][0] * b[2][1] * c3) ) * 0.5 ),      (( (b[0][1] * b[1][1] * c2 + b[0][1] * b[1][1] * c3)+ ((b[0][0] * b[1][0] + b[0][1] * b[1][1] + b[0][2] * b[1][2]) * c3) ) * 1.0 + ( (b[0][1] * b[2][1] * c2 + b[0][1] * b[2][1] * c3)+ ((b[0][0] * b[2][0] + b[0][1] * b[2][1] + b[0][2] * b[2][2]) * c3) ) * 0.5 + ( (b[2][1] * b[1][1] * c2 + b[2][1] * b[1][1] * c3)+ ((b[2][0] * b[1][0] + b[2][1] * b[1][1] + b[2][2] * b[1][2]) * c3) ) * 0.5 + ( (b[2][1] * b[2][1] * c2 + b[2][1] * b[2][1] * c3)+ ((b[2][0] * b[2][0] + b[2][1] * b[2][1] + b[2][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[0][1] * b[1][2] * c2 + b[0][2] * b[1][1] * c3) ) * 1.0 + ( (b[0][1] * b[2][2] * c2 + b[0][2] * b[2][1] * c3) ) * 0.5 + ( (b[2][1] * b[1][2] * c2 + b[2][2] * b[1][1] * c3) ) * 0.5 + ( (b[2][1] * b[2][2] * c2 + b[2][2] * b[2][1] * c3) ) * 0.5 ),      (( (b[0][1] * b[0][0] * c2 + b[0][0] * b[0][1] * c3) ) * 1.0 + ( (b[0][1] * b[2][0] * c2 + b[0][0] * b[2][1] * c3) ) * 0.5 + ( (b[2][1] * b[0][0] * c2 + b[2][0] * b[0][1] * c3) ) * 0.5 + ( (b[2][1] * b[2][0] * c2 + b[2][0] * b[2][1] * c3) ) * 1.0 ),      (( (b[0][1] * b[0][1] * c2 + b[0][1] * b[0][1] * c3)+ ((b[0][0] * b[0][0] + b[0][1] * b[0][1] + b[0][2] * b[0][2]) * c3) ) * 1.0 + ( (b[0][1] * b[2][1] * c2 + b[0][1] * b[2][1] * c3)+ ((b[0][0] * b[2][0] + b[0][1] * b[2][1] + b[0][2] * b[2][2]) * c3) ) * 0.5 + ( (b[2][1] * b[0][1] * c2 + b[2][1] * b[0][1] * c3)+ ((b[2][0] * b[0][0] + b[2][1] * b[0][1] + b[2][2] * b[0][2]) * c3) ) * 0.5 + ( (b[2][1] * b[2][1] * c2 + b[2][1] * b[2][1] * c3)+ ((b[2][0] * b[2][0] + b[2][1] * b[2][1] + b[2][2] * b[2][2]) * c3) ) * 1.0 ),      (( (b[0][1] * b[0][2] * c2 + b[0][2] * b[0][1] * c3) ) * 1.0 + ( (b[0][1] * b[2][2] * c2 + b[0][2] * b[2][1] * c3) ) * 0.5 + ( (b[2][1] * b[0][2] * c2 + b[2][2] * b[0][1] * c3) ) * 0.5 + ( (b[2][1] * b[2][2] * c2 + b[2][2] * b[2][1] * c3) ) * 1.0 ),      (( (b[0][1] * b[0][0] * c2 + b[0][0] * b[0][1] * c3) ) * 0.5 + ( (b[0][1] * b[3][0] * c2 + b[0][0] * b[3][1] * c3) ) * 0.5 + ( (b[2][1] * b[0][0] * c2 + b[2][0] * b[0][1] * c3) ) * 0.5 + ( (b[2][1] * b[3][0] * c2 + b[2][0] * b[3][1] * c3) ) * 1.0 ),      (( (b[0][1] * b[0][1] * c2 + b[0][1] * b[0][1] * c3)+ ((b[0][0] * b[0][0] + b[0][1] * b[0][1] + b[0][2] * b[0][2]) * c3) ) * 0.5 + ( (b[0][1] * b[3][1] * c2 + b[0][1] * b[3][1] * c3)+ ((b[0][0] * b[3][0] + b[0][1] * b[3][1] + b[0][2] * b[3][2]) * c3) ) * 0.5 + ( (b[2][1] * b[0][1] * c2 + b[2][1] * b[0][1] * c3)+ ((b[2][0] * b[0][0] + b[2][1] * b[0][1] + b[2][2] * b[0][2]) * c3) ) * 0.5 + ( (b[2][1] * b[3][1] * c2 + b[2][1] * b[3][1] * c3)+ ((b[2][0] * b[3][0] + b[2][1] * b[3][1] + b[2][2] * b[3][2]) * c3) ) * 1.0 ),      (( (b[0][1] * b[0][2] * c2 + b[0][2] * b[0][1] * c3) ) * 0.5 + ( (b[0][1] * b[3][2] * c2 + b[0][2] * b[3][1] * c3) ) * 0.5 + ( (b[2][1] * b[0][2] * c2 + b[2][2] * b[0][1] * c3) ) * 0.5 + ( (b[2][1] * b[3][2] * c2 + b[2][2] * b[3][1] * c3) ) * 1.0 ),      (( (b[0][1] * b[1][0] * c2 + b[0][0] * b[1][1] * c3) ) * 0.5 + ( (b[0][1] * b[3][0] * c2 + b[0][0] * b[3][1] * c3) ) * 0.5 + ( (b[2][1] * b[1][0] * c2 + b[2][0] * b[1][1] * c3) ) * 0.5 + ( (b[2][1] * b[3][0] * c2 + b[2][0] * b[3][1] * c3) ) * 0.5 ),      (( (b[0][1] * b[1][1] * c2 + b[0][1] * b[1][1] * c3)+ ((b[0][0] * b[1][0] + b[0][1] * b[1][1] + b[0][2] * b[1][2]) * c3) ) * 0.5 + ( (b[0][1] * b[3][1] * c2 + b[0][1] * b[3][1] * c3)+ ((b[0][0] * b[3][0] + b[0][1] * b[3][1] + b[0][2] * b[3][2]) * c3) ) * 0.5 + ( (b[2][1] * b[1][1] * c2 + b[2][1] * b[1][1] * c3)+ ((b[2][0] * b[1][0] + b[2][1] * b[1][1] + b[2][2] * b[1][2]) * c3) ) * 0.5 + ( (b[2][1] * b[3][1] * c2 + b[2][1] * b[3][1] * c3)+ ((b[2][0] * b[3][0] + b[2][1] * b[3][1] + b[2][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[0][1] * b[1][2] * c2 + b[0][2] * b[1][1] * c3) ) * 0.5 + ( (b[0][1] * b[3][2] * c2 + b[0][2] * b[3][1] * c3) ) * 0.5 + ( (b[2][1] * b[1][2] * c2 + b[2][2] * b[1][1] * c3) ) * 0.5 + ( (b[2][1] * b[3][2] * c2 + b[2][2] * b[3][1] * c3) ) * 0.5 ),      (( (b[0][1] * b[2][0] * c2 + b[0][0] * b[2][1] * c3) ) * 0.5 + ( (b[0][1] * b[3][0] * c2 + b[0][0] * b[3][1] * c3) ) * 1.0 + ( (b[2][1] * b[2][0] * c2 + b[2][0] * b[2][1] * c3) ) * 0.5 + ( (b[2][1] * b[3][0] * c2 + b[2][0] * b[3][1] * c3) ) * 0.5 ),      (( (b[0][1] * b[2][1] * c2 + b[0][1] * b[2][1] * c3)+ ((b[0][0] * b[2][0] + b[0][1] * b[2][1] + b[0][2] * b[2][2]) * c3) ) * 0.5 + ( (b[0][1] * b[3][1] * c2 + b[0][1] * b[3][1] * c3)+ ((b[0][0] * b[3][0] + b[0][1] * b[3][1] + b[0][2] * b[3][2]) * c3) ) * 1.0 + ( (b[2][1] * b[2][1] * c2 + b[2][1] * b[2][1] * c3)+ ((b[2][0] * b[2][0] + b[2][1] * b[2][1] + b[2][2] * b[2][2]) * c3) ) * 0.5 + ( (b[2][1] * b[3][1] * c2 + b[2][1] * b[3][1] * c3)+ ((b[2][0] * b[3][0] + b[2][1] * b[3][1] + b[2][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[0][1] * b[2][2] * c2 + b[0][2] * b[2][1] * c3) ) * 0.5 + ( (b[0][1] * b[3][2] * c2 + b[0][2] * b[3][1] * c3) ) * 1.0 + ( (b[2][1] * b[2][2] * c2 + b[2][2] * b[2][1] * c3) ) * 0.5 + ( (b[2][1] * b[3][2] * c2 + b[2][2] * b[3][1] * c3) ) * 0.5 )},
{ (( (b[0][2] * b[0][0] * c2 + b[0][0] * b[0][2] * c3) ) * 0.5 + ( (b[2][2] * b[0][0] * c2 + b[2][0] * b[0][2] * c3) ) * 1.0 ),      (( (b[0][2] * b[0][1] * c2 + b[0][1] * b[0][2] * c3) ) * 0.5 + ( (b[2][2] * b[0][1] * c2 + b[2][1] * b[0][2] * c3) ) * 1.0 ),      (( (b[0][2] * b[0][2] * c2 + b[0][2] * b[0][2] * c3)+ ((b[0][0] * b[0][0] + b[0][1] * b[0][1] + b[0][2] * b[0][2]) * c3) ) * 0.5 + ( (b[2][2] * b[0][2] * c2 + b[2][2] * b[0][2] * c3)+ ((b[2][0] * b[0][0] + b[2][1] * b[0][1] + b[2][2] * b[0][2]) * c3) ) * 1.0 ),      (( (b[0][2] * b[1][0] * c2 + b[0][0] * b[1][2] * c3) ) * 0.5 + ( (b[2][2] * b[1][0] * c2 + b[2][0] * b[1][2] * c3) ) * 0.5 ),      (( (b[0][2] * b[1][1] * c2 + b[0][1] * b[1][2] * c3) ) * 0.5 + ( (b[2][2] * b[1][1] * c2 + b[2][1] * b[1][2] * c3) ) * 0.5 ),      (( (b[0][2] * b[1][2] * c2 + b[0][2] * b[1][2] * c3)+ ((b[0][0] * b[1][0] + b[0][1] * b[1][1] + b[0][2] * b[1][2]) * c3) ) * 0.5 + ( (b[2][2] * b[1][2] * c2 + b[2][2] * b[1][2] * c3)+ ((b[2][0] * b[1][0] + b[2][1] * b[1][1] + b[2][2] * b[1][2]) * c3) ) * 0.5 ),      (( (b[0][2] * b[2][0] * c2 + b[0][0] * b[2][2] * c3) ) * 1.0 + ( (b[2][2] * b[2][0] * c2 + b[2][0] * b[2][2] * c3) ) * 0.5 ),      (( (b[0][2] * b[2][1] * c2 + b[0][1] * b[2][2] * c3) ) * 1.0 + ( (b[2][2] * b[2][1] * c2 + b[2][1] * b[2][2] * c3) ) * 0.5 ),      (( (b[0][2] * b[2][2] * c2 + b[0][2] * b[2][2] * c3)+ ((b[0][0] * b[2][0] + b[0][1] * b[2][1] + b[0][2] * b[2][2]) * c3) ) * 1.0 + ( (b[2][2] * b[2][2] * c2 + b[2][2] * b[2][2] * c3)+ ((b[2][0] * b[2][0] + b[2][1] * b[2][1] + b[2][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[0][2] * b[3][0] * c2 + b[0][0] * b[3][2] * c3) ) * 0.5 + ( (b[2][2] * b[3][0] * c2 + b[2][0] * b[3][2] * c3) ) * 0.5 ),      (( (b[0][2] * b[3][1] * c2 + b[0][1] * b[3][2] * c3) ) * 0.5 + ( (b[2][2] * b[3][1] * c2 + b[2][1] * b[3][2] * c3) ) * 0.5 ),      (( (b[0][2] * b[3][2] * c2 + b[0][2] * b[3][2] * c3)+ ((b[0][0] * b[3][0] + b[0][1] * b[3][1] + b[0][2] * b[3][2]) * c3) ) * 0.5 + ( (b[2][2] * b[3][2] * c2 + b[2][2] * b[3][2] * c3)+ ((b[2][0] * b[3][0] + b[2][1] * b[3][1] + b[2][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[0][2] * b[0][0] * c2 + b[0][0] * b[0][2] * c3) ) * 0.5 + ( (b[0][2] * b[1][0] * c2 + b[0][0] * b[1][2] * c3) ) * 0.5 + ( (b[2][2] * b[0][0] * c2 + b[2][0] * b[0][2] * c3) ) * 0.5 + ( (b[2][2] * b[1][0] * c2 + b[2][0] * b[1][2] * c3) ) * 1.0 ),      (( (b[0][2] * b[0][1] * c2 + b[0][1] * b[0][2] * c3) ) * 0.5 + ( (b[0][2] * b[1][1] * c2 + b[0][1] * b[1][2] * c3) ) * 0.5 + ( (b[2][2] * b[0][1] * c2 + b[2][1] * b[0][2] * c3) ) * 0.5 + ( (b[2][2] * b[1][1] * c2 + b[2][1] * b[1][2] * c3) ) * 1.0 ),      (( (b[0][2] * b[0][2] * c2 + b[0][2] * b[0][2] * c3)+ ((b[0][0] * b[0][0] + b[0][1] * b[0][1] + b[0][2] * b[0][2]) * c3) ) * 0.5 + ( (b[0][2] * b[1][2] * c2 + b[0][2] * b[1][2] * c3)+ ((b[0][0] * b[1][0] + b[0][1] * b[1][1] + b[0][2] * b[1][2]) * c3) ) * 0.5 + ( (b[2][2] * b[0][2] * c2 + b[2][2] * b[0][2] * c3)+ ((b[2][0] * b[0][0] + b[2][1] * b[0][1] + b[2][2] * b[0][2]) * c3) ) * 0.5 + ( (b[2][2] * b[1][2] * c2 + b[2][2] * b[1][2] * c3)+ ((b[2][0] * b[1][0] + b[2][1] * b[1][1] + b[2][2] * b[1][2]) * c3) ) * 1.0 ),      (( (b[0][2] * b[1][0] * c2 + b[0][0] * b[1][2] * c3) ) * 1.0 + ( (b[0][2] * b[2][0] * c2 + b[0][0] * b[2][2] * c3) ) * 0.5 + ( (b[2][2] * b[1][0] * c2 + b[2][0] * b[1][2] * c3) ) * 0.5 + ( (b[2][2] * b[2][0] * c2 + b[2][0] * b[2][2] * c3) ) * 0.5 ),      (( (b[0][2] * b[1][1] * c2 + b[0][1] * b[1][2] * c3) ) * 1.0 + ( (b[0][2] * b[2][1] * c2 + b[0][1] * b[2][2] * c3) ) * 0.5 + ( (b[2][2] * b[1][1] * c2 + b[2][1] * b[1][2] * c3) ) * 0.5 + ( (b[2][2] * b[2][1] * c2 + b[2][1] * b[2][2] * c3) ) * 0.5 ),      (( (b[0][2] * b[1][2] * c2 + b[0][2] * b[1][2] * c3)+ ((b[0][0] * b[1][0] + b[0][1] * b[1][1] + b[0][2] * b[1][2]) * c3) ) * 1.0 + ( (b[0][2] * b[2][2] * c2 + b[0][2] * b[2][2] * c3)+ ((b[0][0] * b[2][0] + b[0][1] * b[2][1] + b[0][2] * b[2][2]) * c3) ) * 0.5 + ( (b[2][2] * b[1][2] * c2 + b[2][2] * b[1][2] * c3)+ ((b[2][0] * b[1][0] + b[2][1] * b[1][1] + b[2][2] * b[1][2]) * c3) ) * 0.5 + ( (b[2][2] * b[2][2] * c2 + b[2][2] * b[2][2] * c3)+ ((b[2][0] * b[2][0] + b[2][1] * b[2][1] + b[2][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[0][2] * b[0][0] * c2 + b[0][0] * b[0][2] * c3) ) * 1.0 + ( (b[0][2] * b[2][0] * c2 + b[0][0] * b[2][2] * c3) ) * 0.5 + ( (b[2][2] * b[0][0] * c2 + b[2][0] * b[0][2] * c3) ) * 0.5 + ( (b[2][2] * b[2][0] * c2 + b[2][0] * b[2][2] * c3) ) * 1.0 ),      (( (b[0][2] * b[0][1] * c2 + b[0][1] * b[0][2] * c3) ) * 1.0 + ( (b[0][2] * b[2][1] * c2 + b[0][1] * b[2][2] * c3) ) * 0.5 + ( (b[2][2] * b[0][1] * c2 + b[2][1] * b[0][2] * c3) ) * 0.5 + ( (b[2][2] * b[2][1] * c2 + b[2][1] * b[2][2] * c3) ) * 1.0 ),      (( (b[0][2] * b[0][2] * c2 + b[0][2] * b[0][2] * c3)+ ((b[0][0] * b[0][0] + b[0][1] * b[0][1] + b[0][2] * b[0][2]) * c3) ) * 1.0 + ( (b[0][2] * b[2][2] * c2 + b[0][2] * b[2][2] * c3)+ ((b[0][0] * b[2][0] + b[0][1] * b[2][1] + b[0][2] * b[2][2]) * c3) ) * 0.5 + ( (b[2][2] * b[0][2] * c2 + b[2][2] * b[0][2] * c3)+ ((b[2][0] * b[0][0] + b[2][1] * b[0][1] + b[2][2] * b[0][2]) * c3) ) * 0.5 + ( (b[2][2] * b[2][2] * c2 + b[2][2] * b[2][2] * c3)+ ((b[2][0] * b[2][0] + b[2][1] * b[2][1] + b[2][2] * b[2][2]) * c3) ) * 1.0 ),      (( (b[0][2] * b[0][0] * c2 + b[0][0] * b[0][2] * c3) ) * 0.5 + ( (b[0][2] * b[3][0] * c2 + b[0][0] * b[3][2] * c3) ) * 0.5 + ( (b[2][2] * b[0][0] * c2 + b[2][0] * b[0][2] * c3) ) * 0.5 + ( (b[2][2] * b[3][0] * c2 + b[2][0] * b[3][2] * c3) ) * 1.0 ),      (( (b[0][2] * b[0][1] * c2 + b[0][1] * b[0][2] * c3) ) * 0.5 + ( (b[0][2] * b[3][1] * c2 + b[0][1] * b[3][2] * c3) ) * 0.5 + ( (b[2][2] * b[0][1] * c2 + b[2][1] * b[0][2] * c3) ) * 0.5 + ( (b[2][2] * b[3][1] * c2 + b[2][1] * b[3][2] * c3) ) * 1.0 ),      (( (b[0][2] * b[0][2] * c2 + b[0][2] * b[0][2] * c3)+ ((b[0][0] * b[0][0] + b[0][1] * b[0][1] + b[0][2] * b[0][2]) * c3) ) * 0.5 + ( (b[0][2] * b[3][2] * c2 + b[0][2] * b[3][2] * c3)+ ((b[0][0] * b[3][0] + b[0][1] * b[3][1] + b[0][2] * b[3][2]) * c3) ) * 0.5 + ( (b[2][2] * b[0][2] * c2 + b[2][2] * b[0][2] * c3)+ ((b[2][0] * b[0][0] + b[2][1] * b[0][1] + b[2][2] * b[0][2]) * c3) ) * 0.5 + ( (b[2][2] * b[3][2] * c2 + b[2][2] * b[3][2] * c3)+ ((b[2][0] * b[3][0] + b[2][1] * b[3][1] + b[2][2] * b[3][2]) * c3) ) * 1.0 ),      (( (b[0][2] * b[1][0] * c2 + b[0][0] * b[1][2] * c3) ) * 0.5 + ( (b[0][2] * b[3][0] * c2 + b[0][0] * b[3][2] * c3) ) * 0.5 + ( (b[2][2] * b[1][0] * c2 + b[2][0] * b[1][2] * c3) ) * 0.5 + ( (b[2][2] * b[3][0] * c2 + b[2][0] * b[3][2] * c3) ) * 0.5 ),      (( (b[0][2] * b[1][1] * c2 + b[0][1] * b[1][2] * c3) ) * 0.5 + ( (b[0][2] * b[3][1] * c2 + b[0][1] * b[3][2] * c3) ) * 0.5 + ( (b[2][2] * b[1][1] * c2 + b[2][1] * b[1][2] * c3) ) * 0.5 + ( (b[2][2] * b[3][1] * c2 + b[2][1] * b[3][2] * c3) ) * 0.5 ),      (( (b[0][2] * b[1][2] * c2 + b[0][2] * b[1][2] * c3)+ ((b[0][0] * b[1][0] + b[0][1] * b[1][1] + b[0][2] * b[1][2]) * c3) ) * 0.5 + ( (b[0][2] * b[3][2] * c2 + b[0][2] * b[3][2] * c3)+ ((b[0][0] * b[3][0] + b[0][1] * b[3][1] + b[0][2] * b[3][2]) * c3) ) * 0.5 + ( (b[2][2] * b[1][2] * c2 + b[2][2] * b[1][2] * c3)+ ((b[2][0] * b[1][0] + b[2][1] * b[1][1] + b[2][2] * b[1][2]) * c3) ) * 0.5 + ( (b[2][2] * b[3][2] * c2 + b[2][2] * b[3][2] * c3)+ ((b[2][0] * b[3][0] + b[2][1] * b[3][1] + b[2][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[0][2] * b[2][0] * c2 + b[0][0] * b[2][2] * c3) ) * 0.5 + ( (b[0][2] * b[3][0] * c2 + b[0][0] * b[3][2] * c3) ) * 1.0 + ( (b[2][2] * b[2][0] * c2 + b[2][0] * b[2][2] * c3) ) * 0.5 + ( (b[2][2] * b[3][0] * c2 + b[2][0] * b[3][2] * c3) ) * 0.5 ),      (( (b[0][2] * b[2][1] * c2 + b[0][1] * b[2][2] * c3) ) * 0.5 + ( (b[0][2] * b[3][1] * c2 + b[0][1] * b[3][2] * c3) ) * 1.0 + ( (b[2][2] * b[2][1] * c2 + b[2][1] * b[2][2] * c3) ) * 0.5 + ( (b[2][2] * b[3][1] * c2 + b[2][1] * b[3][2] * c3) ) * 0.5 ),      (( (b[0][2] * b[2][2] * c2 + b[0][2] * b[2][2] * c3)+ ((b[0][0] * b[2][0] + b[0][1] * b[2][1] + b[0][2] * b[2][2]) * c3) ) * 0.5 + ( (b[0][2] * b[3][2] * c2 + b[0][2] * b[3][2] * c3)+ ((b[0][0] * b[3][0] + b[0][1] * b[3][1] + b[0][2] * b[3][2]) * c3) ) * 1.0 + ( (b[2][2] * b[2][2] * c2 + b[2][2] * b[2][2] * c3)+ ((b[2][0] * b[2][0] + b[2][1] * b[2][1] + b[2][2] * b[2][2]) * c3) ) * 0.5 + ( (b[2][2] * b[3][2] * c2 + b[2][2] * b[3][2] * c3)+ ((b[2][0] * b[3][0] + b[2][1] * b[3][1] + b[2][2] * b[3][2]) * c3) ) * 0.5 )},
{ (( (b[0][0] * b[0][0] * c2 + b[0][0] * b[0][0] * c3)+ ((b[0][0] * b[0][0] + b[0][1] * b[0][1] + b[0][2] * b[0][2]) * c3) ) * 0.5 + ( (b[3][0] * b[0][0] * c2 + b[3][0] * b[0][0] * c3)+ ((b[3][0] * b[0][0] + b[3][1] * b[0][1] + b[3][2] * b[0][2]) * c3) ) * 1.0 ),      (( (b[0][0] * b[0][1] * c2 + b[0][1] * b[0][0] * c3) ) * 0.5 + ( (b[3][0] * b[0][1] * c2 + b[3][1] * b[0][0] * c3) ) * 1.0 ),      (( (b[0][0] * b[0][2] * c2 + b[0][2] * b[0][0] * c3) ) * 0.5 + ( (b[3][0] * b[0][2] * c2 + b[3][2] * b[0][0] * c3) ) * 1.0 ),      (( (b[0][0] * b[1][0] * c2 + b[0][0] * b[1][0] * c3)+ ((b[0][0] * b[1][0] + b[0][1] * b[1][1] + b[0][2] * b[1][2]) * c3) ) * 0.5 + ( (b[3][0] * b[1][0] * c2 + b[3][0] * b[1][0] * c3)+ ((b[3][0] * b[1][0] + b[3][1] * b[1][1] + b[3][2] * b[1][2]) * c3) ) * 0.5 ),      (( (b[0][0] * b[1][1] * c2 + b[0][1] * b[1][0] * c3) ) * 0.5 + ( (b[3][0] * b[1][1] * c2 + b[3][1] * b[1][0] * c3) ) * 0.5 ),      (( (b[0][0] * b[1][2] * c2 + b[0][2] * b[1][0] * c3) ) * 0.5 + ( (b[3][0] * b[1][2] * c2 + b[3][2] * b[1][0] * c3) ) * 0.5 ),      (( (b[0][0] * b[2][0] * c2 + b[0][0] * b[2][0] * c3)+ ((b[0][0] * b[2][0] + b[0][1] * b[2][1] + b[0][2] * b[2][2]) * c3) ) * 0.5 + ( (b[3][0] * b[2][0] * c2 + b[3][0] * b[2][0] * c3)+ ((b[3][0] * b[2][0] + b[3][1] * b[2][1] + b[3][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[0][0] * b[2][1] * c2 + b[0][1] * b[2][0] * c3) ) * 0.5 + ( (b[3][0] * b[2][1] * c2 + b[3][1] * b[2][0] * c3) ) * 0.5 ),      (( (b[0][0] * b[2][2] * c2 + b[0][2] * b[2][0] * c3) ) * 0.5 + ( (b[3][0] * b[2][2] * c2 + b[3][2] * b[2][0] * c3) ) * 0.5 ),      (( (b[0][0] * b[3][0] * c2 + b[0][0] * b[3][0] * c3)+ ((b[0][0] * b[3][0] + b[0][1] * b[3][1] + b[0][2] * b[3][2]) * c3) ) * 1.0 + ( (b[3][0] * b[3][0] * c2 + b[3][0] * b[3][0] * c3)+ ((b[3][0] * b[3][0] + b[3][1] * b[3][1] + b[3][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[0][0] * b[3][1] * c2 + b[0][1] * b[3][0] * c3) ) * 1.0 + ( (b[3][0] * b[3][1] * c2 + b[3][1] * b[3][0] * c3) ) * 0.5 ),      (( (b[0][0] * b[3][2] * c2 + b[0][2] * b[3][0] * c3) ) * 1.0 + ( (b[3][0] * b[3][2] * c2 + b[3][2] * b[3][0] * c3) ) * 0.5 ),      (( (b[0][0] * b[0][0] * c2 + b[0][0] * b[0][0] * c3)+ ((b[0][0] * b[0][0] + b[0][1] * b[0][1] + b[0][2] * b[0][2]) * c3) ) * 0.5 + ( (b[0][0] * b[1][0] * c2 + b[0][0] * b[1][0] * c3)+ ((b[0][0] * b[1][0] + b[0][1] * b[1][1] + b[0][2] * b[1][2]) * c3) ) * 0.5 + ( (b[3][0] * b[0][0] * c2 + b[3][0] * b[0][0] * c3)+ ((b[3][0] * b[0][0] + b[3][1] * b[0][1] + b[3][2] * b[0][2]) * c3) ) * 0.5 + ( (b[3][0] * b[1][0] * c2 + b[3][0] * b[1][0] * c3)+ ((b[3][0] * b[1][0] + b[3][1] * b[1][1] + b[3][2] * b[1][2]) * c3) ) * 1.0 ),      (( (b[0][0] * b[0][1] * c2 + b[0][1] * b[0][0] * c3) ) * 0.5 + ( (b[0][0] * b[1][1] * c2 + b[0][1] * b[1][0] * c3) ) * 0.5 + ( (b[3][0] * b[0][1] * c2 + b[3][1] * b[0][0] * c3) ) * 0.5 + ( (b[3][0] * b[1][1] * c2 + b[3][1] * b[1][0] * c3) ) * 1.0 ),      (( (b[0][0] * b[0][2] * c2 + b[0][2] * b[0][0] * c3) ) * 0.5 + ( (b[0][0] * b[1][2] * c2 + b[0][2] * b[1][0] * c3) ) * 0.5 + ( (b[3][0] * b[0][2] * c2 + b[3][2] * b[0][0] * c3) ) * 0.5 + ( (b[3][0] * b[1][2] * c2 + b[3][2] * b[1][0] * c3) ) * 1.0 ),      (( (b[0][0] * b[1][0] * c2 + b[0][0] * b[1][0] * c3)+ ((b[0][0] * b[1][0] + b[0][1] * b[1][1] + b[0][2] * b[1][2]) * c3) ) * 0.5 + ( (b[0][0] * b[2][0] * c2 + b[0][0] * b[2][0] * c3)+ ((b[0][0] * b[2][0] + b[0][1] * b[2][1] + b[0][2] * b[2][2]) * c3) ) * 0.5 + ( (b[3][0] * b[1][0] * c2 + b[3][0] * b[1][0] * c3)+ ((b[3][0] * b[1][0] + b[3][1] * b[1][1] + b[3][2] * b[1][2]) * c3) ) * 0.5 + ( (b[3][0] * b[2][0] * c2 + b[3][0] * b[2][0] * c3)+ ((b[3][0] * b[2][0] + b[3][1] * b[2][1] + b[3][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[0][0] * b[1][1] * c2 + b[0][1] * b[1][0] * c3) ) * 0.5 + ( (b[0][0] * b[2][1] * c2 + b[0][1] * b[2][0] * c3) ) * 0.5 + ( (b[3][0] * b[1][1] * c2 + b[3][1] * b[1][0] * c3) ) * 0.5 + ( (b[3][0] * b[2][1] * c2 + b[3][1] * b[2][0] * c3) ) * 0.5 ),      (( (b[0][0] * b[1][2] * c2 + b[0][2] * b[1][0] * c3) ) * 0.5 + ( (b[0][0] * b[2][2] * c2 + b[0][2] * b[2][0] * c3) ) * 0.5 + ( (b[3][0] * b[1][2] * c2 + b[3][2] * b[1][0] * c3) ) * 0.5 + ( (b[3][0] * b[2][2] * c2 + b[3][2] * b[2][0] * c3) ) * 0.5 ),      (( (b[0][0] * b[0][0] * c2 + b[0][0] * b[0][0] * c3)+ ((b[0][0] * b[0][0] + b[0][1] * b[0][1] + b[0][2] * b[0][2]) * c3) ) * 0.5 + ( (b[0][0] * b[2][0] * c2 + b[0][0] * b[2][0] * c3)+ ((b[0][0] * b[2][0] + b[0][1] * b[2][1] + b[0][2] * b[2][2]) * c3) ) * 0.5 + ( (b[3][0] * b[0][0] * c2 + b[3][0] * b[0][0] * c3)+ ((b[3][0] * b[0][0] + b[3][1] * b[0][1] + b[3][2] * b[0][2]) * c3) ) * 0.5 + ( (b[3][0] * b[2][0] * c2 + b[3][0] * b[2][0] * c3)+ ((b[3][0] * b[2][0] + b[3][1] * b[2][1] + b[3][2] * b[2][2]) * c3) ) * 1.0 ),      (( (b[0][0] * b[0][1] * c2 + b[0][1] * b[0][0] * c3) ) * 0.5 + ( (b[0][0] * b[2][1] * c2 + b[0][1] * b[2][0] * c3) ) * 0.5 + ( (b[3][0] * b[0][1] * c2 + b[3][1] * b[0][0] * c3) ) * 0.5 + ( (b[3][0] * b[2][1] * c2 + b[3][1] * b[2][0] * c3) ) * 1.0 ),      (( (b[0][0] * b[0][2] * c2 + b[0][2] * b[0][0] * c3) ) * 0.5 + ( (b[0][0] * b[2][2] * c2 + b[0][2] * b[2][0] * c3) ) * 0.5 + ( (b[3][0] * b[0][2] * c2 + b[3][2] * b[0][0] * c3) ) * 0.5 + ( (b[3][0] * b[2][2] * c2 + b[3][2] * b[2][0] * c3) ) * 1.0 ),      (( (b[0][0] * b[0][0] * c2 + b[0][0] * b[0][0] * c3)+ ((b[0][0] * b[0][0] + b[0][1] * b[0][1] + b[0][2] * b[0][2]) * c3) ) * 1.0 + ( (b[0][0] * b[3][0] * c2 + b[0][0] * b[3][0] * c3)+ ((b[0][0] * b[3][0] + b[0][1] * b[3][1] + b[0][2] * b[3][2]) * c3) ) * 0.5 + ( (b[3][0] * b[0][0] * c2 + b[3][0] * b[0][0] * c3)+ ((b[3][0] * b[0][0] + b[3][1] * b[0][1] + b[3][2] * b[0][2]) * c3) ) * 0.5 + ( (b[3][0] * b[3][0] * c2 + b[3][0] * b[3][0] * c3)+ ((b[3][0] * b[3][0] + b[3][1] * b[3][1] + b[3][2] * b[3][2]) * c3) ) * 1.0 ),      (( (b[0][0] * b[0][1] * c2 + b[0][1] * b[0][0] * c3) ) * 1.0 + ( (b[0][0] * b[3][1] * c2 + b[0][1] * b[3][0] * c3) ) * 0.5 + ( (b[3][0] * b[0][1] * c2 + b[3][1] * b[0][0] * c3) ) * 0.5 + ( (b[3][0] * b[3][1] * c2 + b[3][1] * b[3][0] * c3) ) * 1.0 ),      (( (b[0][0] * b[0][2] * c2 + b[0][2] * b[0][0] * c3) ) * 1.0 + ( (b[0][0] * b[3][2] * c2 + b[0][2] * b[3][0] * c3) ) * 0.5 + ( (b[3][0] * b[0][2] * c2 + b[3][2] * b[0][0] * c3) ) * 0.5 + ( (b[3][0] * b[3][2] * c2 + b[3][2] * b[3][0] * c3) ) * 1.0 ),      (( (b[0][0] * b[1][0] * c2 + b[0][0] * b[1][0] * c3)+ ((b[0][0] * b[1][0] + b[0][1] * b[1][1] + b[0][2] * b[1][2]) * c3) ) * 1.0 + ( (b[0][0] * b[3][0] * c2 + b[0][0] * b[3][0] * c3)+ ((b[0][0] * b[3][0] + b[0][1] * b[3][1] + b[0][2] * b[3][2]) * c3) ) * 0.5 + ( (b[3][0] * b[1][0] * c2 + b[3][0] * b[1][0] * c3)+ ((b[3][0] * b[1][0] + b[3][1] * b[1][1] + b[3][2] * b[1][2]) * c3) ) * 0.5 + ( (b[3][0] * b[3][0] * c2 + b[3][0] * b[3][0] * c3)+ ((b[3][0] * b[3][0] + b[3][1] * b[3][1] + b[3][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[0][0] * b[1][1] * c2 + b[0][1] * b[1][0] * c3) ) * 1.0 + ( (b[0][0] * b[3][1] * c2 + b[0][1] * b[3][0] * c3) ) * 0.5 + ( (b[3][0] * b[1][1] * c2 + b[3][1] * b[1][0] * c3) ) * 0.5 + ( (b[3][0] * b[3][1] * c2 + b[3][1] * b[3][0] * c3) ) * 0.5 ),      (( (b[0][0] * b[1][2] * c2 + b[0][2] * b[1][0] * c3) ) * 1.0 + ( (b[0][0] * b[3][2] * c2 + b[0][2] * b[3][0] * c3) ) * 0.5 + ( (b[3][0] * b[1][2] * c2 + b[3][2] * b[1][0] * c3) ) * 0.5 + ( (b[3][0] * b[3][2] * c2 + b[3][2] * b[3][0] * c3) ) * 0.5 ),      (( (b[0][0] * b[2][0] * c2 + b[0][0] * b[2][0] * c3)+ ((b[0][0] * b[2][0] + b[0][1] * b[2][1] + b[0][2] * b[2][2]) * c3) ) * 1.0 + ( (b[0][0] * b[3][0] * c2 + b[0][0] * b[3][0] * c3)+ ((b[0][0] * b[3][0] + b[0][1] * b[3][1] + b[0][2] * b[3][2]) * c3) ) * 0.5 + ( (b[3][0] * b[2][0] * c2 + b[3][0] * b[2][0] * c3)+ ((b[3][0] * b[2][0] + b[3][1] * b[2][1] + b[3][2] * b[2][2]) * c3) ) * 0.5 + ( (b[3][0] * b[3][0] * c2 + b[3][0] * b[3][0] * c3)+ ((b[3][0] * b[3][0] + b[3][1] * b[3][1] + b[3][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[0][0] * b[2][1] * c2 + b[0][1] * b[2][0] * c3) ) * 1.0 + ( (b[0][0] * b[3][1] * c2 + b[0][1] * b[3][0] * c3) ) * 0.5 + ( (b[3][0] * b[2][1] * c2 + b[3][1] * b[2][0] * c3) ) * 0.5 + ( (b[3][0] * b[3][1] * c2 + b[3][1] * b[3][0] * c3) ) * 0.5 ),      (( (b[0][0] * b[2][2] * c2 + b[0][2] * b[2][0] * c3) ) * 1.0 + ( (b[0][0] * b[3][2] * c2 + b[0][2] * b[3][0] * c3) ) * 0.5 + ( (b[3][0] * b[2][2] * c2 + b[3][2] * b[2][0] * c3) ) * 0.5 + ( (b[3][0] * b[3][2] * c2 + b[3][2] * b[3][0] * c3) ) * 0.5 )},
{ (( (b[0][1] * b[0][0] * c2 + b[0][0] * b[0][1] * c3) ) * 0.5 + ( (b[3][1] * b[0][0] * c2 + b[3][0] * b[0][1] * c3) ) * 1.0 ),      (( (b[0][1] * b[0][1] * c2 + b[0][1] * b[0][1] * c3)+ ((b[0][0] * b[0][0] + b[0][1] * b[0][1] + b[0][2] * b[0][2]) * c3) ) * 0.5 + ( (b[3][1] * b[0][1] * c2 + b[3][1] * b[0][1] * c3)+ ((b[3][0] * b[0][0] + b[3][1] * b[0][1] + b[3][2] * b[0][2]) * c3) ) * 1.0 ),      (( (b[0][1] * b[0][2] * c2 + b[0][2] * b[0][1] * c3) ) * 0.5 + ( (b[3][1] * b[0][2] * c2 + b[3][2] * b[0][1] * c3) ) * 1.0 ),      (( (b[0][1] * b[1][0] * c2 + b[0][0] * b[1][1] * c3) ) * 0.5 + ( (b[3][1] * b[1][0] * c2 + b[3][0] * b[1][1] * c3) ) * 0.5 ),      (( (b[0][1] * b[1][1] * c2 + b[0][1] * b[1][1] * c3)+ ((b[0][0] * b[1][0] + b[0][1] * b[1][1] + b[0][2] * b[1][2]) * c3) ) * 0.5 + ( (b[3][1] * b[1][1] * c2 + b[3][1] * b[1][1] * c3)+ ((b[3][0] * b[1][0] + b[3][1] * b[1][1] + b[3][2] * b[1][2]) * c3) ) * 0.5 ),      (( (b[0][1] * b[1][2] * c2 + b[0][2] * b[1][1] * c3) ) * 0.5 + ( (b[3][1] * b[1][2] * c2 + b[3][2] * b[1][1] * c3) ) * 0.5 ),      (( (b[0][1] * b[2][0] * c2 + b[0][0] * b[2][1] * c3) ) * 0.5 + ( (b[3][1] * b[2][0] * c2 + b[3][0] * b[2][1] * c3) ) * 0.5 ),      (( (b[0][1] * b[2][1] * c2 + b[0][1] * b[2][1] * c3)+ ((b[0][0] * b[2][0] + b[0][1] * b[2][1] + b[0][2] * b[2][2]) * c3) ) * 0.5 + ( (b[3][1] * b[2][1] * c2 + b[3][1] * b[2][1] * c3)+ ((b[3][0] * b[2][0] + b[3][1] * b[2][1] + b[3][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[0][1] * b[2][2] * c2 + b[0][2] * b[2][1] * c3) ) * 0.5 + ( (b[3][1] * b[2][2] * c2 + b[3][2] * b[2][1] * c3) ) * 0.5 ),      (( (b[0][1] * b[3][0] * c2 + b[0][0] * b[3][1] * c3) ) * 1.0 + ( (b[3][1] * b[3][0] * c2 + b[3][0] * b[3][1] * c3) ) * 0.5 ),      (( (b[0][1] * b[3][1] * c2 + b[0][1] * b[3][1] * c3)+ ((b[0][0] * b[3][0] + b[0][1] * b[3][1] + b[0][2] * b[3][2]) * c3) ) * 1.0 + ( (b[3][1] * b[3][1] * c2 + b[3][1] * b[3][1] * c3)+ ((b[3][0] * b[3][0] + b[3][1] * b[3][1] + b[3][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[0][1] * b[3][2] * c2 + b[0][2] * b[3][1] * c3) ) * 1.0 + ( (b[3][1] * b[3][2] * c2 + b[3][2] * b[3][1] * c3) ) * 0.5 ),      (( (b[0][1] * b[0][0] * c2 + b[0][0] * b[0][1] * c3) ) * 0.5 + ( (b[0][1] * b[1][0] * c2 + b[0][0] * b[1][1] * c3) ) * 0.5 + ( (b[3][1] * b[0][0] * c2 + b[3][0] * b[0][1] * c3) ) * 0.5 + ( (b[3][1] * b[1][0] * c2 + b[3][0] * b[1][1] * c3) ) * 1.0 ),      (( (b[0][1] * b[0][1] * c2 + b[0][1] * b[0][1] * c3)+ ((b[0][0] * b[0][0] + b[0][1] * b[0][1] + b[0][2] * b[0][2]) * c3) ) * 0.5 + ( (b[0][1] * b[1][1] * c2 + b[0][1] * b[1][1] * c3)+ ((b[0][0] * b[1][0] + b[0][1] * b[1][1] + b[0][2] * b[1][2]) * c3) ) * 0.5 + ( (b[3][1] * b[0][1] * c2 + b[3][1] * b[0][1] * c3)+ ((b[3][0] * b[0][0] + b[3][1] * b[0][1] + b[3][2] * b[0][2]) * c3) ) * 0.5 + ( (b[3][1] * b[1][1] * c2 + b[3][1] * b[1][1] * c3)+ ((b[3][0] * b[1][0] + b[3][1] * b[1][1] + b[3][2] * b[1][2]) * c3) ) * 1.0 ),      (( (b[0][1] * b[0][2] * c2 + b[0][2] * b[0][1] * c3) ) * 0.5 + ( (b[0][1] * b[1][2] * c2 + b[0][2] * b[1][1] * c3) ) * 0.5 + ( (b[3][1] * b[0][2] * c2 + b[3][2] * b[0][1] * c3) ) * 0.5 + ( (b[3][1] * b[1][2] * c2 + b[3][2] * b[1][1] * c3) ) * 1.0 ),      (( (b[0][1] * b[1][0] * c2 + b[0][0] * b[1][1] * c3) ) * 0.5 + ( (b[0][1] * b[2][0] * c2 + b[0][0] * b[2][1] * c3) ) * 0.5 + ( (b[3][1] * b[1][0] * c2 + b[3][0] * b[1][1] * c3) ) * 0.5 + ( (b[3][1] * b[2][0] * c2 + b[3][0] * b[2][1] * c3) ) * 0.5 ),      (( (b[0][1] * b[1][1] * c2 + b[0][1] * b[1][1] * c3)+ ((b[0][0] * b[1][0] + b[0][1] * b[1][1] + b[0][2] * b[1][2]) * c3) ) * 0.5 + ( (b[0][1] * b[2][1] * c2 + b[0][1] * b[2][1] * c3)+ ((b[0][0] * b[2][0] + b[0][1] * b[2][1] + b[0][2] * b[2][2]) * c3) ) * 0.5 + ( (b[3][1] * b[1][1] * c2 + b[3][1] * b[1][1] * c3)+ ((b[3][0] * b[1][0] + b[3][1] * b[1][1] + b[3][2] * b[1][2]) * c3) ) * 0.5 + ( (b[3][1] * b[2][1] * c2 + b[3][1] * b[2][1] * c3)+ ((b[3][0] * b[2][0] + b[3][1] * b[2][1] + b[3][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[0][1] * b[1][2] * c2 + b[0][2] * b[1][1] * c3) ) * 0.5 + ( (b[0][1] * b[2][2] * c2 + b[0][2] * b[2][1] * c3) ) * 0.5 + ( (b[3][1] * b[1][2] * c2 + b[3][2] * b[1][1] * c3) ) * 0.5 + ( (b[3][1] * b[2][2] * c2 + b[3][2] * b[2][1] * c3) ) * 0.5 ),      (( (b[0][1] * b[0][0] * c2 + b[0][0] * b[0][1] * c3) ) * 0.5 + ( (b[0][1] * b[2][0] * c2 + b[0][0] * b[2][1] * c3) ) * 0.5 + ( (b[3][1] * b[0][0] * c2 + b[3][0] * b[0][1] * c3) ) * 0.5 + ( (b[3][1] * b[2][0] * c2 + b[3][0] * b[2][1] * c3) ) * 1.0 ),      (( (b[0][1] * b[0][1] * c2 + b[0][1] * b[0][1] * c3)+ ((b[0][0] * b[0][0] + b[0][1] * b[0][1] + b[0][2] * b[0][2]) * c3) ) * 0.5 + ( (b[0][1] * b[2][1] * c2 + b[0][1] * b[2][1] * c3)+ ((b[0][0] * b[2][0] + b[0][1] * b[2][1] + b[0][2] * b[2][2]) * c3) ) * 0.5 + ( (b[3][1] * b[0][1] * c2 + b[3][1] * b[0][1] * c3)+ ((b[3][0] * b[0][0] + b[3][1] * b[0][1] + b[3][2] * b[0][2]) * c3) ) * 0.5 + ( (b[3][1] * b[2][1] * c2 + b[3][1] * b[2][1] * c3)+ ((b[3][0] * b[2][0] + b[3][1] * b[2][1] + b[3][2] * b[2][2]) * c3) ) * 1.0 ),      (( (b[0][1] * b[0][2] * c2 + b[0][2] * b[0][1] * c3) ) * 0.5 + ( (b[0][1] * b[2][2] * c2 + b[0][2] * b[2][1] * c3) ) * 0.5 + ( (b[3][1] * b[0][2] * c2 + b[3][2] * b[0][1] * c3) ) * 0.5 + ( (b[3][1] * b[2][2] * c2 + b[3][2] * b[2][1] * c3) ) * 1.0 ),      (( (b[0][1] * b[0][0] * c2 + b[0][0] * b[0][1] * c3) ) * 1.0 + ( (b[0][1] * b[3][0] * c2 + b[0][0] * b[3][1] * c3) ) * 0.5 + ( (b[3][1] * b[0][0] * c2 + b[3][0] * b[0][1] * c3) ) * 0.5 + ( (b[3][1] * b[3][0] * c2 + b[3][0] * b[3][1] * c3) ) * 1.0 ),      (( (b[0][1] * b[0][1] * c2 + b[0][1] * b[0][1] * c3)+ ((b[0][0] * b[0][0] + b[0][1] * b[0][1] + b[0][2] * b[0][2]) * c3) ) * 1.0 + ( (b[0][1] * b[3][1] * c2 + b[0][1] * b[3][1] * c3)+ ((b[0][0] * b[3][0] + b[0][1] * b[3][1] + b[0][2] * b[3][2]) * c3) ) * 0.5 + ( (b[3][1] * b[0][1] * c2 + b[3][1] * b[0][1] * c3)+ ((b[3][0] * b[0][0] + b[3][1] * b[0][1] + b[3][2] * b[0][2]) * c3) ) * 0.5 + ( (b[3][1] * b[3][1] * c2 + b[3][1] * b[3][1] * c3)+ ((b[3][0] * b[3][0] + b[3][1] * b[3][1] + b[3][2] * b[3][2]) * c3) ) * 1.0 ),      (( (b[0][1] * b[0][2] * c2 + b[0][2] * b[0][1] * c3) ) * 1.0 + ( (b[0][1] * b[3][2] * c2 + b[0][2] * b[3][1] * c3) ) * 0.5 + ( (b[3][1] * b[0][2] * c2 + b[3][2] * b[0][1] * c3) ) * 0.5 + ( (b[3][1] * b[3][2] * c2 + b[3][2] * b[3][1] * c3) ) * 1.0 ),      (( (b[0][1] * b[1][0] * c2 + b[0][0] * b[1][1] * c3) ) * 1.0 + ( (b[0][1] * b[3][0] * c2 + b[0][0] * b[3][1] * c3) ) * 0.5 + ( (b[3][1] * b[1][0] * c2 + b[3][0] * b[1][1] * c3) ) * 0.5 + ( (b[3][1] * b[3][0] * c2 + b[3][0] * b[3][1] * c3) ) * 0.5 ),      (( (b[0][1] * b[1][1] * c2 + b[0][1] * b[1][1] * c3)+ ((b[0][0] * b[1][0] + b[0][1] * b[1][1] + b[0][2] * b[1][2]) * c3) ) * 1.0 + ( (b[0][1] * b[3][1] * c2 + b[0][1] * b[3][1] * c3)+ ((b[0][0] * b[3][0] + b[0][1] * b[3][1] + b[0][2] * b[3][2]) * c3) ) * 0.5 + ( (b[3][1] * b[1][1] * c2 + b[3][1] * b[1][1] * c3)+ ((b[3][0] * b[1][0] + b[3][1] * b[1][1] + b[3][2] * b[1][2]) * c3) ) * 0.5 + ( (b[3][1] * b[3][1] * c2 + b[3][1] * b[3][1] * c3)+ ((b[3][0] * b[3][0] + b[3][1] * b[3][1] + b[3][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[0][1] * b[1][2] * c2 + b[0][2] * b[1][1] * c3) ) * 1.0 + ( (b[0][1] * b[3][2] * c2 + b[0][2] * b[3][1] * c3) ) * 0.5 + ( (b[3][1] * b[1][2] * c2 + b[3][2] * b[1][1] * c3) ) * 0.5 + ( (b[3][1] * b[3][2] * c2 + b[3][2] * b[3][1] * c3) ) * 0.5 ),      (( (b[0][1] * b[2][0] * c2 + b[0][0] * b[2][1] * c3) ) * 1.0 + ( (b[0][1] * b[3][0] * c2 + b[0][0] * b[3][1] * c3) ) * 0.5 + ( (b[3][1] * b[2][0] * c2 + b[3][0] * b[2][1] * c3) ) * 0.5 + ( (b[3][1] * b[3][0] * c2 + b[3][0] * b[3][1] * c3) ) * 0.5 ),      (( (b[0][1] * b[2][1] * c2 + b[0][1] * b[2][1] * c3)+ ((b[0][0] * b[2][0] + b[0][1] * b[2][1] + b[0][2] * b[2][2]) * c3) ) * 1.0 + ( (b[0][1] * b[3][1] * c2 + b[0][1] * b[3][1] * c3)+ ((b[0][0] * b[3][0] + b[0][1] * b[3][1] + b[0][2] * b[3][2]) * c3) ) * 0.5 + ( (b[3][1] * b[2][1] * c2 + b[3][1] * b[2][1] * c3)+ ((b[3][0] * b[2][0] + b[3][1] * b[2][1] + b[3][2] * b[2][2]) * c3) ) * 0.5 + ( (b[3][1] * b[3][1] * c2 + b[3][1] * b[3][1] * c3)+ ((b[3][0] * b[3][0] + b[3][1] * b[3][1] + b[3][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[0][1] * b[2][2] * c2 + b[0][2] * b[2][1] * c3) ) * 1.0 + ( (b[0][1] * b[3][2] * c2 + b[0][2] * b[3][1] * c3) ) * 0.5 + ( (b[3][1] * b[2][2] * c2 + b[3][2] * b[2][1] * c3) ) * 0.5 + ( (b[3][1] * b[3][2] * c2 + b[3][2] * b[3][1] * c3) ) * 0.5 )},
{ (( (b[0][2] * b[0][0] * c2 + b[0][0] * b[0][2] * c3) ) * 0.5 + ( (b[3][2] * b[0][0] * c2 + b[3][0] * b[0][2] * c3) ) * 1.0 ),      (( (b[0][2] * b[0][1] * c2 + b[0][1] * b[0][2] * c3) ) * 0.5 + ( (b[3][2] * b[0][1] * c2 + b[3][1] * b[0][2] * c3) ) * 1.0 ),      (( (b[0][2] * b[0][2] * c2 + b[0][2] * b[0][2] * c3)+ ((b[0][0] * b[0][0] + b[0][1] * b[0][1] + b[0][2] * b[0][2]) * c3) ) * 0.5 + ( (b[3][2] * b[0][2] * c2 + b[3][2] * b[0][2] * c3)+ ((b[3][0] * b[0][0] + b[3][1] * b[0][1] + b[3][2] * b[0][2]) * c3) ) * 1.0 ),      (( (b[0][2] * b[1][0] * c2 + b[0][0] * b[1][2] * c3) ) * 0.5 + ( (b[3][2] * b[1][0] * c2 + b[3][0] * b[1][2] * c3) ) * 0.5 ),      (( (b[0][2] * b[1][1] * c2 + b[0][1] * b[1][2] * c3) ) * 0.5 + ( (b[3][2] * b[1][1] * c2 + b[3][1] * b[1][2] * c3) ) * 0.5 ),      (( (b[0][2] * b[1][2] * c2 + b[0][2] * b[1][2] * c3)+ ((b[0][0] * b[1][0] + b[0][1] * b[1][1] + b[0][2] * b[1][2]) * c3) ) * 0.5 + ( (b[3][2] * b[1][2] * c2 + b[3][2] * b[1][2] * c3)+ ((b[3][0] * b[1][0] + b[3][1] * b[1][1] + b[3][2] * b[1][2]) * c3) ) * 0.5 ),      (( (b[0][2] * b[2][0] * c2 + b[0][0] * b[2][2] * c3) ) * 0.5 + ( (b[3][2] * b[2][0] * c2 + b[3][0] * b[2][2] * c3) ) * 0.5 ),      (( (b[0][2] * b[2][1] * c2 + b[0][1] * b[2][2] * c3) ) * 0.5 + ( (b[3][2] * b[2][1] * c2 + b[3][1] * b[2][2] * c3) ) * 0.5 ),      (( (b[0][2] * b[2][2] * c2 + b[0][2] * b[2][2] * c3)+ ((b[0][0] * b[2][0] + b[0][1] * b[2][1] + b[0][2] * b[2][2]) * c3) ) * 0.5 + ( (b[3][2] * b[2][2] * c2 + b[3][2] * b[2][2] * c3)+ ((b[3][0] * b[2][0] + b[3][1] * b[2][1] + b[3][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[0][2] * b[3][0] * c2 + b[0][0] * b[3][2] * c3) ) * 1.0 + ( (b[3][2] * b[3][0] * c2 + b[3][0] * b[3][2] * c3) ) * 0.5 ),      (( (b[0][2] * b[3][1] * c2 + b[0][1] * b[3][2] * c3) ) * 1.0 + ( (b[3][2] * b[3][1] * c2 + b[3][1] * b[3][2] * c3) ) * 0.5 ),      (( (b[0][2] * b[3][2] * c2 + b[0][2] * b[3][2] * c3)+ ((b[0][0] * b[3][0] + b[0][1] * b[3][1] + b[0][2] * b[3][2]) * c3) ) * 1.0 + ( (b[3][2] * b[3][2] * c2 + b[3][2] * b[3][2] * c3)+ ((b[3][0] * b[3][0] + b[3][1] * b[3][1] + b[3][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[0][2] * b[0][0] * c2 + b[0][0] * b[0][2] * c3) ) * 0.5 + ( (b[0][2] * b[1][0] * c2 + b[0][0] * b[1][2] * c3) ) * 0.5 + ( (b[3][2] * b[0][0] * c2 + b[3][0] * b[0][2] * c3) ) * 0.5 + ( (b[3][2] * b[1][0] * c2 + b[3][0] * b[1][2] * c3) ) * 1.0 ),      (( (b[0][2] * b[0][1] * c2 + b[0][1] * b[0][2] * c3) ) * 0.5 + ( (b[0][2] * b[1][1] * c2 + b[0][1] * b[1][2] * c3) ) * 0.5 + ( (b[3][2] * b[0][1] * c2 + b[3][1] * b[0][2] * c3) ) * 0.5 + ( (b[3][2] * b[1][1] * c2 + b[3][1] * b[1][2] * c3) ) * 1.0 ),      (( (b[0][2] * b[0][2] * c2 + b[0][2] * b[0][2] * c3)+ ((b[0][0] * b[0][0] + b[0][1] * b[0][1] + b[0][2] * b[0][2]) * c3) ) * 0.5 + ( (b[0][2] * b[1][2] * c2 + b[0][2] * b[1][2] * c3)+ ((b[0][0] * b[1][0] + b[0][1] * b[1][1] + b[0][2] * b[1][2]) * c3) ) * 0.5 + ( (b[3][2] * b[0][2] * c2 + b[3][2] * b[0][2] * c3)+ ((b[3][0] * b[0][0] + b[3][1] * b[0][1] + b[3][2] * b[0][2]) * c3) ) * 0.5 + ( (b[3][2] * b[1][2] * c2 + b[3][2] * b[1][2] * c3)+ ((b[3][0] * b[1][0] + b[3][1] * b[1][1] + b[3][2] * b[1][2]) * c3) ) * 1.0 ),      (( (b[0][2] * b[1][0] * c2 + b[0][0] * b[1][2] * c3) ) * 0.5 + ( (b[0][2] * b[2][0] * c2 + b[0][0] * b[2][2] * c3) ) * 0.5 + ( (b[3][2] * b[1][0] * c2 + b[3][0] * b[1][2] * c3) ) * 0.5 + ( (b[3][2] * b[2][0] * c2 + b[3][0] * b[2][2] * c3) ) * 0.5 ),      (( (b[0][2] * b[1][1] * c2 + b[0][1] * b[1][2] * c3) ) * 0.5 + ( (b[0][2] * b[2][1] * c2 + b[0][1] * b[2][2] * c3) ) * 0.5 + ( (b[3][2] * b[1][1] * c2 + b[3][1] * b[1][2] * c3) ) * 0.5 + ( (b[3][2] * b[2][1] * c2 + b[3][1] * b[2][2] * c3) ) * 0.5 ),      (( (b[0][2] * b[1][2] * c2 + b[0][2] * b[1][2] * c3)+ ((b[0][0] * b[1][0] + b[0][1] * b[1][1] + b[0][2] * b[1][2]) * c3) ) * 0.5 + ( (b[0][2] * b[2][2] * c2 + b[0][2] * b[2][2] * c3)+ ((b[0][0] * b[2][0] + b[0][1] * b[2][1] + b[0][2] * b[2][2]) * c3) ) * 0.5 + ( (b[3][2] * b[1][2] * c2 + b[3][2] * b[1][2] * c3)+ ((b[3][0] * b[1][0] + b[3][1] * b[1][1] + b[3][2] * b[1][2]) * c3) ) * 0.5 + ( (b[3][2] * b[2][2] * c2 + b[3][2] * b[2][2] * c3)+ ((b[3][0] * b[2][0] + b[3][1] * b[2][1] + b[3][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[0][2] * b[0][0] * c2 + b[0][0] * b[0][2] * c3) ) * 0.5 + ( (b[0][2] * b[2][0] * c2 + b[0][0] * b[2][2] * c3) ) * 0.5 + ( (b[3][2] * b[0][0] * c2 + b[3][0] * b[0][2] * c3) ) * 0.5 + ( (b[3][2] * b[2][0] * c2 + b[3][0] * b[2][2] * c3) ) * 1.0 ),      (( (b[0][2] * b[0][1] * c2 + b[0][1] * b[0][2] * c3) ) * 0.5 + ( (b[0][2] * b[2][1] * c2 + b[0][1] * b[2][2] * c3) ) * 0.5 + ( (b[3][2] * b[0][1] * c2 + b[3][1] * b[0][2] * c3) ) * 0.5 + ( (b[3][2] * b[2][1] * c2 + b[3][1] * b[2][2] * c3) ) * 1.0 ),      (( (b[0][2] * b[0][2] * c2 + b[0][2] * b[0][2] * c3)+ ((b[0][0] * b[0][0] + b[0][1] * b[0][1] + b[0][2] * b[0][2]) * c3) ) * 0.5 + ( (b[0][2] * b[2][2] * c2 + b[0][2] * b[2][2] * c3)+ ((b[0][0] * b[2][0] + b[0][1] * b[2][1] + b[0][2] * b[2][2]) * c3) ) * 0.5 + ( (b[3][2] * b[0][2] * c2 + b[3][2] * b[0][2] * c3)+ ((b[3][0] * b[0][0] + b[3][1] * b[0][1] + b[3][2] * b[0][2]) * c3) ) * 0.5 + ( (b[3][2] * b[2][2] * c2 + b[3][2] * b[2][2] * c3)+ ((b[3][0] * b[2][0] + b[3][1] * b[2][1] + b[3][2] * b[2][2]) * c3) ) * 1.0 ),      (( (b[0][2] * b[0][0] * c2 + b[0][0] * b[0][2] * c3) ) * 1.0 + ( (b[0][2] * b[3][0] * c2 + b[0][0] * b[3][2] * c3) ) * 0.5 + ( (b[3][2] * b[0][0] * c2 + b[3][0] * b[0][2] * c3) ) * 0.5 + ( (b[3][2] * b[3][0] * c2 + b[3][0] * b[3][2] * c3) ) * 1.0 ),      (( (b[0][2] * b[0][1] * c2 + b[0][1] * b[0][2] * c3) ) * 1.0 + ( (b[0][2] * b[3][1] * c2 + b[0][1] * b[3][2] * c3) ) * 0.5 + ( (b[3][2] * b[0][1] * c2 + b[3][1] * b[0][2] * c3) ) * 0.5 + ( (b[3][2] * b[3][1] * c2 + b[3][1] * b[3][2] * c3) ) * 1.0 ),      (( (b[0][2] * b[0][2] * c2 + b[0][2] * b[0][2] * c3)+ ((b[0][0] * b[0][0] + b[0][1] * b[0][1] + b[0][2] * b[0][2]) * c3) ) * 1.0 + ( (b[0][2] * b[3][2] * c2 + b[0][2] * b[3][2] * c3)+ ((b[0][0] * b[3][0] + b[0][1] * b[3][1] + b[0][2] * b[3][2]) * c3) ) * 0.5 + ( (b[3][2] * b[0][2] * c2 + b[3][2] * b[0][2] * c3)+ ((b[3][0] * b[0][0] + b[3][1] * b[0][1] + b[3][2] * b[0][2]) * c3) ) * 0.5 + ( (b[3][2] * b[3][2] * c2 + b[3][2] * b[3][2] * c3)+ ((b[3][0] * b[3][0] + b[3][1] * b[3][1] + b[3][2] * b[3][2]) * c3) ) * 1.0 ),      (( (b[0][2] * b[1][0] * c2 + b[0][0] * b[1][2] * c3) ) * 1.0 + ( (b[0][2] * b[3][0] * c2 + b[0][0] * b[3][2] * c3) ) * 0.5 + ( (b[3][2] * b[1][0] * c2 + b[3][0] * b[1][2] * c3) ) * 0.5 + ( (b[3][2] * b[3][0] * c2 + b[3][0] * b[3][2] * c3) ) * 0.5 ),      (( (b[0][2] * b[1][1] * c2 + b[0][1] * b[1][2] * c3) ) * 1.0 + ( (b[0][2] * b[3][1] * c2 + b[0][1] * b[3][2] * c3) ) * 0.5 + ( (b[3][2] * b[1][1] * c2 + b[3][1] * b[1][2] * c3) ) * 0.5 + ( (b[3][2] * b[3][1] * c2 + b[3][1] * b[3][2] * c3) ) * 0.5 ),      (( (b[0][2] * b[1][2] * c2 + b[0][2] * b[1][2] * c3)+ ((b[0][0] * b[1][0] + b[0][1] * b[1][1] + b[0][2] * b[1][2]) * c3) ) * 1.0 + ( (b[0][2] * b[3][2] * c2 + b[0][2] * b[3][2] * c3)+ ((b[0][0] * b[3][0] + b[0][1] * b[3][1] + b[0][2] * b[3][2]) * c3) ) * 0.5 + ( (b[3][2] * b[1][2] * c2 + b[3][2] * b[1][2] * c3)+ ((b[3][0] * b[1][0] + b[3][1] * b[1][1] + b[3][2] * b[1][2]) * c3) ) * 0.5 + ( (b[3][2] * b[3][2] * c2 + b[3][2] * b[3][2] * c3)+ ((b[3][0] * b[3][0] + b[3][1] * b[3][1] + b[3][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[0][2] * b[2][0] * c2 + b[0][0] * b[2][2] * c3) ) * 1.0 + ( (b[0][2] * b[3][0] * c2 + b[0][0] * b[3][2] * c3) ) * 0.5 + ( (b[3][2] * b[2][0] * c2 + b[3][0] * b[2][2] * c3) ) * 0.5 + ( (b[3][2] * b[3][0] * c2 + b[3][0] * b[3][2] * c3) ) * 0.5 ),      (( (b[0][2] * b[2][1] * c2 + b[0][1] * b[2][2] * c3) ) * 1.0 + ( (b[0][2] * b[3][1] * c2 + b[0][1] * b[3][2] * c3) ) * 0.5 + ( (b[3][2] * b[2][1] * c2 + b[3][1] * b[2][2] * c3) ) * 0.5 + ( (b[3][2] * b[3][1] * c2 + b[3][1] * b[3][2] * c3) ) * 0.5 ),      (( (b[0][2] * b[2][2] * c2 + b[0][2] * b[2][2] * c3)+ ((b[0][0] * b[2][0] + b[0][1] * b[2][1] + b[0][2] * b[2][2]) * c3) ) * 1.0 + ( (b[0][2] * b[3][2] * c2 + b[0][2] * b[3][2] * c3)+ ((b[0][0] * b[3][0] + b[0][1] * b[3][1] + b[0][2] * b[3][2]) * c3) ) * 0.5 + ( (b[3][2] * b[2][2] * c2 + b[3][2] * b[2][2] * c3)+ ((b[3][0] * b[2][0] + b[3][1] * b[2][1] + b[3][2] * b[2][2]) * c3) ) * 0.5 + ( (b[3][2] * b[3][2] * c2 + b[3][2] * b[3][2] * c3)+ ((b[3][0] * b[3][0] + b[3][1] * b[3][1] + b[3][2] * b[3][2]) * c3) ) * 0.5 )},
{ (( (b[1][0] * b[0][0] * c2 + b[1][0] * b[0][0] * c3)+ ((b[1][0] * b[0][0] + b[1][1] * b[0][1] + b[1][2] * b[0][2]) * c3) ) * 0.5 + ( (b[3][0] * b[0][0] * c2 + b[3][0] * b[0][0] * c3)+ ((b[3][0] * b[0][0] + b[3][1] * b[0][1] + b[3][2] * b[0][2]) * c3) ) * 0.5 ),      (( (b[1][0] * b[0][1] * c2 + b[1][1] * b[0][0] * c3) ) * 0.5 + ( (b[3][0] * b[0][1] * c2 + b[3][1] * b[0][0] * c3) ) * 0.5 ),      (( (b[1][0] * b[0][2] * c2 + b[1][2] * b[0][0] * c3) ) * 0.5 + ( (b[3][0] * b[0][2] * c2 + b[3][2] * b[0][0] * c3) ) * 0.5 ),      (( (b[1][0] * b[1][0] * c2 + b[1][0] * b[1][0] * c3)+ ((b[1][0] * b[1][0] + b[1][1] * b[1][1] + b[1][2] * b[1][2]) * c3) ) * 0.5 + ( (b[3][0] * b[1][0] * c2 + b[3][0] * b[1][0] * c3)+ ((b[3][0] * b[1][0] + b[3][1] * b[1][1] + b[3][2] * b[1][2]) * c3) ) * 1.0 ),      (( (b[1][0] * b[1][1] * c2 + b[1][1] * b[1][0] * c3) ) * 0.5 + ( (b[3][0] * b[1][1] * c2 + b[3][1] * b[1][0] * c3) ) * 1.0 ),      (( (b[1][0] * b[1][2] * c2 + b[1][2] * b[1][0] * c3) ) * 0.5 + ( (b[3][0] * b[1][2] * c2 + b[3][2] * b[1][0] * c3) ) * 1.0 ),      (( (b[1][0] * b[2][0] * c2 + b[1][0] * b[2][0] * c3)+ ((b[1][0] * b[2][0] + b[1][1] * b[2][1] + b[1][2] * b[2][2]) * c3) ) * 0.5 + ( (b[3][0] * b[2][0] * c2 + b[3][0] * b[2][0] * c3)+ ((b[3][0] * b[2][0] + b[3][1] * b[2][1] + b[3][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[1][0] * b[2][1] * c2 + b[1][1] * b[2][0] * c3) ) * 0.5 + ( (b[3][0] * b[2][1] * c2 + b[3][1] * b[2][0] * c3) ) * 0.5 ),      (( (b[1][0] * b[2][2] * c2 + b[1][2] * b[2][0] * c3) ) * 0.5 + ( (b[3][0] * b[2][2] * c2 + b[3][2] * b[2][0] * c3) ) * 0.5 ),      (( (b[1][0] * b[3][0] * c2 + b[1][0] * b[3][0] * c3)+ ((b[1][0] * b[3][0] + b[1][1] * b[3][1] + b[1][2] * b[3][2]) * c3) ) * 1.0 + ( (b[3][0] * b[3][0] * c2 + b[3][0] * b[3][0] * c3)+ ((b[3][0] * b[3][0] + b[3][1] * b[3][1] + b[3][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[1][0] * b[3][1] * c2 + b[1][1] * b[3][0] * c3) ) * 1.0 + ( (b[3][0] * b[3][1] * c2 + b[3][1] * b[3][0] * c3) ) * 0.5 ),      (( (b[1][0] * b[3][2] * c2 + b[1][2] * b[3][0] * c3) ) * 1.0 + ( (b[3][0] * b[3][2] * c2 + b[3][2] * b[3][0] * c3) ) * 0.5 ),      (( (b[1][0] * b[0][0] * c2 + b[1][0] * b[0][0] * c3)+ ((b[1][0] * b[0][0] + b[1][1] * b[0][1] + b[1][2] * b[0][2]) * c3) ) * 0.5 + ( (b[1][0] * b[1][0] * c2 + b[1][0] * b[1][0] * c3)+ ((b[1][0] * b[1][0] + b[1][1] * b[1][1] + b[1][2] * b[1][2]) * c3) ) * 0.5 + ( (b[3][0] * b[0][0] * c2 + b[3][0] * b[0][0] * c3)+ ((b[3][0] * b[0][0] + b[3][1] * b[0][1] + b[3][2] * b[0][2]) * c3) ) * 1.0 + ( (b[3][0] * b[1][0] * c2 + b[3][0] * b[1][0] * c3)+ ((b[3][0] * b[1][0] + b[3][1] * b[1][1] + b[3][2] * b[1][2]) * c3) ) * 0.5 ),      (( (b[1][0] * b[0][1] * c2 + b[1][1] * b[0][0] * c3) ) * 0.5 + ( (b[1][0] * b[1][1] * c2 + b[1][1] * b[1][0] * c3) ) * 0.5 + ( (b[3][0] * b[0][1] * c2 + b[3][1] * b[0][0] * c3) ) * 1.0 + ( (b[3][0] * b[1][1] * c2 + b[3][1] * b[1][0] * c3) ) * 0.5 ),      (( (b[1][0] * b[0][2] * c2 + b[1][2] * b[0][0] * c3) ) * 0.5 + ( (b[1][0] * b[1][2] * c2 + b[1][2] * b[1][0] * c3) ) * 0.5 + ( (b[3][0] * b[0][2] * c2 + b[3][2] * b[0][0] * c3) ) * 1.0 + ( (b[3][0] * b[1][2] * c2 + b[3][2] * b[1][0] * c3) ) * 0.5 ),      (( (b[1][0] * b[1][0] * c2 + b[1][0] * b[1][0] * c3)+ ((b[1][0] * b[1][0] + b[1][1] * b[1][1] + b[1][2] * b[1][2]) * c3) ) * 0.5 + ( (b[1][0] * b[2][0] * c2 + b[1][0] * b[2][0] * c3)+ ((b[1][0] * b[2][0] + b[1][1] * b[2][1] + b[1][2] * b[2][2]) * c3) ) * 0.5 + ( (b[3][0] * b[1][0] * c2 + b[3][0] * b[1][0] * c3)+ ((b[3][0] * b[1][0] + b[3][1] * b[1][1] + b[3][2] * b[1][2]) * c3) ) * 0.5 + ( (b[3][0] * b[2][0] * c2 + b[3][0] * b[2][0] * c3)+ ((b[3][0] * b[2][0] + b[3][1] * b[2][1] + b[3][2] * b[2][2]) * c3) ) * 1.0 ),      (( (b[1][0] * b[1][1] * c2 + b[1][1] * b[1][0] * c3) ) * 0.5 + ( (b[1][0] * b[2][1] * c2 + b[1][1] * b[2][0] * c3) ) * 0.5 + ( (b[3][0] * b[1][1] * c2 + b[3][1] * b[1][0] * c3) ) * 0.5 + ( (b[3][0] * b[2][1] * c2 + b[3][1] * b[2][0] * c3) ) * 1.0 ),      (( (b[1][0] * b[1][2] * c2 + b[1][2] * b[1][0] * c3) ) * 0.5 + ( (b[1][0] * b[2][2] * c2 + b[1][2] * b[2][0] * c3) ) * 0.5 + ( (b[3][0] * b[1][2] * c2 + b[3][2] * b[1][0] * c3) ) * 0.5 + ( (b[3][0] * b[2][2] * c2 + b[3][2] * b[2][0] * c3) ) * 1.0 ),      (( (b[1][0] * b[0][0] * c2 + b[1][0] * b[0][0] * c3)+ ((b[1][0] * b[0][0] + b[1][1] * b[0][1] + b[1][2] * b[0][2]) * c3) ) * 0.5 + ( (b[1][0] * b[2][0] * c2 + b[1][0] * b[2][0] * c3)+ ((b[1][0] * b[2][0] + b[1][1] * b[2][1] + b[1][2] * b[2][2]) * c3) ) * 0.5 + ( (b[3][0] * b[0][0] * c2 + b[3][0] * b[0][0] * c3)+ ((b[3][0] * b[0][0] + b[3][1] * b[0][1] + b[3][2] * b[0][2]) * c3) ) * 0.5 + ( (b[3][0] * b[2][0] * c2 + b[3][0] * b[2][0] * c3)+ ((b[3][0] * b[2][0] + b[3][1] * b[2][1] + b[3][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[1][0] * b[0][1] * c2 + b[1][1] * b[0][0] * c3) ) * 0.5 + ( (b[1][0] * b[2][1] * c2 + b[1][1] * b[2][0] * c3) ) * 0.5 + ( (b[3][0] * b[0][1] * c2 + b[3][1] * b[0][0] * c3) ) * 0.5 + ( (b[3][0] * b[2][1] * c2 + b[3][1] * b[2][0] * c3) ) * 0.5 ),      (( (b[1][0] * b[0][2] * c2 + b[1][2] * b[0][0] * c3) ) * 0.5 + ( (b[1][0] * b[2][2] * c2 + b[1][2] * b[2][0] * c3) ) * 0.5 + ( (b[3][0] * b[0][2] * c2 + b[3][2] * b[0][0] * c3) ) * 0.5 + ( (b[3][0] * b[2][2] * c2 + b[3][2] * b[2][0] * c3) ) * 0.5 ),      (( (b[1][0] * b[0][0] * c2 + b[1][0] * b[0][0] * c3)+ ((b[1][0] * b[0][0] + b[1][1] * b[0][1] + b[1][2] * b[0][2]) * c3) ) * 1.0 + ( (b[1][0] * b[3][0] * c2 + b[1][0] * b[3][0] * c3)+ ((b[1][0] * b[3][0] + b[1][1] * b[3][1] + b[1][2] * b[3][2]) * c3) ) * 0.5 + ( (b[3][0] * b[0][0] * c2 + b[3][0] * b[0][0] * c3)+ ((b[3][0] * b[0][0] + b[3][1] * b[0][1] + b[3][2] * b[0][2]) * c3) ) * 0.5 + ( (b[3][0] * b[3][0] * c2 + b[3][0] * b[3][0] * c3)+ ((b[3][0] * b[3][0] + b[3][1] * b[3][1] + b[3][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[1][0] * b[0][1] * c2 + b[1][1] * b[0][0] * c3) ) * 1.0 + ( (b[1][0] * b[3][1] * c2 + b[1][1] * b[3][0] * c3) ) * 0.5 + ( (b[3][0] * b[0][1] * c2 + b[3][1] * b[0][0] * c3) ) * 0.5 + ( (b[3][0] * b[3][1] * c2 + b[3][1] * b[3][0] * c3) ) * 0.5 ),      (( (b[1][0] * b[0][2] * c2 + b[1][2] * b[0][0] * c3) ) * 1.0 + ( (b[1][0] * b[3][2] * c2 + b[1][2] * b[3][0] * c3) ) * 0.5 + ( (b[3][0] * b[0][2] * c2 + b[3][2] * b[0][0] * c3) ) * 0.5 + ( (b[3][0] * b[3][2] * c2 + b[3][2] * b[3][0] * c3) ) * 0.5 ),      (( (b[1][0] * b[1][0] * c2 + b[1][0] * b[1][0] * c3)+ ((b[1][0] * b[1][0] + b[1][1] * b[1][1] + b[1][2] * b[1][2]) * c3) ) * 1.0 + ( (b[1][0] * b[3][0] * c2 + b[1][0] * b[3][0] * c3)+ ((b[1][0] * b[3][0] + b[1][1] * b[3][1] + b[1][2] * b[3][2]) * c3) ) * 0.5 + ( (b[3][0] * b[1][0] * c2 + b[3][0] * b[1][0] * c3)+ ((b[3][0] * b[1][0] + b[3][1] * b[1][1] + b[3][2] * b[1][2]) * c3) ) * 0.5 + ( (b[3][0] * b[3][0] * c2 + b[3][0] * b[3][0] * c3)+ ((b[3][0] * b[3][0] + b[3][1] * b[3][1] + b[3][2] * b[3][2]) * c3) ) * 1.0 ),      (( (b[1][0] * b[1][1] * c2 + b[1][1] * b[1][0] * c3) ) * 1.0 + ( (b[1][0] * b[3][1] * c2 + b[1][1] * b[3][0] * c3) ) * 0.5 + ( (b[3][0] * b[1][1] * c2 + b[3][1] * b[1][0] * c3) ) * 0.5 + ( (b[3][0] * b[3][1] * c2 + b[3][1] * b[3][0] * c3) ) * 1.0 ),      (( (b[1][0] * b[1][2] * c2 + b[1][2] * b[1][0] * c3) ) * 1.0 + ( (b[1][0] * b[3][2] * c2 + b[1][2] * b[3][0] * c3) ) * 0.5 + ( (b[3][0] * b[1][2] * c2 + b[3][2] * b[1][0] * c3) ) * 0.5 + ( (b[3][0] * b[3][2] * c2 + b[3][2] * b[3][0] * c3) ) * 1.0 ),      (( (b[1][0] * b[2][0] * c2 + b[1][0] * b[2][0] * c3)+ ((b[1][0] * b[2][0] + b[1][1] * b[2][1] + b[1][2] * b[2][2]) * c3) ) * 1.0 + ( (b[1][0] * b[3][0] * c2 + b[1][0] * b[3][0] * c3)+ ((b[1][0] * b[3][0] + b[1][1] * b[3][1] + b[1][2] * b[3][2]) * c3) ) * 0.5 + ( (b[3][0] * b[2][0] * c2 + b[3][0] * b[2][0] * c3)+ ((b[3][0] * b[2][0] + b[3][1] * b[2][1] + b[3][2] * b[2][2]) * c3) ) * 0.5 + ( (b[3][0] * b[3][0] * c2 + b[3][0] * b[3][0] * c3)+ ((b[3][0] * b[3][0] + b[3][1] * b[3][1] + b[3][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[1][0] * b[2][1] * c2 + b[1][1] * b[2][0] * c3) ) * 1.0 + ( (b[1][0] * b[3][1] * c2 + b[1][1] * b[3][0] * c3) ) * 0.5 + ( (b[3][0] * b[2][1] * c2 + b[3][1] * b[2][0] * c3) ) * 0.5 + ( (b[3][0] * b[3][1] * c2 + b[3][1] * b[3][0] * c3) ) * 0.5 ),      (( (b[1][0] * b[2][2] * c2 + b[1][2] * b[2][0] * c3) ) * 1.0 + ( (b[1][0] * b[3][2] * c2 + b[1][2] * b[3][0] * c3) ) * 0.5 + ( (b[3][0] * b[2][2] * c2 + b[3][2] * b[2][0] * c3) ) * 0.5 + ( (b[3][0] * b[3][2] * c2 + b[3][2] * b[3][0] * c3) ) * 0.5 )},
{ (( (b[1][1] * b[0][0] * c2 + b[1][0] * b[0][1] * c3) ) * 0.5 + ( (b[3][1] * b[0][0] * c2 + b[3][0] * b[0][1] * c3) ) * 0.5 ),      (( (b[1][1] * b[0][1] * c2 + b[1][1] * b[0][1] * c3)+ ((b[1][0] * b[0][0] + b[1][1] * b[0][1] + b[1][2] * b[0][2]) * c3) ) * 0.5 + ( (b[3][1] * b[0][1] * c2 + b[3][1] * b[0][1] * c3)+ ((b[3][0] * b[0][0] + b[3][1] * b[0][1] + b[3][2] * b[0][2]) * c3) ) * 0.5 ),      (( (b[1][1] * b[0][2] * c2 + b[1][2] * b[0][1] * c3) ) * 0.5 + ( (b[3][1] * b[0][2] * c2 + b[3][2] * b[0][1] * c3) ) * 0.5 ),      (( (b[1][1] * b[1][0] * c2 + b[1][0] * b[1][1] * c3) ) * 0.5 + ( (b[3][1] * b[1][0] * c2 + b[3][0] * b[1][1] * c3) ) * 1.0 ),      (( (b[1][1] * b[1][1] * c2 + b[1][1] * b[1][1] * c3)+ ((b[1][0] * b[1][0] + b[1][1] * b[1][1] + b[1][2] * b[1][2]) * c3) ) * 0.5 + ( (b[3][1] * b[1][1] * c2 + b[3][1] * b[1][1] * c3)+ ((b[3][0] * b[1][0] + b[3][1] * b[1][1] + b[3][2] * b[1][2]) * c3) ) * 1.0 ),      (( (b[1][1] * b[1][2] * c2 + b[1][2] * b[1][1] * c3) ) * 0.5 + ( (b[3][1] * b[1][2] * c2 + b[3][2] * b[1][1] * c3) ) * 1.0 ),      (( (b[1][1] * b[2][0] * c2 + b[1][0] * b[2][1] * c3) ) * 0.5 + ( (b[3][1] * b[2][0] * c2 + b[3][0] * b[2][1] * c3) ) * 0.5 ),      (( (b[1][1] * b[2][1] * c2 + b[1][1] * b[2][1] * c3)+ ((b[1][0] * b[2][0] + b[1][1] * b[2][1] + b[1][2] * b[2][2]) * c3) ) * 0.5 + ( (b[3][1] * b[2][1] * c2 + b[3][1] * b[2][1] * c3)+ ((b[3][0] * b[2][0] + b[3][1] * b[2][1] + b[3][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[1][1] * b[2][2] * c2 + b[1][2] * b[2][1] * c3) ) * 0.5 + ( (b[3][1] * b[2][2] * c2 + b[3][2] * b[2][1] * c3) ) * 0.5 ),      (( (b[1][1] * b[3][0] * c2 + b[1][0] * b[3][1] * c3) ) * 1.0 + ( (b[3][1] * b[3][0] * c2 + b[3][0] * b[3][1] * c3) ) * 0.5 ),      (( (b[1][1] * b[3][1] * c2 + b[1][1] * b[3][1] * c3)+ ((b[1][0] * b[3][0] + b[1][1] * b[3][1] + b[1][2] * b[3][2]) * c3) ) * 1.0 + ( (b[3][1] * b[3][1] * c2 + b[3][1] * b[3][1] * c3)+ ((b[3][0] * b[3][0] + b[3][1] * b[3][1] + b[3][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[1][1] * b[3][2] * c2 + b[1][2] * b[3][1] * c3) ) * 1.0 + ( (b[3][1] * b[3][2] * c2 + b[3][2] * b[3][1] * c3) ) * 0.5 ),      (( (b[1][1] * b[0][0] * c2 + b[1][0] * b[0][1] * c3) ) * 0.5 + ( (b[1][1] * b[1][0] * c2 + b[1][0] * b[1][1] * c3) ) * 0.5 + ( (b[3][1] * b[0][0] * c2 + b[3][0] * b[0][1] * c3) ) * 1.0 + ( (b[3][1] * b[1][0] * c2 + b[3][0] * b[1][1] * c3) ) * 0.5 ),      (( (b[1][1] * b[0][1] * c2 + b[1][1] * b[0][1] * c3)+ ((b[1][0] * b[0][0] + b[1][1] * b[0][1] + b[1][2] * b[0][2]) * c3) ) * 0.5 + ( (b[1][1] * b[1][1] * c2 + b[1][1] * b[1][1] * c3)+ ((b[1][0] * b[1][0] + b[1][1] * b[1][1] + b[1][2] * b[1][2]) * c3) ) * 0.5 + ( (b[3][1] * b[0][1] * c2 + b[3][1] * b[0][1] * c3)+ ((b[3][0] * b[0][0] + b[3][1] * b[0][1] + b[3][2] * b[0][2]) * c3) ) * 1.0 + ( (b[3][1] * b[1][1] * c2 + b[3][1] * b[1][1] * c3)+ ((b[3][0] * b[1][0] + b[3][1] * b[1][1] + b[3][2] * b[1][2]) * c3) ) * 0.5 ),      (( (b[1][1] * b[0][2] * c2 + b[1][2] * b[0][1] * c3) ) * 0.5 + ( (b[1][1] * b[1][2] * c2 + b[1][2] * b[1][1] * c3) ) * 0.5 + ( (b[3][1] * b[0][2] * c2 + b[3][2] * b[0][1] * c3) ) * 1.0 + ( (b[3][1] * b[1][2] * c2 + b[3][2] * b[1][1] * c3) ) * 0.5 ),      (( (b[1][1] * b[1][0] * c2 + b[1][0] * b[1][1] * c3) ) * 0.5 + ( (b[1][1] * b[2][0] * c2 + b[1][0] * b[2][1] * c3) ) * 0.5 + ( (b[3][1] * b[1][0] * c2 + b[3][0] * b[1][1] * c3) ) * 0.5 + ( (b[3][1] * b[2][0] * c2 + b[3][0] * b[2][1] * c3) ) * 1.0 ),      (( (b[1][1] * b[1][1] * c2 + b[1][1] * b[1][1] * c3)+ ((b[1][0] * b[1][0] + b[1][1] * b[1][1] + b[1][2] * b[1][2]) * c3) ) * 0.5 + ( (b[1][1] * b[2][1] * c2 + b[1][1] * b[2][1] * c3)+ ((b[1][0] * b[2][0] + b[1][1] * b[2][1] + b[1][2] * b[2][2]) * c3) ) * 0.5 + ( (b[3][1] * b[1][1] * c2 + b[3][1] * b[1][1] * c3)+ ((b[3][0] * b[1][0] + b[3][1] * b[1][1] + b[3][2] * b[1][2]) * c3) ) * 0.5 + ( (b[3][1] * b[2][1] * c2 + b[3][1] * b[2][1] * c3)+ ((b[3][0] * b[2][0] + b[3][1] * b[2][1] + b[3][2] * b[2][2]) * c3) ) * 1.0 ),      (( (b[1][1] * b[1][2] * c2 + b[1][2] * b[1][1] * c3) ) * 0.5 + ( (b[1][1] * b[2][2] * c2 + b[1][2] * b[2][1] * c3) ) * 0.5 + ( (b[3][1] * b[1][2] * c2 + b[3][2] * b[1][1] * c3) ) * 0.5 + ( (b[3][1] * b[2][2] * c2 + b[3][2] * b[2][1] * c3) ) * 1.0 ),      (( (b[1][1] * b[0][0] * c2 + b[1][0] * b[0][1] * c3) ) * 0.5 + ( (b[1][1] * b[2][0] * c2 + b[1][0] * b[2][1] * c3) ) * 0.5 + ( (b[3][1] * b[0][0] * c2 + b[3][0] * b[0][1] * c3) ) * 0.5 + ( (b[3][1] * b[2][0] * c2 + b[3][0] * b[2][1] * c3) ) * 0.5 ),      (( (b[1][1] * b[0][1] * c2 + b[1][1] * b[0][1] * c3)+ ((b[1][0] * b[0][0] + b[1][1] * b[0][1] + b[1][2] * b[0][2]) * c3) ) * 0.5 + ( (b[1][1] * b[2][1] * c2 + b[1][1] * b[2][1] * c3)+ ((b[1][0] * b[2][0] + b[1][1] * b[2][1] + b[1][2] * b[2][2]) * c3) ) * 0.5 + ( (b[3][1] * b[0][1] * c2 + b[3][1] * b[0][1] * c3)+ ((b[3][0] * b[0][0] + b[3][1] * b[0][1] + b[3][2] * b[0][2]) * c3) ) * 0.5 + ( (b[3][1] * b[2][1] * c2 + b[3][1] * b[2][1] * c3)+ ((b[3][0] * b[2][0] + b[3][1] * b[2][1] + b[3][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[1][1] * b[0][2] * c2 + b[1][2] * b[0][1] * c3) ) * 0.5 + ( (b[1][1] * b[2][2] * c2 + b[1][2] * b[2][1] * c3) ) * 0.5 + ( (b[3][1] * b[0][2] * c2 + b[3][2] * b[0][1] * c3) ) * 0.5 + ( (b[3][1] * b[2][2] * c2 + b[3][2] * b[2][1] * c3) ) * 0.5 ),      (( (b[1][1] * b[0][0] * c2 + b[1][0] * b[0][1] * c3) ) * 1.0 + ( (b[1][1] * b[3][0] * c2 + b[1][0] * b[3][1] * c3) ) * 0.5 + ( (b[3][1] * b[0][0] * c2 + b[3][0] * b[0][1] * c3) ) * 0.5 + ( (b[3][1] * b[3][0] * c2 + b[3][0] * b[3][1] * c3) ) * 0.5 ),      (( (b[1][1] * b[0][1] * c2 + b[1][1] * b[0][1] * c3)+ ((b[1][0] * b[0][0] + b[1][1] * b[0][1] + b[1][2] * b[0][2]) * c3) ) * 1.0 + ( (b[1][1] * b[3][1] * c2 + b[1][1] * b[3][1] * c3)+ ((b[1][0] * b[3][0] + b[1][1] * b[3][1] + b[1][2] * b[3][2]) * c3) ) * 0.5 + ( (b[3][1] * b[0][1] * c2 + b[3][1] * b[0][1] * c3)+ ((b[3][0] * b[0][0] + b[3][1] * b[0][1] + b[3][2] * b[0][2]) * c3) ) * 0.5 + ( (b[3][1] * b[3][1] * c2 + b[3][1] * b[3][1] * c3)+ ((b[3][0] * b[3][0] + b[3][1] * b[3][1] + b[3][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[1][1] * b[0][2] * c2 + b[1][2] * b[0][1] * c3) ) * 1.0 + ( (b[1][1] * b[3][2] * c2 + b[1][2] * b[3][1] * c3) ) * 0.5 + ( (b[3][1] * b[0][2] * c2 + b[3][2] * b[0][1] * c3) ) * 0.5 + ( (b[3][1] * b[3][2] * c2 + b[3][2] * b[3][1] * c3) ) * 0.5 ),      (( (b[1][1] * b[1][0] * c2 + b[1][0] * b[1][1] * c3) ) * 1.0 + ( (b[1][1] * b[3][0] * c2 + b[1][0] * b[3][1] * c3) ) * 0.5 + ( (b[3][1] * b[1][0] * c2 + b[3][0] * b[1][1] * c3) ) * 0.5 + ( (b[3][1] * b[3][0] * c2 + b[3][0] * b[3][1] * c3) ) * 1.0 ),      (( (b[1][1] * b[1][1] * c2 + b[1][1] * b[1][1] * c3)+ ((b[1][0] * b[1][0] + b[1][1] * b[1][1] + b[1][2] * b[1][2]) * c3) ) * 1.0 + ( (b[1][1] * b[3][1] * c2 + b[1][1] * b[3][1] * c3)+ ((b[1][0] * b[3][0] + b[1][1] * b[3][1] + b[1][2] * b[3][2]) * c3) ) * 0.5 + ( (b[3][1] * b[1][1] * c2 + b[3][1] * b[1][1] * c3)+ ((b[3][0] * b[1][0] + b[3][1] * b[1][1] + b[3][2] * b[1][2]) * c3) ) * 0.5 + ( (b[3][1] * b[3][1] * c2 + b[3][1] * b[3][1] * c3)+ ((b[3][0] * b[3][0] + b[3][1] * b[3][1] + b[3][2] * b[3][2]) * c3) ) * 1.0 ),      (( (b[1][1] * b[1][2] * c2 + b[1][2] * b[1][1] * c3) ) * 1.0 + ( (b[1][1] * b[3][2] * c2 + b[1][2] * b[3][1] * c3) ) * 0.5 + ( (b[3][1] * b[1][2] * c2 + b[3][2] * b[1][1] * c3) ) * 0.5 + ( (b[3][1] * b[3][2] * c2 + b[3][2] * b[3][1] * c3) ) * 1.0 ),      (( (b[1][1] * b[2][0] * c2 + b[1][0] * b[2][1] * c3) ) * 1.0 + ( (b[1][1] * b[3][0] * c2 + b[1][0] * b[3][1] * c3) ) * 0.5 + ( (b[3][1] * b[2][0] * c2 + b[3][0] * b[2][1] * c3) ) * 0.5 + ( (b[3][1] * b[3][0] * c2 + b[3][0] * b[3][1] * c3) ) * 0.5 ),      (( (b[1][1] * b[2][1] * c2 + b[1][1] * b[2][1] * c3)+ ((b[1][0] * b[2][0] + b[1][1] * b[2][1] + b[1][2] * b[2][2]) * c3) ) * 1.0 + ( (b[1][1] * b[3][1] * c2 + b[1][1] * b[3][1] * c3)+ ((b[1][0] * b[3][0] + b[1][1] * b[3][1] + b[1][2] * b[3][2]) * c3) ) * 0.5 + ( (b[3][1] * b[2][1] * c2 + b[3][1] * b[2][1] * c3)+ ((b[3][0] * b[2][0] + b[3][1] * b[2][1] + b[3][2] * b[2][2]) * c3) ) * 0.5 + ( (b[3][1] * b[3][1] * c2 + b[3][1] * b[3][1] * c3)+ ((b[3][0] * b[3][0] + b[3][1] * b[3][1] + b[3][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[1][1] * b[2][2] * c2 + b[1][2] * b[2][1] * c3) ) * 1.0 + ( (b[1][1] * b[3][2] * c2 + b[1][2] * b[3][1] * c3) ) * 0.5 + ( (b[3][1] * b[2][2] * c2 + b[3][2] * b[2][1] * c3) ) * 0.5 + ( (b[3][1] * b[3][2] * c2 + b[3][2] * b[3][1] * c3) ) * 0.5 )},
{ (( (b[1][2] * b[0][0] * c2 + b[1][0] * b[0][2] * c3) ) * 0.5 + ( (b[3][2] * b[0][0] * c2 + b[3][0] * b[0][2] * c3) ) * 0.5 ),      (( (b[1][2] * b[0][1] * c2 + b[1][1] * b[0][2] * c3) ) * 0.5 + ( (b[3][2] * b[0][1] * c2 + b[3][1] * b[0][2] * c3) ) * 0.5 ),      (( (b[1][2] * b[0][2] * c2 + b[1][2] * b[0][2] * c3)+ ((b[1][0] * b[0][0] + b[1][1] * b[0][1] + b[1][2] * b[0][2]) * c3) ) * 0.5 + ( (b[3][2] * b[0][2] * c2 + b[3][2] * b[0][2] * c3)+ ((b[3][0] * b[0][0] + b[3][1] * b[0][1] + b[3][2] * b[0][2]) * c3) ) * 0.5 ),      (( (b[1][2] * b[1][0] * c2 + b[1][0] * b[1][2] * c3) ) * 0.5 + ( (b[3][2] * b[1][0] * c2 + b[3][0] * b[1][2] * c3) ) * 1.0 ),      (( (b[1][2] * b[1][1] * c2 + b[1][1] * b[1][2] * c3) ) * 0.5 + ( (b[3][2] * b[1][1] * c2 + b[3][1] * b[1][2] * c3) ) * 1.0 ),      (( (b[1][2] * b[1][2] * c2 + b[1][2] * b[1][2] * c3)+ ((b[1][0] * b[1][0] + b[1][1] * b[1][1] + b[1][2] * b[1][2]) * c3) ) * 0.5 + ( (b[3][2] * b[1][2] * c2 + b[3][2] * b[1][2] * c3)+ ((b[3][0] * b[1][0] + b[3][1] * b[1][1] + b[3][2] * b[1][2]) * c3) ) * 1.0 ),      (( (b[1][2] * b[2][0] * c2 + b[1][0] * b[2][2] * c3) ) * 0.5 + ( (b[3][2] * b[2][0] * c2 + b[3][0] * b[2][2] * c3) ) * 0.5 ),      (( (b[1][2] * b[2][1] * c2 + b[1][1] * b[2][2] * c3) ) * 0.5 + ( (b[3][2] * b[2][1] * c2 + b[3][1] * b[2][2] * c3) ) * 0.5 ),      (( (b[1][2] * b[2][2] * c2 + b[1][2] * b[2][2] * c3)+ ((b[1][0] * b[2][0] + b[1][1] * b[2][1] + b[1][2] * b[2][2]) * c3) ) * 0.5 + ( (b[3][2] * b[2][2] * c2 + b[3][2] * b[2][2] * c3)+ ((b[3][0] * b[2][0] + b[3][1] * b[2][1] + b[3][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[1][2] * b[3][0] * c2 + b[1][0] * b[3][2] * c3) ) * 1.0 + ( (b[3][2] * b[3][0] * c2 + b[3][0] * b[3][2] * c3) ) * 0.5 ),      (( (b[1][2] * b[3][1] * c2 + b[1][1] * b[3][2] * c3) ) * 1.0 + ( (b[3][2] * b[3][1] * c2 + b[3][1] * b[3][2] * c3) ) * 0.5 ),      (( (b[1][2] * b[3][2] * c2 + b[1][2] * b[3][2] * c3)+ ((b[1][0] * b[3][0] + b[1][1] * b[3][1] + b[1][2] * b[3][2]) * c3) ) * 1.0 + ( (b[3][2] * b[3][2] * c2 + b[3][2] * b[3][2] * c3)+ ((b[3][0] * b[3][0] + b[3][1] * b[3][1] + b[3][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[1][2] * b[0][0] * c2 + b[1][0] * b[0][2] * c3) ) * 0.5 + ( (b[1][2] * b[1][0] * c2 + b[1][0] * b[1][2] * c3) ) * 0.5 + ( (b[3][2] * b[0][0] * c2 + b[3][0] * b[0][2] * c3) ) * 1.0 + ( (b[3][2] * b[1][0] * c2 + b[3][0] * b[1][2] * c3) ) * 0.5 ),      (( (b[1][2] * b[0][1] * c2 + b[1][1] * b[0][2] * c3) ) * 0.5 + ( (b[1][2] * b[1][1] * c2 + b[1][1] * b[1][2] * c3) ) * 0.5 + ( (b[3][2] * b[0][1] * c2 + b[3][1] * b[0][2] * c3) ) * 1.0 + ( (b[3][2] * b[1][1] * c2 + b[3][1] * b[1][2] * c3) ) * 0.5 ),      (( (b[1][2] * b[0][2] * c2 + b[1][2] * b[0][2] * c3)+ ((b[1][0] * b[0][0] + b[1][1] * b[0][1] + b[1][2] * b[0][2]) * c3) ) * 0.5 + ( (b[1][2] * b[1][2] * c2 + b[1][2] * b[1][2] * c3)+ ((b[1][0] * b[1][0] + b[1][1] * b[1][1] + b[1][2] * b[1][2]) * c3) ) * 0.5 + ( (b[3][2] * b[0][2] * c2 + b[3][2] * b[0][2] * c3)+ ((b[3][0] * b[0][0] + b[3][1] * b[0][1] + b[3][2] * b[0][2]) * c3) ) * 1.0 + ( (b[3][2] * b[1][2] * c2 + b[3][2] * b[1][2] * c3)+ ((b[3][0] * b[1][0] + b[3][1] * b[1][1] + b[3][2] * b[1][2]) * c3) ) * 0.5 ),      (( (b[1][2] * b[1][0] * c2 + b[1][0] * b[1][2] * c3) ) * 0.5 + ( (b[1][2] * b[2][0] * c2 + b[1][0] * b[2][2] * c3) ) * 0.5 + ( (b[3][2] * b[1][0] * c2 + b[3][0] * b[1][2] * c3) ) * 0.5 + ( (b[3][2] * b[2][0] * c2 + b[3][0] * b[2][2] * c3) ) * 1.0 ),      (( (b[1][2] * b[1][1] * c2 + b[1][1] * b[1][2] * c3) ) * 0.5 + ( (b[1][2] * b[2][1] * c2 + b[1][1] * b[2][2] * c3) ) * 0.5 + ( (b[3][2] * b[1][1] * c2 + b[3][1] * b[1][2] * c3) ) * 0.5 + ( (b[3][2] * b[2][1] * c2 + b[3][1] * b[2][2] * c3) ) * 1.0 ),      (( (b[1][2] * b[1][2] * c2 + b[1][2] * b[1][2] * c3)+ ((b[1][0] * b[1][0] + b[1][1] * b[1][1] + b[1][2] * b[1][2]) * c3) ) * 0.5 + ( (b[1][2] * b[2][2] * c2 + b[1][2] * b[2][2] * c3)+ ((b[1][0] * b[2][0] + b[1][1] * b[2][1] + b[1][2] * b[2][2]) * c3) ) * 0.5 + ( (b[3][2] * b[1][2] * c2 + b[3][2] * b[1][2] * c3)+ ((b[3][0] * b[1][0] + b[3][1] * b[1][1] + b[3][2] * b[1][2]) * c3) ) * 0.5 + ( (b[3][2] * b[2][2] * c2 + b[3][2] * b[2][2] * c3)+ ((b[3][0] * b[2][0] + b[3][1] * b[2][1] + b[3][2] * b[2][2]) * c3) ) * 1.0 ),      (( (b[1][2] * b[0][0] * c2 + b[1][0] * b[0][2] * c3) ) * 0.5 + ( (b[1][2] * b[2][0] * c2 + b[1][0] * b[2][2] * c3) ) * 0.5 + ( (b[3][2] * b[0][0] * c2 + b[3][0] * b[0][2] * c3) ) * 0.5 + ( (b[3][2] * b[2][0] * c2 + b[3][0] * b[2][2] * c3) ) * 0.5 ),      (( (b[1][2] * b[0][1] * c2 + b[1][1] * b[0][2] * c3) ) * 0.5 + ( (b[1][2] * b[2][1] * c2 + b[1][1] * b[2][2] * c3) ) * 0.5 + ( (b[3][2] * b[0][1] * c2 + b[3][1] * b[0][2] * c3) ) * 0.5 + ( (b[3][2] * b[2][1] * c2 + b[3][1] * b[2][2] * c3) ) * 0.5 ),      (( (b[1][2] * b[0][2] * c2 + b[1][2] * b[0][2] * c3)+ ((b[1][0] * b[0][0] + b[1][1] * b[0][1] + b[1][2] * b[0][2]) * c3) ) * 0.5 + ( (b[1][2] * b[2][2] * c2 + b[1][2] * b[2][2] * c3)+ ((b[1][0] * b[2][0] + b[1][1] * b[2][1] + b[1][2] * b[2][2]) * c3) ) * 0.5 + ( (b[3][2] * b[0][2] * c2 + b[3][2] * b[0][2] * c3)+ ((b[3][0] * b[0][0] + b[3][1] * b[0][1] + b[3][2] * b[0][2]) * c3) ) * 0.5 + ( (b[3][2] * b[2][2] * c2 + b[3][2] * b[2][2] * c3)+ ((b[3][0] * b[2][0] + b[3][1] * b[2][1] + b[3][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[1][2] * b[0][0] * c2 + b[1][0] * b[0][2] * c3) ) * 1.0 + ( (b[1][2] * b[3][0] * c2 + b[1][0] * b[3][2] * c3) ) * 0.5 + ( (b[3][2] * b[0][0] * c2 + b[3][0] * b[0][2] * c3) ) * 0.5 + ( (b[3][2] * b[3][0] * c2 + b[3][0] * b[3][2] * c3) ) * 0.5 ),      (( (b[1][2] * b[0][1] * c2 + b[1][1] * b[0][2] * c3) ) * 1.0 + ( (b[1][2] * b[3][1] * c2 + b[1][1] * b[3][2] * c3) ) * 0.5 + ( (b[3][2] * b[0][1] * c2 + b[3][1] * b[0][2] * c3) ) * 0.5 + ( (b[3][2] * b[3][1] * c2 + b[3][1] * b[3][2] * c3) ) * 0.5 ),      (( (b[1][2] * b[0][2] * c2 + b[1][2] * b[0][2] * c3)+ ((b[1][0] * b[0][0] + b[1][1] * b[0][1] + b[1][2] * b[0][2]) * c3) ) * 1.0 + ( (b[1][2] * b[3][2] * c2 + b[1][2] * b[3][2] * c3)+ ((b[1][0] * b[3][0] + b[1][1] * b[3][1] + b[1][2] * b[3][2]) * c3) ) * 0.5 + ( (b[3][2] * b[0][2] * c2 + b[3][2] * b[0][2] * c3)+ ((b[3][0] * b[0][0] + b[3][1] * b[0][1] + b[3][2] * b[0][2]) * c3) ) * 0.5 + ( (b[3][2] * b[3][2] * c2 + b[3][2] * b[3][2] * c3)+ ((b[3][0] * b[3][0] + b[3][1] * b[3][1] + b[3][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[1][2] * b[1][0] * c2 + b[1][0] * b[1][2] * c3) ) * 1.0 + ( (b[1][2] * b[3][0] * c2 + b[1][0] * b[3][2] * c3) ) * 0.5 + ( (b[3][2] * b[1][0] * c2 + b[3][0] * b[1][2] * c3) ) * 0.5 + ( (b[3][2] * b[3][0] * c2 + b[3][0] * b[3][2] * c3) ) * 1.0 ),      (( (b[1][2] * b[1][1] * c2 + b[1][1] * b[1][2] * c3) ) * 1.0 + ( (b[1][2] * b[3][1] * c2 + b[1][1] * b[3][2] * c3) ) * 0.5 + ( (b[3][2] * b[1][1] * c2 + b[3][1] * b[1][2] * c3) ) * 0.5 + ( (b[3][2] * b[3][1] * c2 + b[3][1] * b[3][2] * c3) ) * 1.0 ),      (( (b[1][2] * b[1][2] * c2 + b[1][2] * b[1][2] * c3)+ ((b[1][0] * b[1][0] + b[1][1] * b[1][1] + b[1][2] * b[1][2]) * c3) ) * 1.0 + ( (b[1][2] * b[3][2] * c2 + b[1][2] * b[3][2] * c3)+ ((b[1][0] * b[3][0] + b[1][1] * b[3][1] + b[1][2] * b[3][2]) * c3) ) * 0.5 + ( (b[3][2] * b[1][2] * c2 + b[3][2] * b[1][2] * c3)+ ((b[3][0] * b[1][0] + b[3][1] * b[1][1] + b[3][2] * b[1][2]) * c3) ) * 0.5 + ( (b[3][2] * b[3][2] * c2 + b[3][2] * b[3][2] * c3)+ ((b[3][0] * b[3][0] + b[3][1] * b[3][1] + b[3][2] * b[3][2]) * c3) ) * 1.0 ),      (( (b[1][2] * b[2][0] * c2 + b[1][0] * b[2][2] * c3) ) * 1.0 + ( (b[1][2] * b[3][0] * c2 + b[1][0] * b[3][2] * c3) ) * 0.5 + ( (b[3][2] * b[2][0] * c2 + b[3][0] * b[2][2] * c3) ) * 0.5 + ( (b[3][2] * b[3][0] * c2 + b[3][0] * b[3][2] * c3) ) * 0.5 ),      (( (b[1][2] * b[2][1] * c2 + b[1][1] * b[2][2] * c3) ) * 1.0 + ( (b[1][2] * b[3][1] * c2 + b[1][1] * b[3][2] * c3) ) * 0.5 + ( (b[3][2] * b[2][1] * c2 + b[3][1] * b[2][2] * c3) ) * 0.5 + ( (b[3][2] * b[3][1] * c2 + b[3][1] * b[3][2] * c3) ) * 0.5 ),      (( (b[1][2] * b[2][2] * c2 + b[1][2] * b[2][2] * c3)+ ((b[1][0] * b[2][0] + b[1][1] * b[2][1] + b[1][2] * b[2][2]) * c3) ) * 1.0 + ( (b[1][2] * b[3][2] * c2 + b[1][2] * b[3][2] * c3)+ ((b[1][0] * b[3][0] + b[1][1] * b[3][1] + b[1][2] * b[3][2]) * c3) ) * 0.5 + ( (b[3][2] * b[2][2] * c2 + b[3][2] * b[2][2] * c3)+ ((b[3][0] * b[2][0] + b[3][1] * b[2][1] + b[3][2] * b[2][2]) * c3) ) * 0.5 + ( (b[3][2] * b[3][2] * c2 + b[3][2] * b[3][2] * c3)+ ((b[3][0] * b[3][0] + b[3][1] * b[3][1] + b[3][2] * b[3][2]) * c3) ) * 0.5 )},
{ (( (b[2][0] * b[0][0] * c2 + b[2][0] * b[0][0] * c3)+ ((b[2][0] * b[0][0] + b[2][1] * b[0][1] + b[2][2] * b[0][2]) * c3) ) * 0.5 + ( (b[3][0] * b[0][0] * c2 + b[3][0] * b[0][0] * c3)+ ((b[3][0] * b[0][0] + b[3][1] * b[0][1] + b[3][2] * b[0][2]) * c3) ) * 0.5 ),      (( (b[2][0] * b[0][1] * c2 + b[2][1] * b[0][0] * c3) ) * 0.5 + ( (b[3][0] * b[0][1] * c2 + b[3][1] * b[0][0] * c3) ) * 0.5 ),      (( (b[2][0] * b[0][2] * c2 + b[2][2] * b[0][0] * c3) ) * 0.5 + ( (b[3][0] * b[0][2] * c2 + b[3][2] * b[0][0] * c3) ) * 0.5 ),      (( (b[2][0] * b[1][0] * c2 + b[2][0] * b[1][0] * c3)+ ((b[2][0] * b[1][0] + b[2][1] * b[1][1] + b[2][2] * b[1][2]) * c3) ) * 0.5 + ( (b[3][0] * b[1][0] * c2 + b[3][0] * b[1][0] * c3)+ ((b[3][0] * b[1][0] + b[3][1] * b[1][1] + b[3][2] * b[1][2]) * c3) ) * 0.5 ),      (( (b[2][0] * b[1][1] * c2 + b[2][1] * b[1][0] * c3) ) * 0.5 + ( (b[3][0] * b[1][1] * c2 + b[3][1] * b[1][0] * c3) ) * 0.5 ),      (( (b[2][0] * b[1][2] * c2 + b[2][2] * b[1][0] * c3) ) * 0.5 + ( (b[3][0] * b[1][2] * c2 + b[3][2] * b[1][0] * c3) ) * 0.5 ),      (( (b[2][0] * b[2][0] * c2 + b[2][0] * b[2][0] * c3)+ ((b[2][0] * b[2][0] + b[2][1] * b[2][1] + b[2][2] * b[2][2]) * c3) ) * 0.5 + ( (b[3][0] * b[2][0] * c2 + b[3][0] * b[2][0] * c3)+ ((b[3][0] * b[2][0] + b[3][1] * b[2][1] + b[3][2] * b[2][2]) * c3) ) * 1.0 ),      (( (b[2][0] * b[2][1] * c2 + b[2][1] * b[2][0] * c3) ) * 0.5 + ( (b[3][0] * b[2][1] * c2 + b[3][1] * b[2][0] * c3) ) * 1.0 ),      (( (b[2][0] * b[2][2] * c2 + b[2][2] * b[2][0] * c3) ) * 0.5 + ( (b[3][0] * b[2][2] * c2 + b[3][2] * b[2][0] * c3) ) * 1.0 ),      (( (b[2][0] * b[3][0] * c2 + b[2][0] * b[3][0] * c3)+ ((b[2][0] * b[3][0] + b[2][1] * b[3][1] + b[2][2] * b[3][2]) * c3) ) * 1.0 + ( (b[3][0] * b[3][0] * c2 + b[3][0] * b[3][0] * c3)+ ((b[3][0] * b[3][0] + b[3][1] * b[3][1] + b[3][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[2][0] * b[3][1] * c2 + b[2][1] * b[3][0] * c3) ) * 1.0 + ( (b[3][0] * b[3][1] * c2 + b[3][1] * b[3][0] * c3) ) * 0.5 ),      (( (b[2][0] * b[3][2] * c2 + b[2][2] * b[3][0] * c3) ) * 1.0 + ( (b[3][0] * b[3][2] * c2 + b[3][2] * b[3][0] * c3) ) * 0.5 ),      (( (b[2][0] * b[0][0] * c2 + b[2][0] * b[0][0] * c3)+ ((b[2][0] * b[0][0] + b[2][1] * b[0][1] + b[2][2] * b[0][2]) * c3) ) * 0.5 + ( (b[2][0] * b[1][0] * c2 + b[2][0] * b[1][0] * c3)+ ((b[2][0] * b[1][0] + b[2][1] * b[1][1] + b[2][2] * b[1][2]) * c3) ) * 0.5 + ( (b[3][0] * b[0][0] * c2 + b[3][0] * b[0][0] * c3)+ ((b[3][0] * b[0][0] + b[3][1] * b[0][1] + b[3][2] * b[0][2]) * c3) ) * 0.5 + ( (b[3][0] * b[1][0] * c2 + b[3][0] * b[1][0] * c3)+ ((b[3][0] * b[1][0] + b[3][1] * b[1][1] + b[3][2] * b[1][2]) * c3) ) * 0.5 ),      (( (b[2][0] * b[0][1] * c2 + b[2][1] * b[0][0] * c3) ) * 0.5 + ( (b[2][0] * b[1][1] * c2 + b[2][1] * b[1][0] * c3) ) * 0.5 + ( (b[3][0] * b[0][1] * c2 + b[3][1] * b[0][0] * c3) ) * 0.5 + ( (b[3][0] * b[1][1] * c2 + b[3][1] * b[1][0] * c3) ) * 0.5 ),      (( (b[2][0] * b[0][2] * c2 + b[2][2] * b[0][0] * c3) ) * 0.5 + ( (b[2][0] * b[1][2] * c2 + b[2][2] * b[1][0] * c3) ) * 0.5 + ( (b[3][0] * b[0][2] * c2 + b[3][2] * b[0][0] * c3) ) * 0.5 + ( (b[3][0] * b[1][2] * c2 + b[3][2] * b[1][0] * c3) ) * 0.5 ),      (( (b[2][0] * b[1][0] * c2 + b[2][0] * b[1][0] * c3)+ ((b[2][0] * b[1][0] + b[2][1] * b[1][1] + b[2][2] * b[1][2]) * c3) ) * 0.5 + ( (b[2][0] * b[2][0] * c2 + b[2][0] * b[2][0] * c3)+ ((b[2][0] * b[2][0] + b[2][1] * b[2][1] + b[2][2] * b[2][2]) * c3) ) * 0.5 + ( (b[3][0] * b[1][0] * c2 + b[3][0] * b[1][0] * c3)+ ((b[3][0] * b[1][0] + b[3][1] * b[1][1] + b[3][2] * b[1][2]) * c3) ) * 1.0 + ( (b[3][0] * b[2][0] * c2 + b[3][0] * b[2][0] * c3)+ ((b[3][0] * b[2][0] + b[3][1] * b[2][1] + b[3][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[2][0] * b[1][1] * c2 + b[2][1] * b[1][0] * c3) ) * 0.5 + ( (b[2][0] * b[2][1] * c2 + b[2][1] * b[2][0] * c3) ) * 0.5 + ( (b[3][0] * b[1][1] * c2 + b[3][1] * b[1][0] * c3) ) * 1.0 + ( (b[3][0] * b[2][1] * c2 + b[3][1] * b[2][0] * c3) ) * 0.5 ),      (( (b[2][0] * b[1][2] * c2 + b[2][2] * b[1][0] * c3) ) * 0.5 + ( (b[2][0] * b[2][2] * c2 + b[2][2] * b[2][0] * c3) ) * 0.5 + ( (b[3][0] * b[1][2] * c2 + b[3][2] * b[1][0] * c3) ) * 1.0 + ( (b[3][0] * b[2][2] * c2 + b[3][2] * b[2][0] * c3) ) * 0.5 ),      (( (b[2][0] * b[0][0] * c2 + b[2][0] * b[0][0] * c3)+ ((b[2][0] * b[0][0] + b[2][1] * b[0][1] + b[2][2] * b[0][2]) * c3) ) * 0.5 + ( (b[2][0] * b[2][0] * c2 + b[2][0] * b[2][0] * c3)+ ((b[2][0] * b[2][0] + b[2][1] * b[2][1] + b[2][2] * b[2][2]) * c3) ) * 0.5 + ( (b[3][0] * b[0][0] * c2 + b[3][0] * b[0][0] * c3)+ ((b[3][0] * b[0][0] + b[3][1] * b[0][1] + b[3][2] * b[0][2]) * c3) ) * 1.0 + ( (b[3][0] * b[2][0] * c2 + b[3][0] * b[2][0] * c3)+ ((b[3][0] * b[2][0] + b[3][1] * b[2][1] + b[3][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[2][0] * b[0][1] * c2 + b[2][1] * b[0][0] * c3) ) * 0.5 + ( (b[2][0] * b[2][1] * c2 + b[2][1] * b[2][0] * c3) ) * 0.5 + ( (b[3][0] * b[0][1] * c2 + b[3][1] * b[0][0] * c3) ) * 1.0 + ( (b[3][0] * b[2][1] * c2 + b[3][1] * b[2][0] * c3) ) * 0.5 ),      (( (b[2][0] * b[0][2] * c2 + b[2][2] * b[0][0] * c3) ) * 0.5 + ( (b[2][0] * b[2][2] * c2 + b[2][2] * b[2][0] * c3) ) * 0.5 + ( (b[3][0] * b[0][2] * c2 + b[3][2] * b[0][0] * c3) ) * 1.0 + ( (b[3][0] * b[2][2] * c2 + b[3][2] * b[2][0] * c3) ) * 0.5 ),      (( (b[2][0] * b[0][0] * c2 + b[2][0] * b[0][0] * c3)+ ((b[2][0] * b[0][0] + b[2][1] * b[0][1] + b[2][2] * b[0][2]) * c3) ) * 1.0 + ( (b[2][0] * b[3][0] * c2 + b[2][0] * b[3][0] * c3)+ ((b[2][0] * b[3][0] + b[2][1] * b[3][1] + b[2][2] * b[3][2]) * c3) ) * 0.5 + ( (b[3][0] * b[0][0] * c2 + b[3][0] * b[0][0] * c3)+ ((b[3][0] * b[0][0] + b[3][1] * b[0][1] + b[3][2] * b[0][2]) * c3) ) * 0.5 + ( (b[3][0] * b[3][0] * c2 + b[3][0] * b[3][0] * c3)+ ((b[3][0] * b[3][0] + b[3][1] * b[3][1] + b[3][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[2][0] * b[0][1] * c2 + b[2][1] * b[0][0] * c3) ) * 1.0 + ( (b[2][0] * b[3][1] * c2 + b[2][1] * b[3][0] * c3) ) * 0.5 + ( (b[3][0] * b[0][1] * c2 + b[3][1] * b[0][0] * c3) ) * 0.5 + ( (b[3][0] * b[3][1] * c2 + b[3][1] * b[3][0] * c3) ) * 0.5 ),      (( (b[2][0] * b[0][2] * c2 + b[2][2] * b[0][0] * c3) ) * 1.0 + ( (b[2][0] * b[3][2] * c2 + b[2][2] * b[3][0] * c3) ) * 0.5 + ( (b[3][0] * b[0][2] * c2 + b[3][2] * b[0][0] * c3) ) * 0.5 + ( (b[3][0] * b[3][2] * c2 + b[3][2] * b[3][0] * c3) ) * 0.5 ),      (( (b[2][0] * b[1][0] * c2 + b[2][0] * b[1][0] * c3)+ ((b[2][0] * b[1][0] + b[2][1] * b[1][1] + b[2][2] * b[1][2]) * c3) ) * 1.0 + ( (b[2][0] * b[3][0] * c2 + b[2][0] * b[3][0] * c3)+ ((b[2][0] * b[3][0] + b[2][1] * b[3][1] + b[2][2] * b[3][2]) * c3) ) * 0.5 + ( (b[3][0] * b[1][0] * c2 + b[3][0] * b[1][0] * c3)+ ((b[3][0] * b[1][0] + b[3][1] * b[1][1] + b[3][2] * b[1][2]) * c3) ) * 0.5 + ( (b[3][0] * b[3][0] * c2 + b[3][0] * b[3][0] * c3)+ ((b[3][0] * b[3][0] + b[3][1] * b[3][1] + b[3][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[2][0] * b[1][1] * c2 + b[2][1] * b[1][0] * c3) ) * 1.0 + ( (b[2][0] * b[3][1] * c2 + b[2][1] * b[3][0] * c3) ) * 0.5 + ( (b[3][0] * b[1][1] * c2 + b[3][1] * b[1][0] * c3) ) * 0.5 + ( (b[3][0] * b[3][1] * c2 + b[3][1] * b[3][0] * c3) ) * 0.5 ),      (( (b[2][0] * b[1][2] * c2 + b[2][2] * b[1][0] * c3) ) * 1.0 + ( (b[2][0] * b[3][2] * c2 + b[2][2] * b[3][0] * c3) ) * 0.5 + ( (b[3][0] * b[1][2] * c2 + b[3][2] * b[1][0] * c3) ) * 0.5 + ( (b[3][0] * b[3][2] * c2 + b[3][2] * b[3][0] * c3) ) * 0.5 ),      (( (b[2][0] * b[2][0] * c2 + b[2][0] * b[2][0] * c3)+ ((b[2][0] * b[2][0] + b[2][1] * b[2][1] + b[2][2] * b[2][2]) * c3) ) * 1.0 + ( (b[2][0] * b[3][0] * c2 + b[2][0] * b[3][0] * c3)+ ((b[2][0] * b[3][0] + b[2][1] * b[3][1] + b[2][2] * b[3][2]) * c3) ) * 0.5 + ( (b[3][0] * b[2][0] * c2 + b[3][0] * b[2][0] * c3)+ ((b[3][0] * b[2][0] + b[3][1] * b[2][1] + b[3][2] * b[2][2]) * c3) ) * 0.5 + ( (b[3][0] * b[3][0] * c2 + b[3][0] * b[3][0] * c3)+ ((b[3][0] * b[3][0] + b[3][1] * b[3][1] + b[3][2] * b[3][2]) * c3) ) * 1.0 ),      (( (b[2][0] * b[2][1] * c2 + b[2][1] * b[2][0] * c3) ) * 1.0 + ( (b[2][0] * b[3][1] * c2 + b[2][1] * b[3][0] * c3) ) * 0.5 + ( (b[3][0] * b[2][1] * c2 + b[3][1] * b[2][0] * c3) ) * 0.5 + ( (b[3][0] * b[3][1] * c2 + b[3][1] * b[3][0] * c3) ) * 1.0 ),      (( (b[2][0] * b[2][2] * c2 + b[2][2] * b[2][0] * c3) ) * 1.0 + ( (b[2][0] * b[3][2] * c2 + b[2][2] * b[3][0] * c3) ) * 0.5 + ( (b[3][0] * b[2][2] * c2 + b[3][2] * b[2][0] * c3) ) * 0.5 + ( (b[3][0] * b[3][2] * c2 + b[3][2] * b[3][0] * c3) ) * 1.0 )},
{ (( (b[2][1] * b[0][0] * c2 + b[2][0] * b[0][1] * c3) ) * 0.5 + ( (b[3][1] * b[0][0] * c2 + b[3][0] * b[0][1] * c3) ) * 0.5 ),      (( (b[2][1] * b[0][1] * c2 + b[2][1] * b[0][1] * c3)+ ((b[2][0] * b[0][0] + b[2][1] * b[0][1] + b[2][2] * b[0][2]) * c3) ) * 0.5 + ( (b[3][1] * b[0][1] * c2 + b[3][1] * b[0][1] * c3)+ ((b[3][0] * b[0][0] + b[3][1] * b[0][1] + b[3][2] * b[0][2]) * c3) ) * 0.5 ),      (( (b[2][1] * b[0][2] * c2 + b[2][2] * b[0][1] * c3) ) * 0.5 + ( (b[3][1] * b[0][2] * c2 + b[3][2] * b[0][1] * c3) ) * 0.5 ),      (( (b[2][1] * b[1][0] * c2 + b[2][0] * b[1][1] * c3) ) * 0.5 + ( (b[3][1] * b[1][0] * c2 + b[3][0] * b[1][1] * c3) ) * 0.5 ),      (( (b[2][1] * b[1][1] * c2 + b[2][1] * b[1][1] * c3)+ ((b[2][0] * b[1][0] + b[2][1] * b[1][1] + b[2][2] * b[1][2]) * c3) ) * 0.5 + ( (b[3][1] * b[1][1] * c2 + b[3][1] * b[1][1] * c3)+ ((b[3][0] * b[1][0] + b[3][1] * b[1][1] + b[3][2] * b[1][2]) * c3) ) * 0.5 ),      (( (b[2][1] * b[1][2] * c2 + b[2][2] * b[1][1] * c3) ) * 0.5 + ( (b[3][1] * b[1][2] * c2 + b[3][2] * b[1][1] * c3) ) * 0.5 ),      (( (b[2][1] * b[2][0] * c2 + b[2][0] * b[2][1] * c3) ) * 0.5 + ( (b[3][1] * b[2][0] * c2 + b[3][0] * b[2][1] * c3) ) * 1.0 ),      (( (b[2][1] * b[2][1] * c2 + b[2][1] * b[2][1] * c3)+ ((b[2][0] * b[2][0] + b[2][1] * b[2][1] + b[2][2] * b[2][2]) * c3) ) * 0.5 + ( (b[3][1] * b[2][1] * c2 + b[3][1] * b[2][1] * c3)+ ((b[3][0] * b[2][0] + b[3][1] * b[2][1] + b[3][2] * b[2][2]) * c3) ) * 1.0 ),      (( (b[2][1] * b[2][2] * c2 + b[2][2] * b[2][1] * c3) ) * 0.5 + ( (b[3][1] * b[2][2] * c2 + b[3][2] * b[2][1] * c3) ) * 1.0 ),      (( (b[2][1] * b[3][0] * c2 + b[2][0] * b[3][1] * c3) ) * 1.0 + ( (b[3][1] * b[3][0] * c2 + b[3][0] * b[3][1] * c3) ) * 0.5 ),      (( (b[2][1] * b[3][1] * c2 + b[2][1] * b[3][1] * c3)+ ((b[2][0] * b[3][0] + b[2][1] * b[3][1] + b[2][2] * b[3][2]) * c3) ) * 1.0 + ( (b[3][1] * b[3][1] * c2 + b[3][1] * b[3][1] * c3)+ ((b[3][0] * b[3][0] + b[3][1] * b[3][1] + b[3][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[2][1] * b[3][2] * c2 + b[2][2] * b[3][1] * c3) ) * 1.0 + ( (b[3][1] * b[3][2] * c2 + b[3][2] * b[3][1] * c3) ) * 0.5 ),      (( (b[2][1] * b[0][0] * c2 + b[2][0] * b[0][1] * c3) ) * 0.5 + ( (b[2][1] * b[1][0] * c2 + b[2][0] * b[1][1] * c3) ) * 0.5 + ( (b[3][1] * b[0][0] * c2 + b[3][0] * b[0][1] * c3) ) * 0.5 + ( (b[3][1] * b[1][0] * c2 + b[3][0] * b[1][1] * c3) ) * 0.5 ),      (( (b[2][1] * b[0][1] * c2 + b[2][1] * b[0][1] * c3)+ ((b[2][0] * b[0][0] + b[2][1] * b[0][1] + b[2][2] * b[0][2]) * c3) ) * 0.5 + ( (b[2][1] * b[1][1] * c2 + b[2][1] * b[1][1] * c3)+ ((b[2][0] * b[1][0] + b[2][1] * b[1][1] + b[2][2] * b[1][2]) * c3) ) * 0.5 + ( (b[3][1] * b[0][1] * c2 + b[3][1] * b[0][1] * c3)+ ((b[3][0] * b[0][0] + b[3][1] * b[0][1] + b[3][2] * b[0][2]) * c3) ) * 0.5 + ( (b[3][1] * b[1][1] * c2 + b[3][1] * b[1][1] * c3)+ ((b[3][0] * b[1][0] + b[3][1] * b[1][1] + b[3][2] * b[1][2]) * c3) ) * 0.5 ),      (( (b[2][1] * b[0][2] * c2 + b[2][2] * b[0][1] * c3) ) * 0.5 + ( (b[2][1] * b[1][2] * c2 + b[2][2] * b[1][1] * c3) ) * 0.5 + ( (b[3][1] * b[0][2] * c2 + b[3][2] * b[0][1] * c3) ) * 0.5 + ( (b[3][1] * b[1][2] * c2 + b[3][2] * b[1][1] * c3) ) * 0.5 ),      (( (b[2][1] * b[1][0] * c2 + b[2][0] * b[1][1] * c3) ) * 0.5 + ( (b[2][1] * b[2][0] * c2 + b[2][0] * b[2][1] * c3) ) * 0.5 + ( (b[3][1] * b[1][0] * c2 + b[3][0] * b[1][1] * c3) ) * 1.0 + ( (b[3][1] * b[2][0] * c2 + b[3][0] * b[2][1] * c3) ) * 0.5 ),      (( (b[2][1] * b[1][1] * c2 + b[2][1] * b[1][1] * c3)+ ((b[2][0] * b[1][0] + b[2][1] * b[1][1] + b[2][2] * b[1][2]) * c3) ) * 0.5 + ( (b[2][1] * b[2][1] * c2 + b[2][1] * b[2][1] * c3)+ ((b[2][0] * b[2][0] + b[2][1] * b[2][1] + b[2][2] * b[2][2]) * c3) ) * 0.5 + ( (b[3][1] * b[1][1] * c2 + b[3][1] * b[1][1] * c3)+ ((b[3][0] * b[1][0] + b[3][1] * b[1][1] + b[3][2] * b[1][2]) * c3) ) * 1.0 + ( (b[3][1] * b[2][1] * c2 + b[3][1] * b[2][1] * c3)+ ((b[3][0] * b[2][0] + b[3][1] * b[2][1] + b[3][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[2][1] * b[1][2] * c2 + b[2][2] * b[1][1] * c3) ) * 0.5 + ( (b[2][1] * b[2][2] * c2 + b[2][2] * b[2][1] * c3) ) * 0.5 + ( (b[3][1] * b[1][2] * c2 + b[3][2] * b[1][1] * c3) ) * 1.0 + ( (b[3][1] * b[2][2] * c2 + b[3][2] * b[2][1] * c3) ) * 0.5 ),      (( (b[2][1] * b[0][0] * c2 + b[2][0] * b[0][1] * c3) ) * 0.5 + ( (b[2][1] * b[2][0] * c2 + b[2][0] * b[2][1] * c3) ) * 0.5 + ( (b[3][1] * b[0][0] * c2 + b[3][0] * b[0][1] * c3) ) * 1.0 + ( (b[3][1] * b[2][0] * c2 + b[3][0] * b[2][1] * c3) ) * 0.5 ),      (( (b[2][1] * b[0][1] * c2 + b[2][1] * b[0][1] * c3)+ ((b[2][0] * b[0][0] + b[2][1] * b[0][1] + b[2][2] * b[0][2]) * c3) ) * 0.5 + ( (b[2][1] * b[2][1] * c2 + b[2][1] * b[2][1] * c3)+ ((b[2][0] * b[2][0] + b[2][1] * b[2][1] + b[2][2] * b[2][2]) * c3) ) * 0.5 + ( (b[3][1] * b[0][1] * c2 + b[3][1] * b[0][1] * c3)+ ((b[3][0] * b[0][0] + b[3][1] * b[0][1] + b[3][2] * b[0][2]) * c3) ) * 1.0 + ( (b[3][1] * b[2][1] * c2 + b[3][1] * b[2][1] * c3)+ ((b[3][0] * b[2][0] + b[3][1] * b[2][1] + b[3][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[2][1] * b[0][2] * c2 + b[2][2] * b[0][1] * c3) ) * 0.5 + ( (b[2][1] * b[2][2] * c2 + b[2][2] * b[2][1] * c3) ) * 0.5 + ( (b[3][1] * b[0][2] * c2 + b[3][2] * b[0][1] * c3) ) * 1.0 + ( (b[3][1] * b[2][2] * c2 + b[3][2] * b[2][1] * c3) ) * 0.5 ),      (( (b[2][1] * b[0][0] * c2 + b[2][0] * b[0][1] * c3) ) * 1.0 + ( (b[2][1] * b[3][0] * c2 + b[2][0] * b[3][1] * c3) ) * 0.5 + ( (b[3][1] * b[0][0] * c2 + b[3][0] * b[0][1] * c3) ) * 0.5 + ( (b[3][1] * b[3][0] * c2 + b[3][0] * b[3][1] * c3) ) * 0.5 ),      (( (b[2][1] * b[0][1] * c2 + b[2][1] * b[0][1] * c3)+ ((b[2][0] * b[0][0] + b[2][1] * b[0][1] + b[2][2] * b[0][2]) * c3) ) * 1.0 + ( (b[2][1] * b[3][1] * c2 + b[2][1] * b[3][1] * c3)+ ((b[2][0] * b[3][0] + b[2][1] * b[3][1] + b[2][2] * b[3][2]) * c3) ) * 0.5 + ( (b[3][1] * b[0][1] * c2 + b[3][1] * b[0][1] * c3)+ ((b[3][0] * b[0][0] + b[3][1] * b[0][1] + b[3][2] * b[0][2]) * c3) ) * 0.5 + ( (b[3][1] * b[3][1] * c2 + b[3][1] * b[3][1] * c3)+ ((b[3][0] * b[3][0] + b[3][1] * b[3][1] + b[3][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[2][1] * b[0][2] * c2 + b[2][2] * b[0][1] * c3) ) * 1.0 + ( (b[2][1] * b[3][2] * c2 + b[2][2] * b[3][1] * c3) ) * 0.5 + ( (b[3][1] * b[0][2] * c2 + b[3][2] * b[0][1] * c3) ) * 0.5 + ( (b[3][1] * b[3][2] * c2 + b[3][2] * b[3][1] * c3) ) * 0.5 ),      (( (b[2][1] * b[1][0] * c2 + b[2][0] * b[1][1] * c3) ) * 1.0 + ( (b[2][1] * b[3][0] * c2 + b[2][0] * b[3][1] * c3) ) * 0.5 + ( (b[3][1] * b[1][0] * c2 + b[3][0] * b[1][1] * c3) ) * 0.5 + ( (b[3][1] * b[3][0] * c2 + b[3][0] * b[3][1] * c3) ) * 0.5 ),      (( (b[2][1] * b[1][1] * c2 + b[2][1] * b[1][1] * c3)+ ((b[2][0] * b[1][0] + b[2][1] * b[1][1] + b[2][2] * b[1][2]) * c3) ) * 1.0 + ( (b[2][1] * b[3][1] * c2 + b[2][1] * b[3][1] * c3)+ ((b[2][0] * b[3][0] + b[2][1] * b[3][1] + b[2][2] * b[3][2]) * c3) ) * 0.5 + ( (b[3][1] * b[1][1] * c2 + b[3][1] * b[1][1] * c3)+ ((b[3][0] * b[1][0] + b[3][1] * b[1][1] + b[3][2] * b[1][2]) * c3) ) * 0.5 + ( (b[3][1] * b[3][1] * c2 + b[3][1] * b[3][1] * c3)+ ((b[3][0] * b[3][0] + b[3][1] * b[3][1] + b[3][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[2][1] * b[1][2] * c2 + b[2][2] * b[1][1] * c3) ) * 1.0 + ( (b[2][1] * b[3][2] * c2 + b[2][2] * b[3][1] * c3) ) * 0.5 + ( (b[3][1] * b[1][2] * c2 + b[3][2] * b[1][1] * c3) ) * 0.5 + ( (b[3][1] * b[3][2] * c2 + b[3][2] * b[3][1] * c3) ) * 0.5 ),      (( (b[2][1] * b[2][0] * c2 + b[2][0] * b[2][1] * c3) ) * 1.0 + ( (b[2][1] * b[3][0] * c2 + b[2][0] * b[3][1] * c3) ) * 0.5 + ( (b[3][1] * b[2][0] * c2 + b[3][0] * b[2][1] * c3) ) * 0.5 + ( (b[3][1] * b[3][0] * c2 + b[3][0] * b[3][1] * c3) ) * 1.0 ),      (( (b[2][1] * b[2][1] * c2 + b[2][1] * b[2][1] * c3)+ ((b[2][0] * b[2][0] + b[2][1] * b[2][1] + b[2][2] * b[2][2]) * c3) ) * 1.0 + ( (b[2][1] * b[3][1] * c2 + b[2][1] * b[3][1] * c3)+ ((b[2][0] * b[3][0] + b[2][1] * b[3][1] + b[2][2] * b[3][2]) * c3) ) * 0.5 + ( (b[3][1] * b[2][1] * c2 + b[3][1] * b[2][1] * c3)+ ((b[3][0] * b[2][0] + b[3][1] * b[2][1] + b[3][2] * b[2][2]) * c3) ) * 0.5 + ( (b[3][1] * b[3][1] * c2 + b[3][1] * b[3][1] * c3)+ ((b[3][0] * b[3][0] + b[3][1] * b[3][1] + b[3][2] * b[3][2]) * c3) ) * 1.0 ),      (( (b[2][1] * b[2][2] * c2 + b[2][2] * b[2][1] * c3) ) * 1.0 + ( (b[2][1] * b[3][2] * c2 + b[2][2] * b[3][1] * c3) ) * 0.5 + ( (b[3][1] * b[2][2] * c2 + b[3][2] * b[2][1] * c3) ) * 0.5 + ( (b[3][1] * b[3][2] * c2 + b[3][2] * b[3][1] * c3) ) * 1.0 )},
{ (( (b[2][2] * b[0][0] * c2 + b[2][0] * b[0][2] * c3) ) * 0.5 + ( (b[3][2] * b[0][0] * c2 + b[3][0] * b[0][2] * c3) ) * 0.5 ),      (( (b[2][2] * b[0][1] * c2 + b[2][1] * b[0][2] * c3) ) * 0.5 + ( (b[3][2] * b[0][1] * c2 + b[3][1] * b[0][2] * c3) ) * 0.5 ),      (( (b[2][2] * b[0][2] * c2 + b[2][2] * b[0][2] * c3)+ ((b[2][0] * b[0][0] + b[2][1] * b[0][1] + b[2][2] * b[0][2]) * c3) ) * 0.5 + ( (b[3][2] * b[0][2] * c2 + b[3][2] * b[0][2] * c3)+ ((b[3][0] * b[0][0] + b[3][1] * b[0][1] + b[3][2] * b[0][2]) * c3) ) * 0.5 ),      (( (b[2][2] * b[1][0] * c2 + b[2][0] * b[1][2] * c3) ) * 0.5 + ( (b[3][2] * b[1][0] * c2 + b[3][0] * b[1][2] * c3) ) * 0.5 ),      (( (b[2][2] * b[1][1] * c2 + b[2][1] * b[1][2] * c3) ) * 0.5 + ( (b[3][2] * b[1][1] * c2 + b[3][1] * b[1][2] * c3) ) * 0.5 ),      (( (b[2][2] * b[1][2] * c2 + b[2][2] * b[1][2] * c3)+ ((b[2][0] * b[1][0] + b[2][1] * b[1][1] + b[2][2] * b[1][2]) * c3) ) * 0.5 + ( (b[3][2] * b[1][2] * c2 + b[3][2] * b[1][2] * c3)+ ((b[3][0] * b[1][0] + b[3][1] * b[1][1] + b[3][2] * b[1][2]) * c3) ) * 0.5 ),      (( (b[2][2] * b[2][0] * c2 + b[2][0] * b[2][2] * c3) ) * 0.5 + ( (b[3][2] * b[2][0] * c2 + b[3][0] * b[2][2] * c3) ) * 1.0 ),      (( (b[2][2] * b[2][1] * c2 + b[2][1] * b[2][2] * c3) ) * 0.5 + ( (b[3][2] * b[2][1] * c2 + b[3][1] * b[2][2] * c3) ) * 1.0 ),      (( (b[2][2] * b[2][2] * c2 + b[2][2] * b[2][2] * c3)+ ((b[2][0] * b[2][0] + b[2][1] * b[2][1] + b[2][2] * b[2][2]) * c3) ) * 0.5 + ( (b[3][2] * b[2][2] * c2 + b[3][2] * b[2][2] * c3)+ ((b[3][0] * b[2][0] + b[3][1] * b[2][1] + b[3][2] * b[2][2]) * c3) ) * 1.0 ),      (( (b[2][2] * b[3][0] * c2 + b[2][0] * b[3][2] * c3) ) * 1.0 + ( (b[3][2] * b[3][0] * c2 + b[3][0] * b[3][2] * c3) ) * 0.5 ),      (( (b[2][2] * b[3][1] * c2 + b[2][1] * b[3][2] * c3) ) * 1.0 + ( (b[3][2] * b[3][1] * c2 + b[3][1] * b[3][2] * c3) ) * 0.5 ),      (( (b[2][2] * b[3][2] * c2 + b[2][2] * b[3][2] * c3)+ ((b[2][0] * b[3][0] + b[2][1] * b[3][1] + b[2][2] * b[3][2]) * c3) ) * 1.0 + ( (b[3][2] * b[3][2] * c2 + b[3][2] * b[3][2] * c3)+ ((b[3][0] * b[3][0] + b[3][1] * b[3][1] + b[3][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[2][2] * b[0][0] * c2 + b[2][0] * b[0][2] * c3) ) * 0.5 + ( (b[2][2] * b[1][0] * c2 + b[2][0] * b[1][2] * c3) ) * 0.5 + ( (b[3][2] * b[0][0] * c2 + b[3][0] * b[0][2] * c3) ) * 0.5 + ( (b[3][2] * b[1][0] * c2 + b[3][0] * b[1][2] * c3) ) * 0.5 ),      (( (b[2][2] * b[0][1] * c2 + b[2][1] * b[0][2] * c3) ) * 0.5 + ( (b[2][2] * b[1][1] * c2 + b[2][1] * b[1][2] * c3) ) * 0.5 + ( (b[3][2] * b[0][1] * c2 + b[3][1] * b[0][2] * c3) ) * 0.5 + ( (b[3][2] * b[1][1] * c2 + b[3][1] * b[1][2] * c3) ) * 0.5 ),      (( (b[2][2] * b[0][2] * c2 + b[2][2] * b[0][2] * c3)+ ((b[2][0] * b[0][0] + b[2][1] * b[0][1] + b[2][2] * b[0][2]) * c3) ) * 0.5 + ( (b[2][2] * b[1][2] * c2 + b[2][2] * b[1][2] * c3)+ ((b[2][0] * b[1][0] + b[2][1] * b[1][1] + b[2][2] * b[1][2]) * c3) ) * 0.5 + ( (b[3][2] * b[0][2] * c2 + b[3][2] * b[0][2] * c3)+ ((b[3][0] * b[0][0] + b[3][1] * b[0][1] + b[3][2] * b[0][2]) * c3) ) * 0.5 + ( (b[3][2] * b[1][2] * c2 + b[3][2] * b[1][2] * c3)+ ((b[3][0] * b[1][0] + b[3][1] * b[1][1] + b[3][2] * b[1][2]) * c3) ) * 0.5 ),      (( (b[2][2] * b[1][0] * c2 + b[2][0] * b[1][2] * c3) ) * 0.5 + ( (b[2][2] * b[2][0] * c2 + b[2][0] * b[2][2] * c3) ) * 0.5 + ( (b[3][2] * b[1][0] * c2 + b[3][0] * b[1][2] * c3) ) * 1.0 + ( (b[3][2] * b[2][0] * c2 + b[3][0] * b[2][2] * c3) ) * 0.5 ),      (( (b[2][2] * b[1][1] * c2 + b[2][1] * b[1][2] * c3) ) * 0.5 + ( (b[2][2] * b[2][1] * c2 + b[2][1] * b[2][2] * c3) ) * 0.5 + ( (b[3][2] * b[1][1] * c2 + b[3][1] * b[1][2] * c3) ) * 1.0 + ( (b[3][2] * b[2][1] * c2 + b[3][1] * b[2][2] * c3) ) * 0.5 ),      (( (b[2][2] * b[1][2] * c2 + b[2][2] * b[1][2] * c3)+ ((b[2][0] * b[1][0] + b[2][1] * b[1][1] + b[2][2] * b[1][2]) * c3) ) * 0.5 + ( (b[2][2] * b[2][2] * c2 + b[2][2] * b[2][2] * c3)+ ((b[2][0] * b[2][0] + b[2][1] * b[2][1] + b[2][2] * b[2][2]) * c3) ) * 0.5 + ( (b[3][2] * b[1][2] * c2 + b[3][2] * b[1][2] * c3)+ ((b[3][0] * b[1][0] + b[3][1] * b[1][1] + b[3][2] * b[1][2]) * c3) ) * 1.0 + ( (b[3][2] * b[2][2] * c2 + b[3][2] * b[2][2] * c3)+ ((b[3][0] * b[2][0] + b[3][1] * b[2][1] + b[3][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[2][2] * b[0][0] * c2 + b[2][0] * b[0][2] * c3) ) * 0.5 + ( (b[2][2] * b[2][0] * c2 + b[2][0] * b[2][2] * c3) ) * 0.5 + ( (b[3][2] * b[0][0] * c2 + b[3][0] * b[0][2] * c3) ) * 1.0 + ( (b[3][2] * b[2][0] * c2 + b[3][0] * b[2][2] * c3) ) * 0.5 ),      (( (b[2][2] * b[0][1] * c2 + b[2][1] * b[0][2] * c3) ) * 0.5 + ( (b[2][2] * b[2][1] * c2 + b[2][1] * b[2][2] * c3) ) * 0.5 + ( (b[3][2] * b[0][1] * c2 + b[3][1] * b[0][2] * c3) ) * 1.0 + ( (b[3][2] * b[2][1] * c2 + b[3][1] * b[2][2] * c3) ) * 0.5 ),      (( (b[2][2] * b[0][2] * c2 + b[2][2] * b[0][2] * c3)+ ((b[2][0] * b[0][0] + b[2][1] * b[0][1] + b[2][2] * b[0][2]) * c3) ) * 0.5 + ( (b[2][2] * b[2][2] * c2 + b[2][2] * b[2][2] * c3)+ ((b[2][0] * b[2][0] + b[2][1] * b[2][1] + b[2][2] * b[2][2]) * c3) ) * 0.5 + ( (b[3][2] * b[0][2] * c2 + b[3][2] * b[0][2] * c3)+ ((b[3][0] * b[0][0] + b[3][1] * b[0][1] + b[3][2] * b[0][2]) * c3) ) * 1.0 + ( (b[3][2] * b[2][2] * c2 + b[3][2] * b[2][2] * c3)+ ((b[3][0] * b[2][0] + b[3][1] * b[2][1] + b[3][2] * b[2][2]) * c3) ) * 0.5 ),      (( (b[2][2] * b[0][0] * c2 + b[2][0] * b[0][2] * c3) ) * 1.0 + ( (b[2][2] * b[3][0] * c2 + b[2][0] * b[3][2] * c3) ) * 0.5 + ( (b[3][2] * b[0][0] * c2 + b[3][0] * b[0][2] * c3) ) * 0.5 + ( (b[3][2] * b[3][0] * c2 + b[3][0] * b[3][2] * c3) ) * 0.5 ),      (( (b[2][2] * b[0][1] * c2 + b[2][1] * b[0][2] * c3) ) * 1.0 + ( (b[2][2] * b[3][1] * c2 + b[2][1] * b[3][2] * c3) ) * 0.5 + ( (b[3][2] * b[0][1] * c2 + b[3][1] * b[0][2] * c3) ) * 0.5 + ( (b[3][2] * b[3][1] * c2 + b[3][1] * b[3][2] * c3) ) * 0.5 ),      (( (b[2][2] * b[0][2] * c2 + b[2][2] * b[0][2] * c3)+ ((b[2][0] * b[0][0] + b[2][1] * b[0][1] + b[2][2] * b[0][2]) * c3) ) * 1.0 + ( (b[2][2] * b[3][2] * c2 + b[2][2] * b[3][2] * c3)+ ((b[2][0] * b[3][0] + b[2][1] * b[3][1] + b[2][2] * b[3][2]) * c3) ) * 0.5 + ( (b[3][2] * b[0][2] * c2 + b[3][2] * b[0][2] * c3)+ ((b[3][0] * b[0][0] + b[3][1] * b[0][1] + b[3][2] * b[0][2]) * c3) ) * 0.5 + ( (b[3][2] * b[3][2] * c2 + b[3][2] * b[3][2] * c3)+ ((b[3][0] * b[3][0] + b[3][1] * b[3][1] + b[3][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[2][2] * b[1][0] * c2 + b[2][0] * b[1][2] * c3) ) * 1.0 + ( (b[2][2] * b[3][0] * c2 + b[2][0] * b[3][2] * c3) ) * 0.5 + ( (b[3][2] * b[1][0] * c2 + b[3][0] * b[1][2] * c3) ) * 0.5 + ( (b[3][2] * b[3][0] * c2 + b[3][0] * b[3][2] * c3) ) * 0.5 ),      (( (b[2][2] * b[1][1] * c2 + b[2][1] * b[1][2] * c3) ) * 1.0 + ( (b[2][2] * b[3][1] * c2 + b[2][1] * b[3][2] * c3) ) * 0.5 + ( (b[3][2] * b[1][1] * c2 + b[3][1] * b[1][2] * c3) ) * 0.5 + ( (b[3][2] * b[3][1] * c2 + b[3][1] * b[3][2] * c3) ) * 0.5 ),      (( (b[2][2] * b[1][2] * c2 + b[2][2] * b[1][2] * c3)+ ((b[2][0] * b[1][0] + b[2][1] * b[1][1] + b[2][2] * b[1][2]) * c3) ) * 1.0 + ( (b[2][2] * b[3][2] * c2 + b[2][2] * b[3][2] * c3)+ ((b[2][0] * b[3][0] + b[2][1] * b[3][1] + b[2][2] * b[3][2]) * c3) ) * 0.5 + ( (b[3][2] * b[1][2] * c2 + b[3][2] * b[1][2] * c3)+ ((b[3][0] * b[1][0] + b[3][1] * b[1][1] + b[3][2] * b[1][2]) * c3) ) * 0.5 + ( (b[3][2] * b[3][2] * c2 + b[3][2] * b[3][2] * c3)+ ((b[3][0] * b[3][0] + b[3][1] * b[3][1] + b[3][2] * b[3][2]) * c3) ) * 0.5 ),      (( (b[2][2] * b[2][0] * c2 + b[2][0] * b[2][2] * c3) ) * 1.0 + ( (b[2][2] * b[3][0] * c2 + b[2][0] * b[3][2] * c3) ) * 0.5 + ( (b[3][2] * b[2][0] * c2 + b[3][0] * b[2][2] * c3) ) * 0.5 + ( (b[3][2] * b[3][0] * c2 + b[3][0] * b[3][2] * c3) ) * 1.0 ),      (( (b[2][2] * b[2][1] * c2 + b[2][1] * b[2][2] * c3) ) * 1.0 + ( (b[2][2] * b[3][1] * c2 + b[2][1] * b[3][2] * c3) ) * 0.5 + ( (b[3][2] * b[2][1] * c2 + b[3][1] * b[2][2] * c3) ) * 0.5 + ( (b[3][2] * b[3][1] * c2 + b[3][1] * b[3][2] * c3) ) * 1.0 ),      (( (b[2][2] * b[2][2] * c2 + b[2][2] * b[2][2] * c3)+ ((b[2][0] * b[2][0] + b[2][1] * b[2][1] + b[2][2] * b[2][2]) * c3) ) * 1.0 + ( (b[2][2] * b[3][2] * c2 + b[2][2] * b[3][2] * c3)+ ((b[2][0] * b[3][0] + b[2][1] * b[3][1] + b[2][2] * b[3][2]) * c3) ) * 0.5 + ( (b[3][2] * b[2][2] * c2 + b[3][2] * b[2][2] * c3)+ ((b[3][0] * b[2][0] + b[3][1] * b[2][1] + b[3][2] * b[2][2]) * c3) ) * 0.5 + ( (b[3][2] * b[3][2] * c2 + b[3][2] * b[3][2] * c3)+ ((b[3][0] * b[3][0] + b[3][1] * b[3][1] + b[3][2] * b[3][2]) * c3) ) * 1.0 )}
};

	K = GenMatrix<float,30,30>(Ktemp) * (2.0/5.0) * volume;
	//for(int i=0;i<30;i++,putchar('\n'))
	//	for(int j=0;j<30;j++)
	//		printf("%f ",K(i,j));
	//system("pause");
}
#endif


#ifdef _GAUSSIAN_QUADRATURE_
void 
QuadTetElement::computeStiffness()
{
	//4 point Gaussian Quadrature
	//material constants
	float c1 = (E*(1-v))/((1.0-2.0*v)*(1.0+v)),
		c2 = (E*v)/((1.0-2.0*v)*(1.0+v)),
		c3 = (c1 - c2)/2.0;
	//printf("%f %f %f\n",c1,c2,c3);

	//for GPU
		Matrix4d J =	Matrix4d
			( 1.0, 1.0, 1.0, 1.0,
			nodes[0]->pos.x, nodes[1]->pos.x, nodes[2]->pos.x, nodes[3]->pos.x,
			nodes[0]->pos.y, nodes[1]->pos.y, nodes[2]->pos.y, nodes[3]->pos.y,
			nodes[0]->pos.z, nodes[1]->pos.z, nodes[2]->pos.z, nodes[3]->pos.z);

		Matrix4d Jinv =	J.inverse();

		for(int i=0;i<4;i++)
			for(int j=0;j<3;j++)
				B[i][j] = Jinv(i,j+1);

		float Jdet = fabs(J.determinant());

		con1 = c1 * 0.25 * (1.0/6.0) * Jdet;
		con2 = c2 * 0.25 * (1.0/6.0) * Jdet;
	//////////////

	float C[6][6] =
	{
		{ c1, c2, c2, 0, 0, 0 },
		{c2, c1, c2, 0, 0, 0 },
		{c2, c2, c1, 0, 0, 0 },
		{0, 0, 0, c3, 0, 0 },
		{0, 0, 0, 0, c3, 0 },
		{0, 0, 0, 0, 0, c3 }
	};

	GenMatrix<float,6,6> E(C);


	K.zeroOut();

	float a = (5.0 + 3.0 * sqrt(5.0))/20.;
	float b = (5.0 - sqrt(5.0))/20.;

	float S[4][4] = { {a,b,b,b},
					  {b,a,b,b},
					  {b,b,a,b},
					  {b,b,b,a} };

	float weight = 0.25;

	for(int i=0;i<4;i++)
	{
		GenMatrix<float, 6, 30> B;
		float det;

		computeB(S[i],&B, &det);
		K = K + (B.transpose() * E * B) * (1.0/6.0) * Jdet * 0.25;// * (det * weight));
	}

	//K = K * (1.0/6.0) * Jdet * 0.25;
}
#endif

QuadTetElement::~QuadTetElement(void)
{
}
