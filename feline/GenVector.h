#pragma once
#include "includes.h"

template<class T, int N>
class GenVector
{
	T arr[N];
	GenVector()
	{
		for(int i=0;i<N;i++)
			arr[i] = 0;
	}

	GenVector(T* a)
	{
		for(int i=0;i<N;i++)
			arr[i] = a[i];
	}

	T operator[](int i)
	{
		return arr[i];
	}

	T dot(GenVector<T,N>& v)
	{
		T result = 0;
		for(int i=0;i<N;i++)
		{
			result +=arr[i] * v[i];
		}

		return result;
	}

	void ScalarMul(T k)
	{
		for(int i=0;i<N;i++)
			arr[i] *= k;
	}

	void ScalarDiv(T k)
	{
		for(int i=0;i<N;i++)
			arr[i] /= k;
	}

	~GenVector()
	{
	}
};


////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////



template<class T>
class GenVectorDyn
{
	T* arr;
	int n;
	GenVectorDyn(int _n)
	{
		n = _n
		arr = new T[n];
		for(int i=0;i<n;i++)
			arr[i] = 0;
	}

	GenVectorDyn(T* a, int n)
	{
		arr = new T[n];
		for(int i=0;i<n;i++)
			arr[i] = a[i];
	}

	T operator[](int i)
	{
		return arr[i];
	}

	T dot(GenVectorDyn<T>& v)
	{
		T result = 0;
		for(int i=0;i<n;i++)
		{
			result +=arr[i] * v[i];
		}

		return result;
	}

	void ScalarMul(T k)
	{
		for(int i=0;i<n;i++)
			arr[i] *= k;
	}

	void ScalarDiv(T k)
	{
		for(int i=0;i<n;i++)
			arr[i] /= k;
	}

	~GenVectorDyn()
	{
		delete[] arr;
	}
};